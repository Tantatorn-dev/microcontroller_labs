
Lab05_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005da8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08005fa8  08005fa8  00015fa8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006238  08006238  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08006238  08006238  00016238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006240  08006240  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006240  08006240  00016240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006244  08006244  00016244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007e58  200001dc  08006424  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008034  08006424  00028034  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b411  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f5e  00000000  00000000  0002b61b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002d580  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000820  00000000  00000000  0002dec8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027300  00000000  00000000  0002e6e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000aee8  00000000  00000000  000559e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f3b99  00000000  00000000  000608d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00154469  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b68  00000000  00000000  001544e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001dc 	.word	0x200001dc
 800021c:	00000000 	.word	0x00000000
 8000220:	08005f90 	.word	0x08005f90

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e0 	.word	0x200001e0
 800023c:	08005f90 	.word	0x08005f90

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000602:	4b52      	ldr	r3, [pc, #328]	; (800074c <MX_ADC1_Init+0x15c>)
 8000604:	4a52      	ldr	r2, [pc, #328]	; (8000750 <MX_ADC1_Init+0x160>)
 8000606:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000608:	4b50      	ldr	r3, [pc, #320]	; (800074c <MX_ADC1_Init+0x15c>)
 800060a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800060e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000610:	4b4e      	ldr	r3, [pc, #312]	; (800074c <MX_ADC1_Init+0x15c>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000616:	4b4d      	ldr	r3, [pc, #308]	; (800074c <MX_ADC1_Init+0x15c>)
 8000618:	2201      	movs	r2, #1
 800061a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800061c:	4b4b      	ldr	r3, [pc, #300]	; (800074c <MX_ADC1_Init+0x15c>)
 800061e:	2201      	movs	r2, #1
 8000620:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000622:	4b4a      	ldr	r3, [pc, #296]	; (800074c <MX_ADC1_Init+0x15c>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b48      	ldr	r3, [pc, #288]	; (800074c <MX_ADC1_Init+0x15c>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000630:	4b46      	ldr	r3, [pc, #280]	; (800074c <MX_ADC1_Init+0x15c>)
 8000632:	4a48      	ldr	r2, [pc, #288]	; (8000754 <MX_ADC1_Init+0x164>)
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b45      	ldr	r3, [pc, #276]	; (800074c <MX_ADC1_Init+0x15c>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 800063c:	4b43      	ldr	r3, [pc, #268]	; (800074c <MX_ADC1_Init+0x15c>)
 800063e:	2208      	movs	r2, #8
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000642:	4b42      	ldr	r3, [pc, #264]	; (800074c <MX_ADC1_Init+0x15c>)
 8000644:	2201      	movs	r2, #1
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b40      	ldr	r3, [pc, #256]	; (800074c <MX_ADC1_Init+0x15c>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	483e      	ldr	r0, [pc, #248]	; (800074c <MX_ADC1_Init+0x15c>)
 8000652:	f000 fc8b 	bl	8000f6c <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 faba 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000668:	2307      	movs	r3, #7
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4836      	ldr	r0, [pc, #216]	; (800074c <MX_ADC1_Init+0x15c>)
 8000672:	f000 fdb7 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800067c:	f000 faaa 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000680:	2308      	movs	r3, #8
 8000682:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000684:	2302      	movs	r3, #2
 8000686:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	482f      	ldr	r0, [pc, #188]	; (800074c <MX_ADC1_Init+0x15c>)
 800068e:	f000 fda9 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000698:	f000 fa9c 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800069c:	230a      	movs	r3, #10
 800069e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a4:	463b      	mov	r3, r7
 80006a6:	4619      	mov	r1, r3
 80006a8:	4828      	ldr	r0, [pc, #160]	; (800074c <MX_ADC1_Init+0x15c>)
 80006aa:	f000 fd9b 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b4:	f000 fa8e 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80006b8:	230d      	movs	r3, #13
 80006ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006bc:	2304      	movs	r3, #4
 80006be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <MX_ADC1_Init+0x15c>)
 80006c6:	f000 fd8d 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006d0:	f000 fa80 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006d4:	2303      	movs	r3, #3
 80006d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006d8:	2305      	movs	r3, #5
 80006da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	481a      	ldr	r0, [pc, #104]	; (800074c <MX_ADC1_Init+0x15c>)
 80006e2:	f000 fd7f 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006ec:	f000 fa72 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006f0:	2305      	movs	r3, #5
 80006f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006f4:	2306      	movs	r3, #6
 80006f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f8:	463b      	mov	r3, r7
 80006fa:	4619      	mov	r1, r3
 80006fc:	4813      	ldr	r0, [pc, #76]	; (800074c <MX_ADC1_Init+0x15c>)
 80006fe:	f000 fd71 	bl	80011e4 <HAL_ADC_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000708:	f000 fa64 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800070c:	2309      	movs	r3, #9
 800070e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000710:	2307      	movs	r3, #7
 8000712:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000714:	463b      	mov	r3, r7
 8000716:	4619      	mov	r1, r3
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <MX_ADC1_Init+0x15c>)
 800071a:	f000 fd63 	bl	80011e4 <HAL_ADC_ConfigChannel>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000724:	f000 fa56 	bl	8000bd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000728:	230c      	movs	r3, #12
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 800072c:	2308      	movs	r3, #8
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	4619      	mov	r1, r3
 8000734:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_ADC1_Init+0x15c>)
 8000736:	f000 fd55 	bl	80011e4 <HAL_ADC_ConfigChannel>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000740:	f000 fa48 	bl	8000bd4 <Error_Handler>
  }

}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000204 	.word	0x20000204
 8000750:	40012000 	.word	0x40012000
 8000754:	0f000001 	.word	0x0f000001

08000758 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08c      	sub	sp, #48	; 0x30
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a45      	ldr	r2, [pc, #276]	; (800088c <HAL_ADC_MspInit+0x134>)
 8000776:	4293      	cmp	r3, r2
 8000778:	f040 8084 	bne.w	8000884 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800077c:	4b44      	ldr	r3, [pc, #272]	; (8000890 <HAL_ADC_MspInit+0x138>)
 800077e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000780:	4a43      	ldr	r2, [pc, #268]	; (8000890 <HAL_ADC_MspInit+0x138>)
 8000782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000786:	6453      	str	r3, [r2, #68]	; 0x44
 8000788:	4b41      	ldr	r3, [pc, #260]	; (8000890 <HAL_ADC_MspInit+0x138>)
 800078a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000790:	61bb      	str	r3, [r7, #24]
 8000792:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b3e      	ldr	r3, [pc, #248]	; (8000890 <HAL_ADC_MspInit+0x138>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a3d      	ldr	r2, [pc, #244]	; (8000890 <HAL_ADC_MspInit+0x138>)
 800079a:	f043 0304 	orr.w	r3, r3, #4
 800079e:	6313      	str	r3, [r2, #48]	; 0x30
 80007a0:	4b3b      	ldr	r3, [pc, #236]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b38      	ldr	r3, [pc, #224]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b0:	4a37      	ldr	r2, [pc, #220]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	6313      	str	r3, [r2, #48]	; 0x30
 80007b8:	4b35      	ldr	r3, [pc, #212]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b32      	ldr	r3, [pc, #200]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c8:	4a31      	ldr	r2, [pc, #196]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	6313      	str	r3, [r2, #48]	; 0x30
 80007d0:	4b2f      	ldr	r3, [pc, #188]	; (8000890 <HAL_ADC_MspInit+0x138>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80007dc:	230d      	movs	r3, #13
 80007de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e0:	2303      	movs	r3, #3
 80007e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e8:	f107 031c 	add.w	r3, r7, #28
 80007ec:	4619      	mov	r1, r3
 80007ee:	4829      	ldr	r0, [pc, #164]	; (8000894 <HAL_ADC_MspInit+0x13c>)
 80007f0:	f001 fc46 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_5;
 80007f4:	2329      	movs	r3, #41	; 0x29
 80007f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f8:	2303      	movs	r3, #3
 80007fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 031c 	add.w	r3, r7, #28
 8000804:	4619      	mov	r1, r3
 8000806:	4824      	ldr	r0, [pc, #144]	; (8000898 <HAL_ADC_MspInit+0x140>)
 8000808:	f001 fc3a 	bl	8002080 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800080c:	2303      	movs	r3, #3
 800080e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000810:	2303      	movs	r3, #3
 8000812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000818:	f107 031c 	add.w	r3, r7, #28
 800081c:	4619      	mov	r1, r3
 800081e:	481f      	ldr	r0, [pc, #124]	; (800089c <HAL_ADC_MspInit+0x144>)
 8000820:	f001 fc2e 	bl	8002080 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000824:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <HAL_ADC_MspInit+0x14c>)
 8000828:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800082a:	4b1d      	ldr	r3, [pc, #116]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000830:	4b1b      	ldr	r3, [pc, #108]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000836:	4b1a      	ldr	r3, [pc, #104]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800083c:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 800083e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000842:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000846:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800084a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800084c:	4b14      	ldr	r3, [pc, #80]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 800084e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000852:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800085a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 800085e:	2200      	movs	r2, #0
 8000860:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000864:	2200      	movs	r2, #0
 8000866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000868:	480d      	ldr	r0, [pc, #52]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 800086a:	f001 f893 	bl	8001994 <HAL_DMA_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8000874:	f000 f9ae 	bl	8000bd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a09      	ldr	r2, [pc, #36]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 800087c:	639a      	str	r2, [r3, #56]	; 0x38
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_ADC_MspInit+0x148>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000884:	bf00      	nop
 8000886:	3730      	adds	r7, #48	; 0x30
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40012000 	.word	0x40012000
 8000890:	40023800 	.word	0x40023800
 8000894:	40020800 	.word	0x40020800
 8000898:	40020000 	.word	0x40020000
 800089c:	40020400 	.word	0x40020400
 80008a0:	2000024c 	.word	0x2000024c
 80008a4:	40026410 	.word	0x40026410

080008a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_DMA_Init+0x38>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a0b      	ldr	r2, [pc, #44]	; (80008e0 <MX_DMA_Init+0x38>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_DMA_Init+0x38>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2102      	movs	r1, #2
 80008ca:	2038      	movs	r0, #56	; 0x38
 80008cc:	f001 f82b 	bl	8001926 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008d0:	2038      	movs	r0, #56	; 0x38
 80008d2:	f001 f844 	bl	800195e <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 0314 	add.w	r3, r7, #20
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008fa:	4b2e      	ldr	r3, [pc, #184]	; (80009b4 <MX_GPIO_Init+0xd0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a2d      	ldr	r2, [pc, #180]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000900:	f043 0304 	orr.w	r3, r3, #4
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b2b      	ldr	r3, [pc, #172]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0304 	and.w	r3, r3, #4
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a27      	ldr	r2, [pc, #156]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000918:	f043 0301 	orr.w	r3, r3, #1
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0301 	and.w	r3, r3, #1
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b22      	ldr	r3, [pc, #136]	; (80009b4 <MX_GPIO_Init+0xd0>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a21      	ldr	r2, [pc, #132]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000942:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a1b      	ldr	r2, [pc, #108]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <MX_GPIO_Init+0xd0>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000960:	4815      	ldr	r0, [pc, #84]	; (80009b8 <MX_GPIO_Init+0xd4>)
 8000962:	f001 fd37 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2180      	movs	r1, #128	; 0x80
 800096a:	4814      	ldr	r0, [pc, #80]	; (80009bc <MX_GPIO_Init+0xd8>)
 800096c:	f001 fd32 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000970:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000976:	2311      	movs	r3, #17
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097e:	2300      	movs	r3, #0
 8000980:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0xd4>)
 800098a:	f001 fb79 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800098e:	2380      	movs	r3, #128	; 0x80
 8000990:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800099e:	f107 0314 	add.w	r3, r7, #20
 80009a2:	4619      	mov	r1, r3
 80009a4:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_GPIO_Init+0xd8>)
 80009a6:	f001 fb6b 	bl	8002080 <HAL_GPIO_Init>

}
 80009aa:	bf00      	nop
 80009ac:	3728      	adds	r7, #40	; 0x28
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020800 	.word	0x40020800
 80009bc:	40020400 	.word	0x40020400

080009c0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	4803      	ldr	r0, [pc, #12]	; (80009dc <HAL_ADC_ConvCpltCallback+0x1c>)
 80009ce:	f001 fd01 	bl	80023d4 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40020400 	.word	0x40020400

080009e0 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	4803      	ldr	r0, [pc, #12]	; (80009fc <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 80009ee:	f001 fcf1 	bl	80023d4 <HAL_GPIO_WritePin>
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40020400 	.word	0x40020400

08000a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a06:	f000 fa32 	bl	8000e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0a:	f000 f853 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a0e:	f7ff ff69 	bl	80008e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a12:	f7ff ff49 	bl	80008a8 <MX_DMA_Init>
  MX_ADC1_Init();
 8000a16:	f7ff fdeb 	bl	80005f0 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000a1a:	f000 f98b 	bl	8000d34 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_val, 8000);
 8000a1e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000a22:	491f      	ldr	r1, [pc, #124]	; (8000aa0 <main+0xa0>)
 8000a24:	481f      	ldr	r0, [pc, #124]	; (8000aa4 <main+0xa4>)
 8000a26:	f000 fae5 	bl	8000ff4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 8; i++) {
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	e020      	b.n	8000a72 <main+0x72>
	  			char tmp[15];
	  			int len = sprintf(tmp, "%.2f  ", (((double)adc_val[i])/4095.0)*3.3);
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <main+0xa0>)
 8000a32:	697b      	ldr	r3, [r7, #20]
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	ee07 3a90 	vmov	s15, r3
 8000a3c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000a40:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000a90 <main+0x90>
 8000a44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a48:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000a98 <main+0x98>
 8000a4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000a50:	4638      	mov	r0, r7
 8000a52:	ec53 2b17 	vmov	r2, r3, d7
 8000a56:	4914      	ldr	r1, [pc, #80]	; (8000aa8 <main+0xa8>)
 8000a58:	f003 ff26 	bl	80048a8 <siprintf>
 8000a5c:	6138      	str	r0, [r7, #16]
	  			HAL_UART_Transmit(&huart3, (unsigned char*) tmp, len, 100);
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	b29a      	uxth	r2, r3
 8000a62:	4639      	mov	r1, r7
 8000a64:	2364      	movs	r3, #100	; 0x64
 8000a66:	4811      	ldr	r0, [pc, #68]	; (8000aac <main+0xac>)
 8000a68:	f002 fe12 	bl	8003690 <HAL_UART_Transmit>
	  for (int i = 0; i < 8; i++) {
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	2b07      	cmp	r3, #7
 8000a76:	dddb      	ble.n	8000a30 <main+0x30>
	  		}
	  HAL_Delay(300);
 8000a78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000a7c:	f000 fa54 	bl	8000f28 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (unsigned char*)"\r\n", 2, 100);
 8000a80:	2364      	movs	r3, #100	; 0x64
 8000a82:	2202      	movs	r2, #2
 8000a84:	490a      	ldr	r1, [pc, #40]	; (8000ab0 <main+0xb0>)
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <main+0xac>)
 8000a88:	f002 fe02 	bl	8003690 <HAL_UART_Transmit>
	  for (int i = 0; i < 8; i++) {
 8000a8c:	e7cd      	b.n	8000a2a <main+0x2a>
 8000a8e:	bf00      	nop
 8000a90:	00000000 	.word	0x00000000
 8000a94:	40affe00 	.word	0x40affe00
 8000a98:	66666666 	.word	0x66666666
 8000a9c:	400a6666 	.word	0x400a6666
 8000aa0:	200002ac 	.word	0x200002ac
 8000aa4:	20000204 	.word	0x20000204
 8000aa8:	08005fb0 	.word	0x08005fb0
 8000aac:	20007fac 	.word	0x20007fac
 8000ab0:	08005fb8 	.word	0x08005fb8

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b0b8      	sub	sp, #224	; 0xe0
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000abe:	2234      	movs	r2, #52	; 0x34
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f003 faac 	bl	8004020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	2290      	movs	r2, #144	; 0x90
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f003 fa9d 	bl	8004020 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <SystemClock_Config+0x118>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	4a38      	ldr	r2, [pc, #224]	; (8000bcc <SystemClock_Config+0x118>)
 8000aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af0:	6413      	str	r3, [r2, #64]	; 0x40
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <SystemClock_Config+0x118>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afe:	4b34      	ldr	r3, [pc, #208]	; (8000bd0 <SystemClock_Config+0x11c>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a33      	ldr	r2, [pc, #204]	; (8000bd0 <SystemClock_Config+0x11c>)
 8000b04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b08:	6013      	str	r3, [r2, #0]
 8000b0a:	4b31      	ldr	r3, [pc, #196]	; (8000bd0 <SystemClock_Config+0x11c>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b16:	2302      	movs	r3, #2
 8000b18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b22:	2310      	movs	r3, #16
 8000b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000b3a:	23d8      	movs	r3, #216	; 0xd8
 8000b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b46:	2302      	movs	r3, #2
 8000b48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b50:	4618      	mov	r0, r3
 8000b52:	f001 fca9 	bl	80024a8 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000b5c:	f000 f83a 	bl	8000bd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b60:	f001 fc52 	bl	8002408 <HAL_PWREx_EnableOverDrive>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000b6a:	f000 f833 	bl	8000bd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b6e:	230f      	movs	r3, #15
 8000b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b74:	2302      	movs	r3, #2
 8000b76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000b90:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b94:	2107      	movs	r1, #7
 8000b96:	4618      	mov	r0, r3
 8000b98:	f001 ff34 	bl	8002a04 <HAL_RCC_ClockConfig>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000ba2:	f000 f817 	bl	8000bd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ba6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000baa:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f002 f8f7 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000bc0:	f000 f808 	bl	8000bd4 <Error_Handler>
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	37e0      	adds	r7, #224	; 0xe0
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <HAL_MspInit+0x44>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	4a0e      	ldr	r2, [pc, #56]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <HAL_MspInit+0x44>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_MspInit+0x44>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a08      	ldr	r2, [pc, #32]	; (8000c28 <HAL_MspInit+0x44>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_MspInit+0x44>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c1a:	2005      	movs	r0, #5
 8000c1c:	f000 fe78 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c20:	bf00      	nop
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40023800 	.word	0x40023800

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3e:	e7fe      	b.n	8000c3e <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <MemManage_Handler+0x4>

08000c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c80:	f000 f932 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c8c:	4802      	ldr	r0, [pc, #8]	; (8000c98 <DMA2_Stream0_IRQHandler+0x10>)
 8000c8e:	f000 ff8f 	bl	8001bb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	2000024c 	.word	0x2000024c

08000c9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca4:	4a14      	ldr	r2, [pc, #80]	; (8000cf8 <_sbrk+0x5c>)
 8000ca6:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <_sbrk+0x60>)
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <_sbrk+0x64>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d102      	bne.n	8000cbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb8:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <_sbrk+0x64>)
 8000cba:	4a12      	ldr	r2, [pc, #72]	; (8000d04 <_sbrk+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cbe:	4b10      	ldr	r3, [pc, #64]	; (8000d00 <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	693a      	ldr	r2, [r7, #16]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d207      	bcs.n	8000cdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ccc:	f003 f97e 	bl	8003fcc <__errno>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cda:	e009      	b.n	8000cf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ce2:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <_sbrk+0x64>)
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4413      	add	r3, r2
 8000cea:	4a05      	ldr	r2, [pc, #20]	; (8000d00 <_sbrk+0x64>)
 8000cec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20080000 	.word	0x20080000
 8000cfc:	00000400 	.word	0x00000400
 8000d00:	200001f8 	.word	0x200001f8
 8000d04:	20008038 	.word	0x20008038

08000d08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d0c:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <SystemInit+0x28>)
 8000d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <SystemInit+0x28>)
 8000d14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d1c:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <SystemInit+0x28>)
 8000d1e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d22:	609a      	str	r2, [r3, #8]
#endif
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000d38:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <MX_USART3_UART_Init+0x5c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d3e:	4b13      	ldr	r3, [pc, #76]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d64:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <MX_USART3_UART_Init+0x58>)
 8000d78:	f002 fc3c 	bl	80035f4 <HAL_UART_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d82:	f7ff ff27 	bl	8000bd4 <Error_Handler>
  }

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20007fac 	.word	0x20007fac
 8000d90:	40004800 	.word	0x40004800

08000d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b08a      	sub	sp, #40	; 0x28
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <HAL_UART_MspInit+0x7c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d128      	bne.n	8000e08 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x80>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	4a16      	ldr	r2, [pc, #88]	; (8000e14 <HAL_UART_MspInit+0x80>)
 8000dbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <HAL_UART_MspInit+0x80>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <HAL_UART_MspInit+0x80>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	4a10      	ldr	r2, [pc, #64]	; (8000e14 <HAL_UART_MspInit+0x80>)
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <HAL_UART_MspInit+0x80>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	f003 0308 	and.w	r3, r3, #8
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000de6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000df8:	2307      	movs	r3, #7
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <HAL_UART_MspInit+0x84>)
 8000e04:	f001 f93c 	bl	8002080 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3728      	adds	r7, #40	; 0x28
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004800 	.word	0x40004800
 8000e14:	40023800 	.word	0x40023800
 8000e18:	40020c00 	.word	0x40020c00

08000e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e54 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e22:	e003      	b.n	8000e2c <LoopCopyDataInit>

08000e24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e2a:	3104      	adds	r1, #4

08000e2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e2c:	480b      	ldr	r0, [pc, #44]	; (8000e5c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e34:	d3f6      	bcc.n	8000e24 <CopyDataInit>
  ldr  r2, =_sbss
 8000e36:	4a0b      	ldr	r2, [pc, #44]	; (8000e64 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e38:	e002      	b.n	8000e40 <LoopFillZerobss>

08000e3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e3c:	f842 3b04 	str.w	r3, [r2], #4

08000e40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e44:	d3f9      	bcc.n	8000e3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e46:	f7ff ff5f 	bl	8000d08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f003 f8c5 	bl	8003fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e4e:	f7ff fdd7 	bl	8000a00 <main>
  bx  lr    
 8000e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e54:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000e58:	08006248 	.word	0x08006248
  ldr  r0, =_sdata
 8000e5c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e60:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8000e64:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8000e68:	20008034 	.word	0x20008034

08000e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC_IRQHandler>

08000e6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e72:	2003      	movs	r0, #3
 8000e74:	f000 fd4c 	bl	8001910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 f805 	bl	8000e88 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000e7e:	f7ff feb1 	bl	8000be4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000e82:	2300      	movs	r3, #0
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 fd67 	bl	800197a <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ec4:	f000 fd2f 	bl	8001926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000008 	.word	0x20000008
 8000ee4:	20000004 	.word	0x20000004

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000008 	.word	0x20000008
 8000f0c:	2000802c 	.word	0x2000802c

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000802c 	.word	0x2000802c

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <HAL_Delay+0x40>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000008 	.word	0x20000008

08000f6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e031      	b.n	8000fe6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d109      	bne.n	8000f9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff fbe4 	bl	8000758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 0310 	and.w	r3, r3, #16
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d116      	bne.n	8000fd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fae:	4b10      	ldr	r3, [pc, #64]	; (8000ff0 <HAL_ADC_Init+0x84>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	f043 0202 	orr.w	r2, r3, #2
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 fa5c 	bl	8001478 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f023 0303 	bic.w	r3, r3, #3
 8000fce:	f043 0201 	orr.w	r2, r3, #1
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	641a      	str	r2, [r3, #64]	; 0x40
 8000fd6:	e001      	b.n	8000fdc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	ffffeefd 	.word	0xffffeefd

08000ff4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800100a:	2b01      	cmp	r3, #1
 800100c:	d101      	bne.n	8001012 <HAL_ADC_Start_DMA+0x1e>
 800100e:	2302      	movs	r3, #2
 8001010:	e0c7      	b.n	80011a2 <HAL_ADC_Start_DMA+0x1ae>
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	2201      	movs	r2, #1
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d018      	beq.n	800105a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	689a      	ldr	r2, [r3, #8]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f042 0201 	orr.w	r2, r2, #1
 8001036:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001038:	4b5c      	ldr	r3, [pc, #368]	; (80011ac <HAL_ADC_Start_DMA+0x1b8>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a5c      	ldr	r2, [pc, #368]	; (80011b0 <HAL_ADC_Start_DMA+0x1bc>)
 800103e:	fba2 2303 	umull	r2, r3, r2, r3
 8001042:	0c9a      	lsrs	r2, r3, #18
 8001044:	4613      	mov	r3, r2
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4413      	add	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800104c:	e002      	b.n	8001054 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	3b01      	subs	r3, #1
 8001052:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f9      	bne.n	800104e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	2b01      	cmp	r3, #1
 8001066:	f040 809b 	bne.w	80011a0 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800106e:	4b51      	ldr	r3, [pc, #324]	; (80011b4 <HAL_ADC_Start_DMA+0x1c0>)
 8001070:	4013      	ands	r3, r2
 8001072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001084:	2b00      	cmp	r3, #0
 8001086:	d007      	beq.n	8001098 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001090:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010a4:	d106      	bne.n	80010b4 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	f023 0206 	bic.w	r2, r3, #6
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	645a      	str	r2, [r3, #68]	; 0x44
 80010b2:	e002      	b.n	80010ba <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2200      	movs	r2, #0
 80010b8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010c6:	4a3c      	ldr	r2, [pc, #240]	; (80011b8 <HAL_ADC_Start_DMA+0x1c4>)
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ce:	4a3b      	ldr	r2, [pc, #236]	; (80011bc <HAL_ADC_Start_DMA+0x1c8>)
 80010d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010d6:	4a3a      	ldr	r2, [pc, #232]	; (80011c0 <HAL_ADC_Start_DMA+0x1cc>)
 80010d8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685a      	ldr	r2, [r3, #4]
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80010f2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689a      	ldr	r2, [r3, #8]
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001102:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	334c      	adds	r3, #76	; 0x4c
 800110e:	4619      	mov	r1, r3
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f000 fcec 	bl	8001af0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001118:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_ADC_Start_DMA+0x1d0>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 031f 	and.w	r3, r3, #31
 8001120:	2b00      	cmp	r3, #0
 8001122:	d10f      	bne.n	8001144 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d136      	bne.n	80011a0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	689a      	ldr	r2, [r3, #8]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	e02d      	b.n	80011a0 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <HAL_ADC_Start_DMA+0x1d4>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d10e      	bne.n	800116c <HAL_ADC_Start_DMA+0x178>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d107      	bne.n	800116c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800116a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_ADC_Start_DMA+0x1d0>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0310 	and.w	r3, r3, #16
 8001174:	2b00      	cmp	r3, #0
 8001176:	d113      	bne.n	80011a0 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a13      	ldr	r2, [pc, #76]	; (80011cc <HAL_ADC_Start_DMA+0x1d8>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10e      	bne.n	80011a0 <HAL_ADC_Start_DMA+0x1ac>
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800119e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	20000000 	.word	0x20000000
 80011b0:	431bde83 	.word	0x431bde83
 80011b4:	fffff8fe 	.word	0xfffff8fe
 80011b8:	0800166d 	.word	0x0800166d
 80011bc:	08001727 	.word	0x08001727
 80011c0:	08001743 	.word	0x08001743
 80011c4:	40012300 	.word	0x40012300
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40012200 	.word	0x40012200

080011d0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e12a      	b.n	8001456 <HAL_ADC_ConfigChannel+0x272>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d93a      	bls.n	8001286 <HAL_ADC_ConfigChannel+0xa2>
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001218:	d035      	beq.n	8001286 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68d9      	ldr	r1, [r3, #12]
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	b29b      	uxth	r3, r3
 8001226:	461a      	mov	r2, r3
 8001228:	4613      	mov	r3, r2
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	4413      	add	r3, r2
 800122e:	3b1e      	subs	r3, #30
 8001230:	2207      	movs	r2, #7
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	400a      	ands	r2, r1
 800123e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a87      	ldr	r2, [pc, #540]	; (8001464 <HAL_ADC_ConfigChannel+0x280>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10a      	bne.n	8001260 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	68d9      	ldr	r1, [r3, #12]
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	061a      	lsls	r2, r3, #24
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	430a      	orrs	r2, r1
 800125c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800125e:	e035      	b.n	80012cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	68d9      	ldr	r1, [r3, #12]
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	689a      	ldr	r2, [r3, #8]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	b29b      	uxth	r3, r3
 8001270:	4618      	mov	r0, r3
 8001272:	4603      	mov	r3, r0
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	4403      	add	r3, r0
 8001278:	3b1e      	subs	r3, #30
 800127a:	409a      	lsls	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	430a      	orrs	r2, r1
 8001282:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001284:	e022      	b.n	80012cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6919      	ldr	r1, [r3, #16]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	b29b      	uxth	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4613      	mov	r3, r2
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	4413      	add	r3, r2
 800129a:	2207      	movs	r2, #7
 800129c:	fa02 f303 	lsl.w	r3, r2, r3
 80012a0:	43da      	mvns	r2, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	400a      	ands	r2, r1
 80012a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6919      	ldr	r1, [r3, #16]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	4603      	mov	r3, r0
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	4403      	add	r3, r0
 80012c2:	409a      	lsls	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	2b06      	cmp	r3, #6
 80012d2:	d824      	bhi.n	800131e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b05      	subs	r3, #5
 80012e6:	221f      	movs	r2, #31
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43da      	mvns	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	400a      	ands	r2, r1
 80012f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	b29b      	uxth	r3, r3
 8001302:	4618      	mov	r0, r3
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	4613      	mov	r3, r2
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	4413      	add	r3, r2
 800130e:	3b05      	subs	r3, #5
 8001310:	fa00 f203 	lsl.w	r2, r0, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
 800131c:	e04c      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	2b0c      	cmp	r3, #12
 8001324:	d824      	bhi.n	8001370 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b23      	subs	r3, #35	; 0x23
 8001338:	221f      	movs	r2, #31
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	43da      	mvns	r2, r3
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	400a      	ands	r2, r1
 8001346:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	b29b      	uxth	r3, r3
 8001354:	4618      	mov	r0, r3
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685a      	ldr	r2, [r3, #4]
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	3b23      	subs	r3, #35	; 0x23
 8001362:	fa00 f203 	lsl.w	r2, r0, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	631a      	str	r2, [r3, #48]	; 0x30
 800136e:	e023      	b.n	80013b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	; 0x41
 8001382:	221f      	movs	r2, #31
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	43da      	mvns	r2, r3
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	400a      	ands	r2, r1
 8001390:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	b29b      	uxth	r3, r3
 800139e:	4618      	mov	r0, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685a      	ldr	r2, [r3, #4]
 80013a4:	4613      	mov	r3, r2
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	3b41      	subs	r3, #65	; 0x41
 80013ac:	fa00 f203 	lsl.w	r2, r0, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a2a      	ldr	r2, [pc, #168]	; (8001468 <HAL_ADC_ConfigChannel+0x284>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10a      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1f4>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013ca:	d105      	bne.n	80013d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80013cc:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_ADC_ConfigChannel+0x288>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	4a26      	ldr	r2, [pc, #152]	; (800146c <HAL_ADC_ConfigChannel+0x288>)
 80013d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80013d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a22      	ldr	r2, [pc, #136]	; (8001468 <HAL_ADC_ConfigChannel+0x284>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d109      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x212>
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d105      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80013ea:	4b20      	ldr	r3, [pc, #128]	; (800146c <HAL_ADC_ConfigChannel+0x288>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	4a1f      	ldr	r2, [pc, #124]	; (800146c <HAL_ADC_ConfigChannel+0x288>)
 80013f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_ADC_ConfigChannel+0x284>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d125      	bne.n	800144c <HAL_ADC_ConfigChannel+0x268>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a17      	ldr	r2, [pc, #92]	; (8001464 <HAL_ADC_ConfigChannel+0x280>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d003      	beq.n	8001412 <HAL_ADC_ConfigChannel+0x22e>
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b11      	cmp	r3, #17
 8001410:	d11c      	bne.n	800144c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <HAL_ADC_ConfigChannel+0x288>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	4a15      	ldr	r2, [pc, #84]	; (800146c <HAL_ADC_ConfigChannel+0x288>)
 8001418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800141c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a10      	ldr	r2, [pc, #64]	; (8001464 <HAL_ADC_ConfigChannel+0x280>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d111      	bne.n	800144c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_ADC_ConfigChannel+0x28c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_ADC_ConfigChannel+0x290>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0c9a      	lsrs	r2, r3, #18
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800143e:	e002      	b.n	8001446 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	3b01      	subs	r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1f9      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	10000012 	.word	0x10000012
 8001468:	40012000 	.word	0x40012000
 800146c:	40012300 	.word	0x40012300
 8001470:	20000000 	.word	0x20000000
 8001474:	431bde83 	.word	0x431bde83

08001478 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001480:	4b78      	ldr	r3, [pc, #480]	; (8001664 <ADC_Init+0x1ec>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	4a77      	ldr	r2, [pc, #476]	; (8001664 <ADC_Init+0x1ec>)
 8001486:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800148a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800148c:	4b75      	ldr	r3, [pc, #468]	; (8001664 <ADC_Init+0x1ec>)
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	4973      	ldr	r1, [pc, #460]	; (8001664 <ADC_Init+0x1ec>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	685a      	ldr	r2, [r3, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	6859      	ldr	r1, [r3, #4]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	021a      	lsls	r2, r3, #8
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6859      	ldr	r1, [r3, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	689a      	ldr	r2, [r3, #8]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6899      	ldr	r1, [r3, #8]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68da      	ldr	r2, [r3, #12]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001506:	4a58      	ldr	r2, [pc, #352]	; (8001668 <ADC_Init+0x1f0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d022      	beq.n	8001552 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800151a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6899      	ldr	r1, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800153c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	6899      	ldr	r1, [r3, #8]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	e00f      	b.n	8001572 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	689a      	ldr	r2, [r3, #8]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001570:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0202 	bic.w	r2, r2, #2
 8001580:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6899      	ldr	r1, [r3, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	005a      	lsls	r2, r3, #1
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 3020 	ldrb.w	r3, [r3, #32]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6859      	ldr	r1, [r3, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ca:	3b01      	subs	r3, #1
 80015cc:	035a      	lsls	r2, r3, #13
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	e007      	b.n	80015e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	685a      	ldr	r2, [r3, #4]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69db      	ldr	r3, [r3, #28]
 8001602:	3b01      	subs	r3, #1
 8001604:	051a      	lsls	r2, r3, #20
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	430a      	orrs	r2, r1
 800160c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800161c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	6899      	ldr	r1, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800162a:	025a      	lsls	r2, r3, #9
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001642:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6899      	ldr	r1, [r3, #8]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	029a      	lsls	r2, r3, #10
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	609a      	str	r2, [r3, #8]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40012300 	.word	0x40012300
 8001668:	0f000001 	.word	0x0f000001

0800166c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001678:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001682:	2b00      	cmp	r3, #0
 8001684:	d13c      	bne.n	8001700 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d12b      	bne.n	80016f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d127      	bne.n	80016f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d119      	bne.n	80016f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f022 0220 	bic.w	r2, r2, #32
 80016d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d105      	bne.n	80016f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f043 0201 	orr.w	r2, r3, #1
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80016f8:	68f8      	ldr	r0, [r7, #12]
 80016fa:	f7ff f961 	bl	80009c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80016fe:	e00e      	b.n	800171e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fd5f 	bl	80011d0 <HAL_ADC_ErrorCallback>
}
 8001712:	e004      	b.n	800171e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	4798      	blx	r3
}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001734:	68f8      	ldr	r0, [r7, #12]
 8001736:	f7ff f953 	bl	80009e0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800173a:	bf00      	nop
 800173c:	3710      	adds	r7, #16
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f043 0204 	orr.w	r2, r3, #4
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f7ff fd34 	bl	80011d0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001768:	bf00      	nop
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001786:	68ba      	ldr	r2, [r7, #8]
 8001788:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800178c:	4013      	ands	r3, r2
 800178e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <__NVIC_SetPriorityGrouping+0x44>)
 800179a:	4313      	orrs	r3, r2
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <__NVIC_SetPriorityGrouping+0x40>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00
 80017b4:	05fa0000 	.word	0x05fa0000

080017b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017bc:	4b04      	ldr	r3, [pc, #16]	; (80017d0 <__NVIC_GetPriorityGrouping+0x18>)
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	0a1b      	lsrs	r3, r3, #8
 80017c2:	f003 0307 	and.w	r3, r3, #7
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	db0b      	blt.n	80017fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	4907      	ldr	r1, [pc, #28]	; (800180c <__NVIC_EnableIRQ+0x38>)
 80017ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f2:	095b      	lsrs	r3, r3, #5
 80017f4:	2001      	movs	r0, #1
 80017f6:	fa00 f202 	lsl.w	r2, r0, r2
 80017fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000e100 	.word	0xe000e100

08001810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001810:	b480      	push	{r7}
 8001812:	b083      	sub	sp, #12
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800181c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001820:	2b00      	cmp	r3, #0
 8001822:	db0a      	blt.n	800183a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	b2da      	uxtb	r2, r3
 8001828:	490c      	ldr	r1, [pc, #48]	; (800185c <__NVIC_SetPriority+0x4c>)
 800182a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182e:	0112      	lsls	r2, r2, #4
 8001830:	b2d2      	uxtb	r2, r2
 8001832:	440b      	add	r3, r1
 8001834:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001838:	e00a      	b.n	8001850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <__NVIC_SetPriority+0x50>)
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 030f 	and.w	r3, r3, #15
 8001846:	3b04      	subs	r3, #4
 8001848:	0112      	lsls	r2, r2, #4
 800184a:	b2d2      	uxtb	r2, r2
 800184c:	440b      	add	r3, r1
 800184e:	761a      	strb	r2, [r3, #24]
}
 8001850:	bf00      	nop
 8001852:	370c      	adds	r7, #12
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000e100 	.word	0xe000e100
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	60f8      	str	r0, [r7, #12]
 800186c:	60b9      	str	r1, [r7, #8]
 800186e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	f1c3 0307 	rsb	r3, r3, #7
 800187e:	2b04      	cmp	r3, #4
 8001880:	bf28      	it	cs
 8001882:	2304      	movcs	r3, #4
 8001884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3304      	adds	r3, #4
 800188a:	2b06      	cmp	r3, #6
 800188c:	d902      	bls.n	8001894 <NVIC_EncodePriority+0x30>
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	3b03      	subs	r3, #3
 8001892:	e000      	b.n	8001896 <NVIC_EncodePriority+0x32>
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001898:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43da      	mvns	r2, r3
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	401a      	ands	r2, r3
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa01 f303 	lsl.w	r3, r1, r3
 80018b6:	43d9      	mvns	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	4313      	orrs	r3, r2
         );
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3724      	adds	r7, #36	; 0x24
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018dc:	d301      	bcc.n	80018e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018de:	2301      	movs	r3, #1
 80018e0:	e00f      	b.n	8001902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018e2:	4a0a      	ldr	r2, [pc, #40]	; (800190c <SysTick_Config+0x40>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018ea:	210f      	movs	r1, #15
 80018ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018f0:	f7ff ff8e 	bl	8001810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f4:	4b05      	ldr	r3, [pc, #20]	; (800190c <SysTick_Config+0x40>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018fa:	4b04      	ldr	r3, [pc, #16]	; (800190c <SysTick_Config+0x40>)
 80018fc:	2207      	movs	r2, #7
 80018fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	e000e010 	.word	0xe000e010

08001910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff29 	bl	8001770 <__NVIC_SetPriorityGrouping>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001926:	b580      	push	{r7, lr}
 8001928:	b086      	sub	sp, #24
 800192a:	af00      	add	r7, sp, #0
 800192c:	4603      	mov	r3, r0
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
 8001932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001938:	f7ff ff3e 	bl	80017b8 <__NVIC_GetPriorityGrouping>
 800193c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	6978      	ldr	r0, [r7, #20]
 8001944:	f7ff ff8e 	bl	8001864 <NVIC_EncodePriority>
 8001948:	4602      	mov	r2, r0
 800194a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff5d 	bl	8001810 <__NVIC_SetPriority>
}
 8001956:	bf00      	nop
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff31 	bl	80017d4 <__NVIC_EnableIRQ>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7ff ffa2 	bl	80018cc <SysTick_Config>
 8001988:	4603      	mov	r3, r0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff fab6 	bl	8000f10 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e099      	b.n	8001ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2202      	movs	r2, #2
 80019bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f022 0201 	bic.w	r2, r2, #1
 80019ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d0:	e00f      	b.n	80019f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d2:	f7ff fa9d 	bl	8000f10 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	2b05      	cmp	r3, #5
 80019de:	d908      	bls.n	80019f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2220      	movs	r2, #32
 80019e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e078      	b.n	8001ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1e8      	bne.n	80019d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	4b38      	ldr	r3, [pc, #224]	; (8001aec <HAL_DMA_Init+0x158>)
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	691b      	ldr	r3, [r3, #16]
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	699b      	ldr	r3, [r3, #24]
 8001a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3e:	697a      	ldr	r2, [r7, #20]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d107      	bne.n	8001a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	4313      	orrs	r3, r2
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	697a      	ldr	r2, [r7, #20]
 8001a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	f023 0307 	bic.w	r3, r3, #7
 8001a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	697a      	ldr	r2, [r7, #20]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d117      	bne.n	8001ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00e      	beq.n	8001ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fa77 	bl	8001f8c <DMA_CheckFifoParam>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d008      	beq.n	8001ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2240      	movs	r2, #64	; 0x40
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e016      	b.n	8001ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa2e 	bl	8001f20 <DMA_CalcBaseAndBitshift>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001acc:	223f      	movs	r2, #63	; 0x3f
 8001ace:	409a      	lsls	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2201      	movs	r2, #1
 8001ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	e010803f 	.word	0xe010803f

08001af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	60f8      	str	r0, [r7, #12]
 8001af8:	60b9      	str	r1, [r7, #8]
 8001afa:	607a      	str	r2, [r7, #4]
 8001afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_DMA_Start_IT+0x26>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e048      	b.n	8001ba8 <HAL_DMA_Start_IT+0xb8>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d137      	bne.n	8001b9a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2202      	movs	r2, #2
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2200      	movs	r2, #0
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	68b9      	ldr	r1, [r7, #8]
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f9c0 	bl	8001ec4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b48:	223f      	movs	r2, #63	; 0x3f
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f042 0216 	orr.w	r2, r2, #22
 8001b5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	695a      	ldr	r2, [r3, #20]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b6e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d007      	beq.n	8001b88 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0208 	orr.w	r2, r2, #8
 8001b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0201 	orr.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e005      	b.n	8001ba6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001bbc:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_DMA_IRQHandler+0x258>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a92      	ldr	r2, [pc, #584]	; (8001e0c <HAL_DMA_IRQHandler+0x25c>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a9b      	lsrs	r3, r3, #10
 8001bc8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bda:	2208      	movs	r2, #8
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d01a      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d013      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0204 	bic.w	r2, r2, #4
 8001c02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c08:	2208      	movs	r2, #8
 8001c0a:	409a      	lsls	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c14:	f043 0201 	orr.w	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c20:	2201      	movs	r2, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d012      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	695b      	ldr	r3, [r3, #20]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00b      	beq.n	8001c52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	2201      	movs	r2, #1
 8001c40:	409a      	lsls	r2, r3
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4a:	f043 0202 	orr.w	r2, r3, #2
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2204      	movs	r2, #4
 8001c58:	409a      	lsls	r2, r3
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d012      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00b      	beq.n	8001c88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	2204      	movs	r2, #4
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f043 0204 	orr.w	r2, r3, #4
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d043      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d03c      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001caa:	2210      	movs	r2, #16
 8001cac:	409a      	lsls	r2, r3
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d018      	beq.n	8001cf2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d108      	bne.n	8001ce0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d024      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
 8001cde:	e01f      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d01b      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	4798      	blx	r3
 8001cf0:	e016      	b.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d107      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 0208 	bic.w	r2, r2, #8
 8001d0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d24:	2220      	movs	r2, #32
 8001d26:	409a      	lsls	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 808e 	beq.w	8001e4e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8086 	beq.w	8001e4e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d46:	2220      	movs	r2, #32
 8001d48:	409a      	lsls	r2, r3
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d136      	bne.n	8001dc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_IRQHandler+0x1da>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	223f      	movs	r2, #63	; 0x3f
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d07d      	beq.n	8001eba <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	4798      	blx	r3
        }
        return;
 8001dc6:	e078      	b.n	8001eba <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d01c      	beq.n	8001e10 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d030      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	4798      	blx	r3
 8001df4:	e02b      	b.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d027      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	4798      	blx	r3
 8001e06:	e022      	b.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
 8001e08:	20000000 	.word	0x20000000
 8001e0c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d10f      	bne.n	8001e3e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0210 	bic.w	r2, r2, #16
 8001e2c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d032      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d022      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2205      	movs	r2, #5
 8001e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f022 0201 	bic.w	r2, r2, #1
 8001e78:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	60bb      	str	r3, [r7, #8]
 8001e80:	697a      	ldr	r2, [r7, #20]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d307      	bcc.n	8001e96 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0301 	and.w	r3, r3, #1
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d1f2      	bne.n	8001e7a <HAL_DMA_IRQHandler+0x2ca>
 8001e94:	e000      	b.n	8001e98 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001e96:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e000      	b.n	8001ebc <HAL_DMA_IRQHandler+0x30c>
        return;
 8001eba:	bf00      	nop
    }
  }
}
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop

08001ec4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ee0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	2b40      	cmp	r3, #64	; 0x40
 8001ef0:	d108      	bne.n	8001f04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001f02:	e007      	b.n	8001f14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68ba      	ldr	r2, [r7, #8]
 8001f0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	60da      	str	r2, [r3, #12]
}
 8001f14:	bf00      	nop
 8001f16:	3714      	adds	r7, #20
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	3b10      	subs	r3, #16
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <DMA_CalcBaseAndBitshift+0x60>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	091b      	lsrs	r3, r3, #4
 8001f38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001f3a:	4a12      	ldr	r2, [pc, #72]	; (8001f84 <DMA_CalcBaseAndBitshift+0x64>)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d908      	bls.n	8001f60 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	461a      	mov	r2, r3
 8001f54:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <DMA_CalcBaseAndBitshift+0x68>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	1d1a      	adds	r2, r3, #4
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	659a      	str	r2, [r3, #88]	; 0x58
 8001f5e:	e006      	b.n	8001f6e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <DMA_CalcBaseAndBitshift+0x68>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3714      	adds	r7, #20
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	aaaaaaab 	.word	0xaaaaaaab
 8001f84:	08005fd4 	.word	0x08005fd4
 8001f88:	fffffc00 	.word	0xfffffc00

08001f8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d11f      	bne.n	8001fe6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d855      	bhi.n	8002058 <DMA_CheckFifoParam+0xcc>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <DMA_CheckFifoParam+0x28>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	08001fc5 	.word	0x08001fc5
 8001fb8:	08001fd7 	.word	0x08001fd7
 8001fbc:	08001fc5 	.word	0x08001fc5
 8001fc0:	08002059 	.word	0x08002059
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d045      	beq.n	800205c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fd4:	e042      	b.n	800205c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fda:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001fde:	d13f      	bne.n	8002060 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fe4:	e03c      	b.n	8002060 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	699b      	ldr	r3, [r3, #24]
 8001fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fee:	d121      	bne.n	8002034 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d836      	bhi.n	8002064 <DMA_CheckFifoParam+0xd8>
 8001ff6:	a201      	add	r2, pc, #4	; (adr r2, 8001ffc <DMA_CheckFifoParam+0x70>)
 8001ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ffc:	0800200d 	.word	0x0800200d
 8002000:	08002013 	.word	0x08002013
 8002004:	0800200d 	.word	0x0800200d
 8002008:	08002025 	.word	0x08002025
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
      break;
 8002010:	e02f      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002016:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d024      	beq.n	8002068 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002022:	e021      	b.n	8002068 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800202c:	d11e      	bne.n	800206c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002032:	e01b      	b.n	800206c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d902      	bls.n	8002040 <DMA_CheckFifoParam+0xb4>
 800203a:	2b03      	cmp	r3, #3
 800203c:	d003      	beq.n	8002046 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800203e:	e018      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	73fb      	strb	r3, [r7, #15]
      break;
 8002044:	e015      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00e      	beq.n	8002070 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	73fb      	strb	r3, [r7, #15]
      break;
 8002056:	e00b      	b.n	8002070 <DMA_CheckFifoParam+0xe4>
      break;
 8002058:	bf00      	nop
 800205a:	e00a      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;
 800205c:	bf00      	nop
 800205e:	e008      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;
 8002060:	bf00      	nop
 8002062:	e006      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;
 8002064:	bf00      	nop
 8002066:	e004      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;
 8002068:	bf00      	nop
 800206a:	e002      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;   
 800206c:	bf00      	nop
 800206e:	e000      	b.n	8002072 <DMA_CheckFifoParam+0xe6>
      break;
 8002070:	bf00      	nop
    }
  } 
  
  return status; 
 8002072:	7bfb      	ldrb	r3, [r7, #15]
}
 8002074:	4618      	mov	r0, r3
 8002076:	3714      	adds	r7, #20
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	; 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e175      	b.n	800238c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8164 	bne.w	8002386 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d00b      	beq.n	80020de <HAL_GPIO_Init+0x5e>
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d007      	beq.n	80020de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020d2:	2b11      	cmp	r3, #17
 80020d4:	d003      	beq.n	80020de <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b12      	cmp	r3, #18
 80020dc:	d130      	bne.n	8002140 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	2203      	movs	r2, #3
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68da      	ldr	r2, [r3, #12]
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4313      	orrs	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002114:	2201      	movs	r2, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43db      	mvns	r3, r3
 800211e:	69ba      	ldr	r2, [r7, #24]
 8002120:	4013      	ands	r3, r2
 8002122:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0201 	and.w	r2, r3, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d003      	beq.n	8002180 <HAL_GPIO_Init+0x100>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	2b12      	cmp	r3, #18
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80be 	beq.w	8002386 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_GPIO_Init+0x320>)
 800220c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220e:	4a64      	ldr	r2, [pc, #400]	; (80023a0 <HAL_GPIO_Init+0x320>)
 8002210:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002214:	6453      	str	r3, [r2, #68]	; 0x44
 8002216:	4b62      	ldr	r3, [pc, #392]	; (80023a0 <HAL_GPIO_Init+0x320>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002222:	4a60      	ldr	r2, [pc, #384]	; (80023a4 <HAL_GPIO_Init+0x324>)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	089b      	lsrs	r3, r3, #2
 8002228:	3302      	adds	r3, #2
 800222a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	220f      	movs	r2, #15
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_GPIO_Init+0x328>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d037      	beq.n	80022be <HAL_GPIO_Init+0x23e>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a56      	ldr	r2, [pc, #344]	; (80023ac <HAL_GPIO_Init+0x32c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d031      	beq.n	80022ba <HAL_GPIO_Init+0x23a>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_GPIO_Init+0x330>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <HAL_GPIO_Init+0x236>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a54      	ldr	r2, [pc, #336]	; (80023b4 <HAL_GPIO_Init+0x334>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d025      	beq.n	80022b2 <HAL_GPIO_Init+0x232>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a53      	ldr	r2, [pc, #332]	; (80023b8 <HAL_GPIO_Init+0x338>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d01f      	beq.n	80022ae <HAL_GPIO_Init+0x22e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_GPIO_Init+0x33c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d019      	beq.n	80022aa <HAL_GPIO_Init+0x22a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a51      	ldr	r2, [pc, #324]	; (80023c0 <HAL_GPIO_Init+0x340>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0x226>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a50      	ldr	r2, [pc, #320]	; (80023c4 <HAL_GPIO_Init+0x344>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00d      	beq.n	80022a2 <HAL_GPIO_Init+0x222>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4f      	ldr	r2, [pc, #316]	; (80023c8 <HAL_GPIO_Init+0x348>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <HAL_GPIO_Init+0x21e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4e      	ldr	r2, [pc, #312]	; (80023cc <HAL_GPIO_Init+0x34c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_GPIO_Init+0x21a>
 8002296:	2309      	movs	r3, #9
 8002298:	e012      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 800229a:	230a      	movs	r3, #10
 800229c:	e010      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 800229e:	2308      	movs	r3, #8
 80022a0:	e00e      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022a2:	2307      	movs	r3, #7
 80022a4:	e00c      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022a6:	2306      	movs	r3, #6
 80022a8:	e00a      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022aa:	2305      	movs	r3, #5
 80022ac:	e008      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022ae:	2304      	movs	r3, #4
 80022b0:	e006      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022b2:	2303      	movs	r3, #3
 80022b4:	e004      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022b6:	2302      	movs	r3, #2
 80022b8:	e002      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022ba:	2301      	movs	r3, #1
 80022bc:	e000      	b.n	80022c0 <HAL_GPIO_Init+0x240>
 80022be:	2300      	movs	r3, #0
 80022c0:	69fa      	ldr	r2, [r7, #28]
 80022c2:	f002 0203 	and.w	r2, r2, #3
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	4093      	lsls	r3, r2
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4313      	orrs	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80022d0:	4934      	ldr	r1, [pc, #208]	; (80023a4 <HAL_GPIO_Init+0x324>)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	3302      	adds	r3, #2
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022de:	4b3c      	ldr	r3, [pc, #240]	; (80023d0 <HAL_GPIO_Init+0x350>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002302:	4a33      	ldr	r2, [pc, #204]	; (80023d0 <HAL_GPIO_Init+0x350>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002308:	4b31      	ldr	r3, [pc, #196]	; (80023d0 <HAL_GPIO_Init+0x350>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800232c:	4a28      	ldr	r2, [pc, #160]	; (80023d0 <HAL_GPIO_Init+0x350>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002332:	4b27      	ldr	r3, [pc, #156]	; (80023d0 <HAL_GPIO_Init+0x350>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	43db      	mvns	r3, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	4313      	orrs	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002356:	4a1e      	ldr	r2, [pc, #120]	; (80023d0 <HAL_GPIO_Init+0x350>)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800235c:	4b1c      	ldr	r3, [pc, #112]	; (80023d0 <HAL_GPIO_Init+0x350>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d003      	beq.n	8002380 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002380:	4a13      	ldr	r2, [pc, #76]	; (80023d0 <HAL_GPIO_Init+0x350>)
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3301      	adds	r3, #1
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b0f      	cmp	r3, #15
 8002390:	f67f ae86 	bls.w	80020a0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002394:	bf00      	nop
 8002396:	3724      	adds	r7, #36	; 0x24
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40013800 	.word	0x40013800
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40021400 	.word	0x40021400
 80023c0:	40021800 	.word	0x40021800
 80023c4:	40021c00 	.word	0x40021c00
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40022400 	.word	0x40022400
 80023d0:	40013c00 	.word	0x40013c00

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80023f0:	e003      	b.n	80023fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80023f2:	887b      	ldrh	r3, [r7, #2]
 80023f4:	041a      	lsls	r2, r3, #16
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	619a      	str	r2, [r3, #24]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800240e:	2300      	movs	r3, #0
 8002410:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b23      	ldr	r3, [pc, #140]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b20      	ldr	r3, [pc, #128]	; (80024a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002426:	603b      	str	r3, [r7, #0]
 8002428:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800242a:	4b1e      	ldr	r3, [pc, #120]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a1d      	ldr	r2, [pc, #116]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002436:	f7fe fd6b 	bl	8000f10 <HAL_GetTick>
 800243a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800243c:	e009      	b.n	8002452 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800243e:	f7fe fd67 	bl	8000f10 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800244c:	d901      	bls.n	8002452 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e022      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002452:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800245a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800245e:	d1ee      	bne.n	800243e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002460:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a0f      	ldr	r2, [pc, #60]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002466:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800246a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800246c:	f7fe fd50 	bl	8000f10 <HAL_GetTick>
 8002470:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002472:	e009      	b.n	8002488 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002474:	f7fe fd4c 	bl	8000f10 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002482:	d901      	bls.n	8002488 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e007      	b.n	8002498 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002494:	d1ee      	bne.n	8002474 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40007000 	.word	0x40007000

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e29b      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024cc:	4b96      	ldr	r3, [pc, #600]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d8:	4b93      	ldr	r3, [pc, #588]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 030c 	and.w	r3, r3, #12
 80024e0:	2b08      	cmp	r3, #8
 80024e2:	d112      	bne.n	800250a <HAL_RCC_OscConfig+0x62>
 80024e4:	4b90      	ldr	r3, [pc, #576]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024f0:	d10b      	bne.n	800250a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f2:	4b8d      	ldr	r3, [pc, #564]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d06c      	beq.n	80025d8 <HAL_RCC_OscConfig+0x130>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d168      	bne.n	80025d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e275      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x7a>
 8002514:	4b84      	ldr	r3, [pc, #528]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a83      	ldr	r2, [pc, #524]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e02e      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x9c>
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7e      	ldr	r2, [pc, #504]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7b      	ldr	r2, [pc, #492]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xc0>
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a75      	ldr	r2, [pc, #468]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a72      	ldr	r2, [pc, #456]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002568:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a6e      	ldr	r2, [pc, #440]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b6c      	ldr	r3, [pc, #432]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6b      	ldr	r2, [pc, #428]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fcc2 	bl	8000f10 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fcbe 	bl	8000f10 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e229      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fcae 	bl	8000f10 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fcaa 	bl	8000f10 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	; 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e215      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	4b57      	ldr	r3, [pc, #348]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x110>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d069      	beq.n	80026ba <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025e6:	4b50      	ldr	r3, [pc, #320]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d00b      	beq.n	800260a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b4d      	ldr	r3, [pc, #308]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d11c      	bne.n	8002638 <HAL_RCC_OscConfig+0x190>
 80025fe:	4b4a      	ldr	r3, [pc, #296]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d116      	bne.n	8002638 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800260a:	4b47      	ldr	r3, [pc, #284]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_RCC_OscConfig+0x17a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	2b01      	cmp	r3, #1
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e1e9      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002622:	4b41      	ldr	r3, [pc, #260]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	00db      	lsls	r3, r3, #3
 8002630:	493d      	ldr	r1, [pc, #244]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002636:	e040      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d023      	beq.n	8002688 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002646:	f043 0301 	orr.w	r3, r3, #1
 800264a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264c:	f7fe fc60 	bl	8000f10 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002654:	f7fe fc5c 	bl	8000f10 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1c7      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b30      	ldr	r3, [pc, #192]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0f0      	beq.n	8002654 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002672:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	00db      	lsls	r3, r3, #3
 8002680:	4929      	ldr	r1, [pc, #164]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]
 8002686:	e018      	b.n	80026ba <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a26      	ldr	r2, [pc, #152]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 800268e:	f023 0301 	bic.w	r3, r3, #1
 8002692:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fc3c 	bl	8000f10 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7fe fc38 	bl	8000f10 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e1a3      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d038      	beq.n	8002738 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d019      	beq.n	8002702 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80026d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026da:	f7fe fc19 	bl	8000f10 <HAL_GetTick>
 80026de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e0:	e008      	b.n	80026f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e2:	f7fe fc15 	bl	8000f10 <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e180      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 80026f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d0f0      	beq.n	80026e2 <HAL_RCC_OscConfig+0x23a>
 8002700:	e01a      	b.n	8002738 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002706:	4a08      	ldr	r2, [pc, #32]	; (8002728 <HAL_RCC_OscConfig+0x280>)
 8002708:	f023 0301 	bic.w	r3, r3, #1
 800270c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270e:	f7fe fbff 	bl	8000f10 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002714:	e00a      	b.n	800272c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002716:	f7fe fbfb 	bl	8000f10 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d903      	bls.n	800272c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e166      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
 8002728:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4b92      	ldr	r3, [pc, #584]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 800272e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1ee      	bne.n	8002716 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	f000 80a4 	beq.w	800288e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002746:	4b8c      	ldr	r3, [pc, #560]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10d      	bne.n	800276e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	4b89      	ldr	r3, [pc, #548]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a88      	ldr	r2, [pc, #544]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b86      	ldr	r3, [pc, #536]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	60bb      	str	r3, [r7, #8]
 8002768:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276e:	4b83      	ldr	r3, [pc, #524]	; (800297c <HAL_RCC_OscConfig+0x4d4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d118      	bne.n	80027ac <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800277a:	4b80      	ldr	r3, [pc, #512]	; (800297c <HAL_RCC_OscConfig+0x4d4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7f      	ldr	r2, [pc, #508]	; (800297c <HAL_RCC_OscConfig+0x4d4>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe fbc3 	bl	8000f10 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800278e:	f7fe fbbf 	bl	8000f10 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b64      	cmp	r3, #100	; 0x64
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e12a      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a0:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCC_OscConfig+0x4d4>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d0f0      	beq.n	800278e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x31a>
 80027b4:	4b70      	ldr	r3, [pc, #448]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a6f      	ldr	r2, [pc, #444]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	e02d      	b.n	800281e <HAL_RCC_OscConfig+0x376>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x33c>
 80027ca:	4b6b      	ldr	r3, [pc, #428]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a6a      	ldr	r2, [pc, #424]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027d0:	f023 0301 	bic.w	r3, r3, #1
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	4b68      	ldr	r3, [pc, #416]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a67      	ldr	r2, [pc, #412]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	f023 0304 	bic.w	r3, r3, #4
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	e01c      	b.n	800281e <HAL_RCC_OscConfig+0x376>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b05      	cmp	r3, #5
 80027ea:	d10c      	bne.n	8002806 <HAL_RCC_OscConfig+0x35e>
 80027ec:	4b62      	ldr	r3, [pc, #392]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f0:	4a61      	ldr	r2, [pc, #388]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	6713      	str	r3, [r2, #112]	; 0x70
 80027f8:	4b5f      	ldr	r3, [pc, #380]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a5e      	ldr	r2, [pc, #376]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	e00b      	b.n	800281e <HAL_RCC_OscConfig+0x376>
 8002806:	4b5c      	ldr	r3, [pc, #368]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280a:	4a5b      	ldr	r2, [pc, #364]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	6713      	str	r3, [r2, #112]	; 0x70
 8002812:	4b59      	ldr	r3, [pc, #356]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a58      	ldr	r2, [pc, #352]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	f023 0304 	bic.w	r3, r3, #4
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d015      	beq.n	8002852 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe fb73 	bl	8000f10 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe fb6f 	bl	8000f10 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e0d8      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002844:	4b4c      	ldr	r3, [pc, #304]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ee      	beq.n	800282e <HAL_RCC_OscConfig+0x386>
 8002850:	e014      	b.n	800287c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fb5d 	bl	8000f10 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fb59 	bl	8000f10 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	; 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0c2      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	4b41      	ldr	r3, [pc, #260]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1ee      	bne.n	800285a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800287c:	7dfb      	ldrb	r3, [r7, #23]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d105      	bne.n	800288e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002882:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	4a3c      	ldr	r2, [pc, #240]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800288c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	699b      	ldr	r3, [r3, #24]
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80ae 	beq.w	80029f4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002898:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 030c 	and.w	r3, r3, #12
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d06d      	beq.n	8002980 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d14b      	bne.n	8002944 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ac:	4b32      	ldr	r3, [pc, #200]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a31      	ldr	r2, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7fe fb2a 	bl	8000f10 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe fb26 	bl	8000f10 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e091      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	431a      	orrs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	071b      	lsls	r3, r3, #28
 800290a:	491b      	ldr	r1, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 800290c:	4313      	orrs	r3, r2
 800290e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002910:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a18      	ldr	r2, [pc, #96]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002916:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe faf8 	bl	8000f10 <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002924:	f7fe faf4 	bl	8000f10 <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e05f      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d0f0      	beq.n	8002924 <HAL_RCC_OscConfig+0x47c>
 8002942:	e057      	b.n	80029f4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 800294a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002950:	f7fe fade 	bl	8000f10 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe fada 	bl	8000f10 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e045      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_OscConfig+0x4d0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x4b0>
 8002976:	e03d      	b.n	80029f4 <HAL_RCC_OscConfig+0x54c>
 8002978:	40023800 	.word	0x40023800
 800297c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_OscConfig+0x558>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d030      	beq.n	80029f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002998:	429a      	cmp	r2, r3
 800299a:	d129      	bne.n	80029f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d122      	bne.n	80029f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029b0:	4013      	ands	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d119      	bne.n	80029f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d10f      	bne.n	80029f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d107      	bne.n	80029f0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d001      	beq.n	80029f4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e000      	b.n	80029f6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800

08002a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0d0      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d910      	bls.n	8002a4c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b67      	ldr	r3, [pc, #412]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f023 020f 	bic.w	r2, r3, #15
 8002a32:	4965      	ldr	r1, [pc, #404]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0b8      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d020      	beq.n	8002a9a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a64:	4b59      	ldr	r3, [pc, #356]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4a58      	ldr	r2, [pc, #352]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d005      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a7c:	4b53      	ldr	r3, [pc, #332]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	4a52      	ldr	r2, [pc, #328]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a88:	4b50      	ldr	r3, [pc, #320]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	494d      	ldr	r1, [pc, #308]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d040      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aae:	4b47      	ldr	r3, [pc, #284]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d115      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e07f      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	4b41      	ldr	r3, [pc, #260]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e073      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b3d      	ldr	r3, [pc, #244]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	4b39      	ldr	r3, [pc, #228]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 0203 	bic.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4936      	ldr	r1, [pc, #216]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af8:	f7fe fa0a 	bl	8000f10 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7fe fa06 	bl	8000f10 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e053      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2d      	ldr	r3, [pc, #180]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 020c 	and.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1eb      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d210      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b24      	ldr	r3, [pc, #144]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f023 020f 	bic.w	r2, r3, #15
 8002b3e:	4922      	ldr	r1, [pc, #136]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e032      	b.n	8002bbe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4916      	ldr	r1, [pc, #88]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490e      	ldr	r1, [pc, #56]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b96:	f000 f821 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_ClockConfig+0x1c8>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_RCC_ClockConfig+0x1cc>)
 8002ba8:	5cd3      	ldrb	r3, [r2, r3]
 8002baa:	fa21 f303 	lsr.w	r3, r1, r3
 8002bae:	4a09      	ldr	r2, [pc, #36]	; (8002bd4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bb2:	4b09      	ldr	r3, [pc, #36]	; (8002bd8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7fe f966 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	40023c00 	.word	0x40023c00
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	08005fbc 	.word	0x08005fbc
 8002bd4:	20000000 	.word	0x20000000
 8002bd8:	20000004 	.word	0x20000004

08002bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bde:	b085      	sub	sp, #20
 8002be0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002be2:	2300      	movs	r3, #0
 8002be4:	607b      	str	r3, [r7, #4]
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bf2:	4b50      	ldr	r3, [pc, #320]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x158>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d007      	beq.n	8002c0e <HAL_RCC_GetSysClockFreq+0x32>
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d008      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x38>
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 808d 	bne.w	8002d22 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c08:	4b4b      	ldr	r3, [pc, #300]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002c0a:	60bb      	str	r3, [r7, #8]
      break;
 8002c0c:	e08c      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c10:	60bb      	str	r3, [r7, #8]
      break;
 8002c12:	e089      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c14:	4b47      	ldr	r3, [pc, #284]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c1c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c1e:	4b45      	ldr	r3, [pc, #276]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d023      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c2a:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	099b      	lsrs	r3, r3, #6
 8002c30:	f04f 0400 	mov.w	r4, #0
 8002c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c38:	f04f 0200 	mov.w	r2, #0
 8002c3c:	ea03 0501 	and.w	r5, r3, r1
 8002c40:	ea04 0602 	and.w	r6, r4, r2
 8002c44:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c46:	fb02 f106 	mul.w	r1, r2, r6
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	fb02 f205 	mul.w	r2, r2, r5
 8002c50:	440a      	add	r2, r1
 8002c52:	493a      	ldr	r1, [pc, #232]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x160>)
 8002c54:	fba5 0101 	umull	r0, r1, r5, r1
 8002c58:	1853      	adds	r3, r2, r1
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f04f 0400 	mov.w	r4, #0
 8002c62:	461a      	mov	r2, r3
 8002c64:	4623      	mov	r3, r4
 8002c66:	f7fd fb43 	bl	80002f0 <__aeabi_uldivmod>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	460c      	mov	r4, r1
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e049      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b30      	ldr	r3, [pc, #192]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x158>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	f04f 0400 	mov.w	r4, #0
 8002c7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c80:	f04f 0200 	mov.w	r2, #0
 8002c84:	ea03 0501 	and.w	r5, r3, r1
 8002c88:	ea04 0602 	and.w	r6, r4, r2
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	4632      	mov	r2, r6
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	f04f 0400 	mov.w	r4, #0
 8002c98:	0154      	lsls	r4, r2, #5
 8002c9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c9e:	014b      	lsls	r3, r1, #5
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4622      	mov	r2, r4
 8002ca4:	1b49      	subs	r1, r1, r5
 8002ca6:	eb62 0206 	sbc.w	r2, r2, r6
 8002caa:	f04f 0300 	mov.w	r3, #0
 8002cae:	f04f 0400 	mov.w	r4, #0
 8002cb2:	0194      	lsls	r4, r2, #6
 8002cb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002cb8:	018b      	lsls	r3, r1, #6
 8002cba:	1a5b      	subs	r3, r3, r1
 8002cbc:	eb64 0402 	sbc.w	r4, r4, r2
 8002cc0:	f04f 0100 	mov.w	r1, #0
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	00e2      	lsls	r2, r4, #3
 8002cca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cce:	00d9      	lsls	r1, r3, #3
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4614      	mov	r4, r2
 8002cd4:	195b      	adds	r3, r3, r5
 8002cd6:	eb44 0406 	adc.w	r4, r4, r6
 8002cda:	f04f 0100 	mov.w	r1, #0
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	02a2      	lsls	r2, r4, #10
 8002ce4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ce8:	0299      	lsls	r1, r3, #10
 8002cea:	460b      	mov	r3, r1
 8002cec:	4614      	mov	r4, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f04f 0400 	mov.w	r4, #0
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	f7fd faf8 	bl	80002f0 <__aeabi_uldivmod>
 8002d00:	4603      	mov	r3, r0
 8002d02:	460c      	mov	r4, r1
 8002d04:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d06:	4b0b      	ldr	r3, [pc, #44]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x158>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	f003 0303 	and.w	r3, r3, #3
 8002d10:	3301      	adds	r3, #1
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1e:	60bb      	str	r3, [r7, #8]
      break;
 8002d20:	e002      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002d24:	60bb      	str	r3, [r7, #8]
      break;
 8002d26:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d28:	68bb      	ldr	r3, [r7, #8]
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023800 	.word	0x40023800
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	017d7840 	.word	0x017d7840

08002d40 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d44:	4b03      	ldr	r3, [pc, #12]	; (8002d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d46:	681b      	ldr	r3, [r3, #0]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	20000000 	.word	0x20000000

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d5c:	f7ff fff0 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	0a9b      	lsrs	r3, r3, #10
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4a03      	ldr	r2, [pc, #12]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6e:	5cd3      	ldrb	r3, [r2, r3]
 8002d70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	08005fcc 	.word	0x08005fcc

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d84:	f7ff ffdc 	bl	8002d40 <HAL_RCC_GetHCLKFreq>
 8002d88:	4601      	mov	r1, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0b5b      	lsrs	r3, r3, #13
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4a03      	ldr	r2, [pc, #12]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d96:	5cd3      	ldrb	r3, [r2, r3]
 8002d98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	08005fcc 	.word	0x08005fcc

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002dd0:	4b69      	ldr	r3, [pc, #420]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dda:	6093      	str	r3, [r2, #8]
 8002ddc:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de4:	4964      	ldr	r1, [pc, #400]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002df2:	2301      	movs	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d017      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e02:	4b5d      	ldr	r3, [pc, #372]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e10:	4959      	ldr	r1, [pc, #356]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e20:	d101      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e22:	2301      	movs	r3, #1
 8002e24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d017      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e3e:	4b4e      	ldr	r3, [pc, #312]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4c:	494a      	ldr	r1, [pc, #296]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d101      	bne.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 808b 	beq.w	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b3a      	ldr	r3, [pc, #232]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	4a39      	ldr	r2, [pc, #228]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6413      	str	r3, [r2, #64]	; 0x40
 8002e98:	4b37      	ldr	r3, [pc, #220]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ea4:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a34      	ldr	r2, [pc, #208]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eb0:	f7fe f82e 	bl	8000f10 <HAL_GetTick>
 8002eb4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb8:	f7fe f82a 	bl	8000f10 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	; 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e38d      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eca:	4b2c      	ldr	r3, [pc, #176]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ede:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d035      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d02e      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002efc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f0a:	4b1b      	ldr	r3, [pc, #108]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a1a      	ldr	r2, [pc, #104]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f16:	4a18      	ldr	r2, [pc, #96]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f1c:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d114      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f28:	f7fd fff2 	bl	8000f10 <HAL_GetTick>
 8002f2c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7fd ffee 	bl	8000f10 <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e34f      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0ee      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f5e:	d111      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f6c:	4b04      	ldr	r3, [pc, #16]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	4901      	ldr	r1, [pc, #4]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	608b      	str	r3, [r1, #8]
 8002f76:	e00b      	b.n	8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	0ffffcff 	.word	0x0ffffcff
 8002f84:	4bb3      	ldr	r3, [pc, #716]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4ab2      	ldr	r2, [pc, #712]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f8a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f8e:	6093      	str	r3, [r2, #8]
 8002f90:	4bb0      	ldr	r3, [pc, #704]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f92:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	49ad      	ldr	r1, [pc, #692]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0310 	and.w	r3, r3, #16
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d010      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fae:	4ba9      	ldr	r3, [pc, #676]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fb4:	4aa7      	ldr	r2, [pc, #668]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002fbe:	4ba5      	ldr	r3, [pc, #660]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc8:	49a2      	ldr	r1, [pc, #648]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fdc:	4b9d      	ldr	r3, [pc, #628]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fea:	499a      	ldr	r1, [pc, #616]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ffe:	4b95      	ldr	r3, [pc, #596]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003004:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300c:	4991      	ldr	r1, [pc, #580]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003020:	4b8c      	ldr	r3, [pc, #560]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003026:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800302e:	4989      	ldr	r1, [pc, #548]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003042:	4b84      	ldr	r3, [pc, #528]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003048:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003050:	4980      	ldr	r1, [pc, #512]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003064:	4b7b      	ldr	r3, [pc, #492]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003072:	4978      	ldr	r1, [pc, #480]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003086:	4b73      	ldr	r3, [pc, #460]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308c:	f023 020c 	bic.w	r2, r3, #12
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003094:	496f      	ldr	r1, [pc, #444]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a8:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	4967      	ldr	r1, [pc, #412]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030ca:	4b62      	ldr	r3, [pc, #392]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030d8:	495e      	ldr	r1, [pc, #376]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ec:	4b59      	ldr	r3, [pc, #356]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	4956      	ldr	r1, [pc, #344]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800310e:	4b51      	ldr	r3, [pc, #324]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003110:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003114:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800311c:	494d      	ldr	r1, [pc, #308]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003130:	4b48      	ldr	r3, [pc, #288]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003136:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313e:	4945      	ldr	r1, [pc, #276]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003140:	4313      	orrs	r3, r2
 8003142:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003152:	4b40      	ldr	r3, [pc, #256]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003158:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	493c      	ldr	r1, [pc, #240]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003174:	4b37      	ldr	r3, [pc, #220]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003182:	4934      	ldr	r1, [pc, #208]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d011      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031a4:	492b      	ldr	r1, [pc, #172]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b4:	d101      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031b6:	2301      	movs	r3, #1
 80031b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d001      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031c6:	2301      	movs	r3, #1
 80031c8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031d6:	4b1f      	ldr	r3, [pc, #124]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e4:	491b      	ldr	r1, [pc, #108]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80031f8:	4b16      	ldr	r3, [pc, #88]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003208:	4912      	ldr	r1, [pc, #72]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800320a:	4313      	orrs	r3, r2
 800320c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800321c:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800322c:	4909      	ldr	r1, [pc, #36]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00f      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003240:	4b04      	ldr	r3, [pc, #16]	; (8003254 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003246:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	e002      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003252:	bf00      	nop
 8003254:	40023800 	.word	0x40023800
 8003258:	4985      	ldr	r1, [pc, #532]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00b      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800326c:	4b80      	ldr	r3, [pc, #512]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800326e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003272:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800327c:	497c      	ldr	r1, [pc, #496]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800327e:	4313      	orrs	r3, r2
 8003280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	2b01      	cmp	r3, #1
 8003288:	d005      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003292:	f040 80d6 	bne.w	8003442 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003296:	4b76      	ldr	r3, [pc, #472]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a75      	ldr	r2, [pc, #468]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800329c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a2:	f7fd fe35 	bl	8000f10 <HAL_GetTick>
 80032a6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032aa:	f7fd fe31 	bl	8000f10 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e194      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032bc:	4b6c      	ldr	r3, [pc, #432]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f0      	bne.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d021      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d11d      	bne.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80032dc:	4b64      	ldr	r3, [pc, #400]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032e2:	0c1b      	lsrs	r3, r3, #16
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032ea:	4b61      	ldr	r3, [pc, #388]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	0e1b      	lsrs	r3, r3, #24
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	019a      	lsls	r2, r3, #6
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	4957      	ldr	r1, [pc, #348]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d004      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003342:	d129      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003344:	4b4a      	ldr	r3, [pc, #296]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003346:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334a:	0c1b      	lsrs	r3, r3, #16
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003358:	0f1b      	lsrs	r3, r3, #28
 800335a:	f003 0307 	and.w	r3, r3, #7
 800335e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	019a      	lsls	r2, r3, #6
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	041b      	lsls	r3, r3, #16
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	431a      	orrs	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	071b      	lsls	r3, r3, #28
 8003378:	493d      	ldr	r1, [pc, #244]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003380:	4b3b      	ldr	r3, [pc, #236]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003382:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003386:	f023 021f 	bic.w	r2, r3, #31
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	3b01      	subs	r3, #1
 8003390:	4937      	ldr	r1, [pc, #220]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003392:	4313      	orrs	r3, r2
 8003394:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01d      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033a4:	4b32      	ldr	r3, [pc, #200]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033aa:	0e1b      	lsrs	r3, r3, #24
 80033ac:	f003 030f 	and.w	r3, r3, #15
 80033b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033b2:	4b2f      	ldr	r3, [pc, #188]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b8:	0f1b      	lsrs	r3, r3, #28
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	019a      	lsls	r2, r3, #6
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	041b      	lsls	r3, r3, #16
 80033cc:	431a      	orrs	r2, r3
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	061b      	lsls	r3, r3, #24
 80033d2:	431a      	orrs	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	071b      	lsls	r3, r3, #28
 80033d8:	4925      	ldr	r1, [pc, #148]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d011      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	019a      	lsls	r2, r3, #6
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	041b      	lsls	r3, r3, #16
 80033f8:	431a      	orrs	r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	061b      	lsls	r3, r3, #24
 8003400:	431a      	orrs	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	071b      	lsls	r3, r3, #28
 8003408:	4919      	ldr	r1, [pc, #100]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800340a:	4313      	orrs	r3, r2
 800340c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a16      	ldr	r2, [pc, #88]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003416:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800341a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800341c:	f7fd fd78 	bl	8000f10 <HAL_GetTick>
 8003420:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003424:	f7fd fd74 	bl	8000f10 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e0d7      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	f040 80cd 	bne.w	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800344a:	4b09      	ldr	r3, [pc, #36]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a08      	ldr	r2, [pc, #32]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003456:	f7fd fd5b 	bl	8000f10 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800345c:	e00a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800345e:	f7fd fd57 	bl	8000f10 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d903      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0ba      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003470:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003474:	4b5e      	ldr	r3, [pc, #376]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003480:	d0ed      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	d009      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d02e      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d12a      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034aa:	4b51      	ldr	r3, [pc, #324]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	0c1b      	lsrs	r3, r3, #16
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	0f1b      	lsrs	r3, r3, #28
 80034c0:	f003 0307 	and.w	r3, r3, #7
 80034c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	019a      	lsls	r2, r3, #6
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	041b      	lsls	r3, r3, #16
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	061b      	lsls	r3, r3, #24
 80034d8:	431a      	orrs	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	071b      	lsls	r3, r3, #28
 80034de:	4944      	ldr	r1, [pc, #272]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80034e6:	4b42      	ldr	r3, [pc, #264]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f4:	3b01      	subs	r3, #1
 80034f6:	021b      	lsls	r3, r3, #8
 80034f8:	493d      	ldr	r1, [pc, #244]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d022      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003510:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003514:	d11d      	bne.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003516:	4b36      	ldr	r3, [pc, #216]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0e1b      	lsrs	r3, r3, #24
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003524:	4b32      	ldr	r3, [pc, #200]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0f1b      	lsrs	r3, r3, #28
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	041b      	lsls	r3, r3, #16
 800353e:	431a      	orrs	r2, r3
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4929      	ldr	r1, [pc, #164]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d028      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800355e:	4b24      	ldr	r3, [pc, #144]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	0e1b      	lsrs	r3, r3, #24
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800356e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003572:	0c1b      	lsrs	r3, r3, #16
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	019a      	lsls	r2, r3, #6
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	041b      	lsls	r3, r3, #16
 8003584:	431a      	orrs	r2, r3
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	4917      	ldr	r1, [pc, #92]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800359c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0e      	ldr	r2, [pc, #56]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035bc:	f7fd fca8 	bl	8000f10 <HAL_GetTick>
 80035c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035c2:	e008      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035c4:	f7fd fca4 	bl	8000f10 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b64      	cmp	r3, #100	; 0x64
 80035d0:	d901      	bls.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e007      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035d6:	4b06      	ldr	r3, [pc, #24]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035e2:	d1ef      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e040      	b.n	8003688 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360a:	2b00      	cmp	r3, #0
 800360c:	d106      	bne.n	800361c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f7fd fbbc 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0201 	bic.w	r2, r2, #1
 8003630:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f8be 	bl	80037b4 <UART_SetConfig>
 8003638:	4603      	mov	r3, r0
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e022      	b.n	8003688 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fb5c 	bl	8003d08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800365e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800366e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0201 	orr.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 fbe3 	bl	8003e4c <UART_CheckIdleState>
 8003686:	4603      	mov	r3, r0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08a      	sub	sp, #40	; 0x28
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d17f      	bne.n	80037a8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d002      	beq.n	80036b4 <HAL_UART_Transmit+0x24>
 80036ae:	88fb      	ldrh	r3, [r7, #6]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e078      	b.n	80037aa <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_UART_Transmit+0x36>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e071      	b.n	80037aa <HAL_UART_Transmit+0x11a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2221      	movs	r2, #33	; 0x21
 80036d8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80036da:	f7fd fc19 	bl	8000f10 <HAL_GetTick>
 80036de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	88fa      	ldrh	r2, [r7, #6]
 80036e4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d108      	bne.n	800370c <HAL_UART_Transmit+0x7c>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d104      	bne.n	800370c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8003702:	2300      	movs	r3, #0
 8003704:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	61bb      	str	r3, [r7, #24]
 800370a:	e003      	b.n	8003714 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003710:	2300      	movs	r3, #0
 8003712:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800371c:	e02c      	b.n	8003778 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2200      	movs	r2, #0
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fbd4 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e038      	b.n	80037aa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10b      	bne.n	8003756 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	461a      	mov	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800374c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	3302      	adds	r3, #2
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e007      	b.n	8003766 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	781a      	ldrb	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003760:	69fb      	ldr	r3, [r7, #28]
 8003762:	3301      	adds	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800377e:	b29b      	uxth	r3, r3
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1cc      	bne.n	800371e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2200      	movs	r2, #0
 800378c:	2140      	movs	r1, #64	; 0x40
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fba1 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e005      	b.n	80037aa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2220      	movs	r2, #32
 80037a2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80037a4:	2300      	movs	r3, #0
 80037a6:	e000      	b.n	80037aa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 80037a8:	2302      	movs	r3, #2
  }
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3720      	adds	r7, #32
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
	...

080037b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c0:	2300      	movs	r3, #0
 80037c2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4bb1      	ldr	r3, [pc, #708]	; (8003aa8 <UART_SetConfig+0x2f4>)
 80037e4:	4013      	ands	r3, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6812      	ldr	r2, [r2, #0]
 80037ea:	6939      	ldr	r1, [r7, #16]
 80037ec:	430b      	orrs	r3, r1
 80037ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4313      	orrs	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	430a      	orrs	r2, r1
 8003828:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a9f      	ldr	r2, [pc, #636]	; (8003aac <UART_SetConfig+0x2f8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d121      	bne.n	8003878 <UART_SetConfig+0xc4>
 8003834:	4b9e      	ldr	r3, [pc, #632]	; (8003ab0 <UART_SetConfig+0x2fc>)
 8003836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b03      	cmp	r3, #3
 8003840:	d816      	bhi.n	8003870 <UART_SetConfig+0xbc>
 8003842:	a201      	add	r2, pc, #4	; (adr r2, 8003848 <UART_SetConfig+0x94>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	08003859 	.word	0x08003859
 800384c:	08003865 	.word	0x08003865
 8003850:	0800385f 	.word	0x0800385f
 8003854:	0800386b 	.word	0x0800386b
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
 800385c:	e151      	b.n	8003b02 <UART_SetConfig+0x34e>
 800385e:	2302      	movs	r3, #2
 8003860:	77fb      	strb	r3, [r7, #31]
 8003862:	e14e      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003864:	2304      	movs	r3, #4
 8003866:	77fb      	strb	r3, [r7, #31]
 8003868:	e14b      	b.n	8003b02 <UART_SetConfig+0x34e>
 800386a:	2308      	movs	r3, #8
 800386c:	77fb      	strb	r3, [r7, #31]
 800386e:	e148      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003870:	2310      	movs	r3, #16
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	bf00      	nop
 8003876:	e144      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a8d      	ldr	r2, [pc, #564]	; (8003ab4 <UART_SetConfig+0x300>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d134      	bne.n	80038ec <UART_SetConfig+0x138>
 8003882:	4b8b      	ldr	r3, [pc, #556]	; (8003ab0 <UART_SetConfig+0x2fc>)
 8003884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	2b0c      	cmp	r3, #12
 800388e:	d829      	bhi.n	80038e4 <UART_SetConfig+0x130>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <UART_SetConfig+0xe4>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038cd 	.word	0x080038cd
 800389c:	080038e5 	.word	0x080038e5
 80038a0:	080038e5 	.word	0x080038e5
 80038a4:	080038e5 	.word	0x080038e5
 80038a8:	080038d9 	.word	0x080038d9
 80038ac:	080038e5 	.word	0x080038e5
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038e5 	.word	0x080038e5
 80038b8:	080038d3 	.word	0x080038d3
 80038bc:	080038e5 	.word	0x080038e5
 80038c0:	080038e5 	.word	0x080038e5
 80038c4:	080038e5 	.word	0x080038e5
 80038c8:	080038df 	.word	0x080038df
 80038cc:	2300      	movs	r3, #0
 80038ce:	77fb      	strb	r3, [r7, #31]
 80038d0:	e117      	b.n	8003b02 <UART_SetConfig+0x34e>
 80038d2:	2302      	movs	r3, #2
 80038d4:	77fb      	strb	r3, [r7, #31]
 80038d6:	e114      	b.n	8003b02 <UART_SetConfig+0x34e>
 80038d8:	2304      	movs	r3, #4
 80038da:	77fb      	strb	r3, [r7, #31]
 80038dc:	e111      	b.n	8003b02 <UART_SetConfig+0x34e>
 80038de:	2308      	movs	r3, #8
 80038e0:	77fb      	strb	r3, [r7, #31]
 80038e2:	e10e      	b.n	8003b02 <UART_SetConfig+0x34e>
 80038e4:	2310      	movs	r3, #16
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	bf00      	nop
 80038ea:	e10a      	b.n	8003b02 <UART_SetConfig+0x34e>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a71      	ldr	r2, [pc, #452]	; (8003ab8 <UART_SetConfig+0x304>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d120      	bne.n	8003938 <UART_SetConfig+0x184>
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <UART_SetConfig+0x2fc>)
 80038f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003900:	2b10      	cmp	r3, #16
 8003902:	d00f      	beq.n	8003924 <UART_SetConfig+0x170>
 8003904:	2b10      	cmp	r3, #16
 8003906:	d802      	bhi.n	800390e <UART_SetConfig+0x15a>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d005      	beq.n	8003918 <UART_SetConfig+0x164>
 800390c:	e010      	b.n	8003930 <UART_SetConfig+0x17c>
 800390e:	2b20      	cmp	r3, #32
 8003910:	d005      	beq.n	800391e <UART_SetConfig+0x16a>
 8003912:	2b30      	cmp	r3, #48	; 0x30
 8003914:	d009      	beq.n	800392a <UART_SetConfig+0x176>
 8003916:	e00b      	b.n	8003930 <UART_SetConfig+0x17c>
 8003918:	2300      	movs	r3, #0
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e0f1      	b.n	8003b02 <UART_SetConfig+0x34e>
 800391e:	2302      	movs	r3, #2
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e0ee      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003924:	2304      	movs	r3, #4
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e0eb      	b.n	8003b02 <UART_SetConfig+0x34e>
 800392a:	2308      	movs	r3, #8
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e0e8      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003930:	2310      	movs	r3, #16
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	bf00      	nop
 8003936:	e0e4      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a5f      	ldr	r2, [pc, #380]	; (8003abc <UART_SetConfig+0x308>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d120      	bne.n	8003984 <UART_SetConfig+0x1d0>
 8003942:	4b5b      	ldr	r3, [pc, #364]	; (8003ab0 <UART_SetConfig+0x2fc>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d00f      	beq.n	8003970 <UART_SetConfig+0x1bc>
 8003950:	2b40      	cmp	r3, #64	; 0x40
 8003952:	d802      	bhi.n	800395a <UART_SetConfig+0x1a6>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <UART_SetConfig+0x1b0>
 8003958:	e010      	b.n	800397c <UART_SetConfig+0x1c8>
 800395a:	2b80      	cmp	r3, #128	; 0x80
 800395c:	d005      	beq.n	800396a <UART_SetConfig+0x1b6>
 800395e:	2bc0      	cmp	r3, #192	; 0xc0
 8003960:	d009      	beq.n	8003976 <UART_SetConfig+0x1c2>
 8003962:	e00b      	b.n	800397c <UART_SetConfig+0x1c8>
 8003964:	2300      	movs	r3, #0
 8003966:	77fb      	strb	r3, [r7, #31]
 8003968:	e0cb      	b.n	8003b02 <UART_SetConfig+0x34e>
 800396a:	2302      	movs	r3, #2
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e0c8      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003970:	2304      	movs	r3, #4
 8003972:	77fb      	strb	r3, [r7, #31]
 8003974:	e0c5      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003976:	2308      	movs	r3, #8
 8003978:	77fb      	strb	r3, [r7, #31]
 800397a:	e0c2      	b.n	8003b02 <UART_SetConfig+0x34e>
 800397c:	2310      	movs	r3, #16
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	bf00      	nop
 8003982:	e0be      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4d      	ldr	r2, [pc, #308]	; (8003ac0 <UART_SetConfig+0x30c>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d124      	bne.n	80039d8 <UART_SetConfig+0x224>
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <UART_SetConfig+0x2fc>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800399c:	d012      	beq.n	80039c4 <UART_SetConfig+0x210>
 800399e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a2:	d802      	bhi.n	80039aa <UART_SetConfig+0x1f6>
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d007      	beq.n	80039b8 <UART_SetConfig+0x204>
 80039a8:	e012      	b.n	80039d0 <UART_SetConfig+0x21c>
 80039aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039ae:	d006      	beq.n	80039be <UART_SetConfig+0x20a>
 80039b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b4:	d009      	beq.n	80039ca <UART_SetConfig+0x216>
 80039b6:	e00b      	b.n	80039d0 <UART_SetConfig+0x21c>
 80039b8:	2300      	movs	r3, #0
 80039ba:	77fb      	strb	r3, [r7, #31]
 80039bc:	e0a1      	b.n	8003b02 <UART_SetConfig+0x34e>
 80039be:	2302      	movs	r3, #2
 80039c0:	77fb      	strb	r3, [r7, #31]
 80039c2:	e09e      	b.n	8003b02 <UART_SetConfig+0x34e>
 80039c4:	2304      	movs	r3, #4
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e09b      	b.n	8003b02 <UART_SetConfig+0x34e>
 80039ca:	2308      	movs	r3, #8
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e098      	b.n	8003b02 <UART_SetConfig+0x34e>
 80039d0:	2310      	movs	r3, #16
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	bf00      	nop
 80039d6:	e094      	b.n	8003b02 <UART_SetConfig+0x34e>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a39      	ldr	r2, [pc, #228]	; (8003ac4 <UART_SetConfig+0x310>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d124      	bne.n	8003a2c <UART_SetConfig+0x278>
 80039e2:	4b33      	ldr	r3, [pc, #204]	; (8003ab0 <UART_SetConfig+0x2fc>)
 80039e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f0:	d012      	beq.n	8003a18 <UART_SetConfig+0x264>
 80039f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f6:	d802      	bhi.n	80039fe <UART_SetConfig+0x24a>
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <UART_SetConfig+0x258>
 80039fc:	e012      	b.n	8003a24 <UART_SetConfig+0x270>
 80039fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a02:	d006      	beq.n	8003a12 <UART_SetConfig+0x25e>
 8003a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a08:	d009      	beq.n	8003a1e <UART_SetConfig+0x26a>
 8003a0a:	e00b      	b.n	8003a24 <UART_SetConfig+0x270>
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	77fb      	strb	r3, [r7, #31]
 8003a10:	e077      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a12:	2302      	movs	r3, #2
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e074      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	77fb      	strb	r3, [r7, #31]
 8003a1c:	e071      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	77fb      	strb	r3, [r7, #31]
 8003a22:	e06e      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a24:	2310      	movs	r3, #16
 8003a26:	77fb      	strb	r3, [r7, #31]
 8003a28:	bf00      	nop
 8003a2a:	e06a      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a25      	ldr	r2, [pc, #148]	; (8003ac8 <UART_SetConfig+0x314>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d124      	bne.n	8003a80 <UART_SetConfig+0x2cc>
 8003a36:	4b1e      	ldr	r3, [pc, #120]	; (8003ab0 <UART_SetConfig+0x2fc>)
 8003a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d012      	beq.n	8003a6c <UART_SetConfig+0x2b8>
 8003a46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a4a:	d802      	bhi.n	8003a52 <UART_SetConfig+0x29e>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d007      	beq.n	8003a60 <UART_SetConfig+0x2ac>
 8003a50:	e012      	b.n	8003a78 <UART_SetConfig+0x2c4>
 8003a52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a56:	d006      	beq.n	8003a66 <UART_SetConfig+0x2b2>
 8003a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a5c:	d009      	beq.n	8003a72 <UART_SetConfig+0x2be>
 8003a5e:	e00b      	b.n	8003a78 <UART_SetConfig+0x2c4>
 8003a60:	2300      	movs	r3, #0
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e04d      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a66:	2302      	movs	r3, #2
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e04a      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e047      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a72:	2308      	movs	r3, #8
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e044      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a78:	2310      	movs	r3, #16
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	bf00      	nop
 8003a7e:	e040      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a11      	ldr	r2, [pc, #68]	; (8003acc <UART_SetConfig+0x318>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d139      	bne.n	8003afe <UART_SetConfig+0x34a>
 8003a8a:	4b09      	ldr	r3, [pc, #36]	; (8003ab0 <UART_SetConfig+0x2fc>)
 8003a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a98:	d027      	beq.n	8003aea <UART_SetConfig+0x336>
 8003a9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a9e:	d817      	bhi.n	8003ad0 <UART_SetConfig+0x31c>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01c      	beq.n	8003ade <UART_SetConfig+0x32a>
 8003aa4:	e027      	b.n	8003af6 <UART_SetConfig+0x342>
 8003aa6:	bf00      	nop
 8003aa8:	efff69f3 	.word	0xefff69f3
 8003aac:	40011000 	.word	0x40011000
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	40004400 	.word	0x40004400
 8003ab8:	40004800 	.word	0x40004800
 8003abc:	40004c00 	.word	0x40004c00
 8003ac0:	40005000 	.word	0x40005000
 8003ac4:	40011400 	.word	0x40011400
 8003ac8:	40007800 	.word	0x40007800
 8003acc:	40007c00 	.word	0x40007c00
 8003ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ad4:	d006      	beq.n	8003ae4 <UART_SetConfig+0x330>
 8003ad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ada:	d009      	beq.n	8003af0 <UART_SetConfig+0x33c>
 8003adc:	e00b      	b.n	8003af6 <UART_SetConfig+0x342>
 8003ade:	2300      	movs	r3, #0
 8003ae0:	77fb      	strb	r3, [r7, #31]
 8003ae2:	e00e      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	77fb      	strb	r3, [r7, #31]
 8003ae8:	e00b      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003aea:	2304      	movs	r3, #4
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e008      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003af0:	2308      	movs	r3, #8
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e005      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003af6:	2310      	movs	r3, #16
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	bf00      	nop
 8003afc:	e001      	b.n	8003b02 <UART_SetConfig+0x34e>
 8003afe:	2310      	movs	r3, #16
 8003b00:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0a:	d17f      	bne.n	8003c0c <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003b0c:	7ffb      	ldrb	r3, [r7, #31]
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d85c      	bhi.n	8003bcc <UART_SetConfig+0x418>
 8003b12:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <UART_SetConfig+0x364>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b5d 	.word	0x08003b5d
 8003b20:	08003b7d 	.word	0x08003b7d
 8003b24:	08003bcd 	.word	0x08003bcd
 8003b28:	08003b95 	.word	0x08003b95
 8003b2c:	08003bcd 	.word	0x08003bcd
 8003b30:	08003bcd 	.word	0x08003bcd
 8003b34:	08003bcd 	.word	0x08003bcd
 8003b38:	08003bb5 	.word	0x08003bb5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b3c:	f7ff f90c 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003b40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	005a      	lsls	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	085b      	lsrs	r3, r3, #1
 8003b4c:	441a      	add	r2, r3
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	61bb      	str	r3, [r7, #24]
        break;
 8003b5a:	e03a      	b.n	8003bd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b5c:	f7ff f910 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003b60:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	005a      	lsls	r2, r3, #1
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	085b      	lsrs	r3, r3, #1
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	61bb      	str	r3, [r7, #24]
        break;
 8003b7a:	e02a      	b.n	8003bd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	085a      	lsrs	r2, r3, #1
 8003b82:	4b5f      	ldr	r3, [pc, #380]	; (8003d00 <UART_SetConfig+0x54c>)
 8003b84:	4413      	add	r3, r2
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6852      	ldr	r2, [r2, #4]
 8003b8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	61bb      	str	r3, [r7, #24]
        break;
 8003b92:	e01e      	b.n	8003bd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b94:	f7ff f822 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8003b98:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	005a      	lsls	r2, r3, #1
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	085b      	lsrs	r3, r3, #1
 8003ba4:	441a      	add	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	61bb      	str	r3, [r7, #24]
        break;
 8003bb2:	e00e      	b.n	8003bd2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	61bb      	str	r3, [r7, #24]
        break;
 8003bca:	e002      	b.n	8003bd2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	75fb      	strb	r3, [r7, #23]
        break;
 8003bd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	2b0f      	cmp	r3, #15
 8003bd6:	d916      	bls.n	8003c06 <UART_SetConfig+0x452>
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bde:	d212      	bcs.n	8003c06 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	f023 030f 	bic.w	r3, r3, #15
 8003be8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	897a      	ldrh	r2, [r7, #10]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	e070      	b.n	8003ce8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	75fb      	strb	r3, [r7, #23]
 8003c0a:	e06d      	b.n	8003ce8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003c0c:	7ffb      	ldrb	r3, [r7, #31]
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d859      	bhi.n	8003cc6 <UART_SetConfig+0x512>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x464>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c5b 	.word	0x08003c5b
 8003c20:	08003c79 	.word	0x08003c79
 8003c24:	08003cc7 	.word	0x08003cc7
 8003c28:	08003c91 	.word	0x08003c91
 8003c2c:	08003cc7 	.word	0x08003cc7
 8003c30:	08003cc7 	.word	0x08003cc7
 8003c34:	08003cc7 	.word	0x08003cc7
 8003c38:	08003caf 	.word	0x08003caf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7ff f88c 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003c40:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	085a      	lsrs	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e038      	b.n	8003ccc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c5a:	f7ff f891 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003c5e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	085a      	lsrs	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	441a      	add	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	61bb      	str	r3, [r7, #24]
        break;
 8003c76:	e029      	b.n	8003ccc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	085a      	lsrs	r2, r3, #1
 8003c7e:	4b21      	ldr	r3, [pc, #132]	; (8003d04 <UART_SetConfig+0x550>)
 8003c80:	4413      	add	r3, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6852      	ldr	r2, [r2, #4]
 8003c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	61bb      	str	r3, [r7, #24]
        break;
 8003c8e:	e01d      	b.n	8003ccc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c90:	f7fe ffa4 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8003c94:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085a      	lsrs	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	61bb      	str	r3, [r7, #24]
        break;
 8003cac:	e00e      	b.n	8003ccc <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	085b      	lsrs	r3, r3, #1
 8003cb4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	61bb      	str	r3, [r7, #24]
        break;
 8003cc4:	e002      	b.n	8003ccc <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	75fb      	strb	r3, [r7, #23]
        break;
 8003cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	2b0f      	cmp	r3, #15
 8003cd0:	d908      	bls.n	8003ce4 <UART_SetConfig+0x530>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cd8:	d204      	bcs.n	8003ce4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e001      	b.n	8003ce8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3720      	adds	r7, #32
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	bf00      	nop
 8003d00:	01e84800 	.word	0x01e84800
 8003d04:	00f42400 	.word	0x00f42400

08003d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d00a      	beq.n	8003d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00a      	beq.n	8003d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	430a      	orrs	r2, r1
 8003d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d00a      	beq.n	8003d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	430a      	orrs	r2, r1
 8003d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	f003 0308 	and.w	r3, r3, #8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00a      	beq.n	8003dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00a      	beq.n	8003ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01a      	beq.n	8003e1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e06:	d10a      	bne.n	8003e1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00a      	beq.n	8003e40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  }
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af02      	add	r7, sp, #8
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003e5a:	f7fd f859 	bl	8000f10 <HAL_GetTick>
 8003e5e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0308 	and.w	r3, r3, #8
 8003e6a:	2b08      	cmp	r3, #8
 8003e6c:	d10e      	bne.n	8003e8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f82a 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e020      	b.n	8003ece <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d10e      	bne.n	8003eb8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f000 f814 	bl	8003ed6 <UART_WaitOnFlagUntilTimeout>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d001      	beq.n	8003eb8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e00a      	b.n	8003ece <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2220      	movs	r2, #32
 8003ebc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	60f8      	str	r0, [r7, #12]
 8003ede:	60b9      	str	r1, [r7, #8]
 8003ee0:	603b      	str	r3, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ee6:	e05d      	b.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eee:	d059      	beq.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ef0:	f7fd f80e 	bl	8000f10 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <UART_WaitOnFlagUntilTimeout+0x30>
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d11b      	bne.n	8003f3e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	689a      	ldr	r2, [r3, #8]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e042      	b.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d02b      	beq.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5a:	d123      	bne.n	8003fa4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f64:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f74:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	689a      	ldr	r2, [r3, #8]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2220      	movs	r2, #32
 8003f96:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e00f      	b.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	4013      	ands	r3, r2
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	461a      	mov	r2, r3
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d092      	beq.n	8003ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <__errno>:
 8003fcc:	4b01      	ldr	r3, [pc, #4]	; (8003fd4 <__errno+0x8>)
 8003fce:	6818      	ldr	r0, [r3, #0]
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	2000000c 	.word	0x2000000c

08003fd8 <__libc_init_array>:
 8003fd8:	b570      	push	{r4, r5, r6, lr}
 8003fda:	4e0d      	ldr	r6, [pc, #52]	; (8004010 <__libc_init_array+0x38>)
 8003fdc:	4c0d      	ldr	r4, [pc, #52]	; (8004014 <__libc_init_array+0x3c>)
 8003fde:	1ba4      	subs	r4, r4, r6
 8003fe0:	10a4      	asrs	r4, r4, #2
 8003fe2:	2500      	movs	r5, #0
 8003fe4:	42a5      	cmp	r5, r4
 8003fe6:	d109      	bne.n	8003ffc <__libc_init_array+0x24>
 8003fe8:	4e0b      	ldr	r6, [pc, #44]	; (8004018 <__libc_init_array+0x40>)
 8003fea:	4c0c      	ldr	r4, [pc, #48]	; (800401c <__libc_init_array+0x44>)
 8003fec:	f001 ffd0 	bl	8005f90 <_init>
 8003ff0:	1ba4      	subs	r4, r4, r6
 8003ff2:	10a4      	asrs	r4, r4, #2
 8003ff4:	2500      	movs	r5, #0
 8003ff6:	42a5      	cmp	r5, r4
 8003ff8:	d105      	bne.n	8004006 <__libc_init_array+0x2e>
 8003ffa:	bd70      	pop	{r4, r5, r6, pc}
 8003ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004000:	4798      	blx	r3
 8004002:	3501      	adds	r5, #1
 8004004:	e7ee      	b.n	8003fe4 <__libc_init_array+0xc>
 8004006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800400a:	4798      	blx	r3
 800400c:	3501      	adds	r5, #1
 800400e:	e7f2      	b.n	8003ff6 <__libc_init_array+0x1e>
 8004010:	08006240 	.word	0x08006240
 8004014:	08006240 	.word	0x08006240
 8004018:	08006240 	.word	0x08006240
 800401c:	08006244 	.word	0x08006244

08004020 <memset>:
 8004020:	4402      	add	r2, r0
 8004022:	4603      	mov	r3, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d100      	bne.n	800402a <memset+0xa>
 8004028:	4770      	bx	lr
 800402a:	f803 1b01 	strb.w	r1, [r3], #1
 800402e:	e7f9      	b.n	8004024 <memset+0x4>

08004030 <__cvt>:
 8004030:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004032:	ed2d 8b02 	vpush	{d8}
 8004036:	eeb0 8b40 	vmov.f64	d8, d0
 800403a:	b085      	sub	sp, #20
 800403c:	4617      	mov	r7, r2
 800403e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004040:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004042:	ee18 2a90 	vmov	r2, s17
 8004046:	f025 0520 	bic.w	r5, r5, #32
 800404a:	2a00      	cmp	r2, #0
 800404c:	bfb6      	itet	lt
 800404e:	222d      	movlt	r2, #45	; 0x2d
 8004050:	2200      	movge	r2, #0
 8004052:	eeb1 8b40 	vneglt.f64	d8, d0
 8004056:	2d46      	cmp	r5, #70	; 0x46
 8004058:	460c      	mov	r4, r1
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	d004      	beq.n	8004068 <__cvt+0x38>
 800405e:	2d45      	cmp	r5, #69	; 0x45
 8004060:	d100      	bne.n	8004064 <__cvt+0x34>
 8004062:	3401      	adds	r4, #1
 8004064:	2102      	movs	r1, #2
 8004066:	e000      	b.n	800406a <__cvt+0x3a>
 8004068:	2103      	movs	r1, #3
 800406a:	ab03      	add	r3, sp, #12
 800406c:	9301      	str	r3, [sp, #4]
 800406e:	ab02      	add	r3, sp, #8
 8004070:	9300      	str	r3, [sp, #0]
 8004072:	4622      	mov	r2, r4
 8004074:	4633      	mov	r3, r6
 8004076:	eeb0 0b48 	vmov.f64	d0, d8
 800407a:	f000 fcc1 	bl	8004a00 <_dtoa_r>
 800407e:	2d47      	cmp	r5, #71	; 0x47
 8004080:	d101      	bne.n	8004086 <__cvt+0x56>
 8004082:	07fb      	lsls	r3, r7, #31
 8004084:	d51e      	bpl.n	80040c4 <__cvt+0x94>
 8004086:	2d46      	cmp	r5, #70	; 0x46
 8004088:	eb00 0304 	add.w	r3, r0, r4
 800408c:	d10c      	bne.n	80040a8 <__cvt+0x78>
 800408e:	7802      	ldrb	r2, [r0, #0]
 8004090:	2a30      	cmp	r2, #48	; 0x30
 8004092:	d107      	bne.n	80040a4 <__cvt+0x74>
 8004094:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409c:	bf1c      	itt	ne
 800409e:	f1c4 0401 	rsbne	r4, r4, #1
 80040a2:	6034      	strne	r4, [r6, #0]
 80040a4:	6832      	ldr	r2, [r6, #0]
 80040a6:	4413      	add	r3, r2
 80040a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80040ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b0:	d007      	beq.n	80040c2 <__cvt+0x92>
 80040b2:	2130      	movs	r1, #48	; 0x30
 80040b4:	9a03      	ldr	r2, [sp, #12]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d204      	bcs.n	80040c4 <__cvt+0x94>
 80040ba:	1c54      	adds	r4, r2, #1
 80040bc:	9403      	str	r4, [sp, #12]
 80040be:	7011      	strb	r1, [r2, #0]
 80040c0:	e7f8      	b.n	80040b4 <__cvt+0x84>
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	9b03      	ldr	r3, [sp, #12]
 80040c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040c8:	1a1b      	subs	r3, r3, r0
 80040ca:	6013      	str	r3, [r2, #0]
 80040cc:	b005      	add	sp, #20
 80040ce:	ecbd 8b02 	vpop	{d8}
 80040d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040d4 <__exponent>:
 80040d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040d6:	2900      	cmp	r1, #0
 80040d8:	4604      	mov	r4, r0
 80040da:	bfba      	itte	lt
 80040dc:	4249      	neglt	r1, r1
 80040de:	232d      	movlt	r3, #45	; 0x2d
 80040e0:	232b      	movge	r3, #43	; 0x2b
 80040e2:	2909      	cmp	r1, #9
 80040e4:	f804 2b02 	strb.w	r2, [r4], #2
 80040e8:	7043      	strb	r3, [r0, #1]
 80040ea:	dd20      	ble.n	800412e <__exponent+0x5a>
 80040ec:	f10d 0307 	add.w	r3, sp, #7
 80040f0:	461f      	mov	r7, r3
 80040f2:	260a      	movs	r6, #10
 80040f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80040f8:	fb06 1115 	mls	r1, r6, r5, r1
 80040fc:	3130      	adds	r1, #48	; 0x30
 80040fe:	2d09      	cmp	r5, #9
 8004100:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004104:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004108:	4629      	mov	r1, r5
 800410a:	dc09      	bgt.n	8004120 <__exponent+0x4c>
 800410c:	3130      	adds	r1, #48	; 0x30
 800410e:	3b02      	subs	r3, #2
 8004110:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004114:	42bb      	cmp	r3, r7
 8004116:	4622      	mov	r2, r4
 8004118:	d304      	bcc.n	8004124 <__exponent+0x50>
 800411a:	1a10      	subs	r0, r2, r0
 800411c:	b003      	add	sp, #12
 800411e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004120:	4613      	mov	r3, r2
 8004122:	e7e7      	b.n	80040f4 <__exponent+0x20>
 8004124:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004128:	f804 2b01 	strb.w	r2, [r4], #1
 800412c:	e7f2      	b.n	8004114 <__exponent+0x40>
 800412e:	2330      	movs	r3, #48	; 0x30
 8004130:	4419      	add	r1, r3
 8004132:	7083      	strb	r3, [r0, #2]
 8004134:	1d02      	adds	r2, r0, #4
 8004136:	70c1      	strb	r1, [r0, #3]
 8004138:	e7ef      	b.n	800411a <__exponent+0x46>
 800413a:	0000      	movs	r0, r0
 800413c:	0000      	movs	r0, r0
	...

08004140 <_printf_float>:
 8004140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004144:	b08d      	sub	sp, #52	; 0x34
 8004146:	460c      	mov	r4, r1
 8004148:	4616      	mov	r6, r2
 800414a:	461f      	mov	r7, r3
 800414c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8004150:	4605      	mov	r5, r0
 8004152:	f001 f9a1 	bl	8005498 <_localeconv_r>
 8004156:	f8d0 b000 	ldr.w	fp, [r0]
 800415a:	4658      	mov	r0, fp
 800415c:	f7fc f870 	bl	8000240 <strlen>
 8004160:	2300      	movs	r3, #0
 8004162:	930a      	str	r3, [sp, #40]	; 0x28
 8004164:	f8d8 3000 	ldr.w	r3, [r8]
 8004168:	9005      	str	r0, [sp, #20]
 800416a:	3307      	adds	r3, #7
 800416c:	f023 0307 	bic.w	r3, r3, #7
 8004170:	f103 0108 	add.w	r1, r3, #8
 8004174:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004178:	6822      	ldr	r2, [r4, #0]
 800417a:	f8c8 1000 	str.w	r1, [r8]
 800417e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004182:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8004186:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8004410 <_printf_float+0x2d0>
 800418a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800418e:	eeb0 6bc0 	vabs.f64	d6, d0
 8004192:	eeb4 6b47 	vcmp.f64	d6, d7
 8004196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419a:	dd24      	ble.n	80041e6 <_printf_float+0xa6>
 800419c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	d502      	bpl.n	80041ac <_printf_float+0x6c>
 80041a6:	232d      	movs	r3, #45	; 0x2d
 80041a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ac:	499a      	ldr	r1, [pc, #616]	; (8004418 <_printf_float+0x2d8>)
 80041ae:	4b9b      	ldr	r3, [pc, #620]	; (800441c <_printf_float+0x2dc>)
 80041b0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80041b4:	bf8c      	ite	hi
 80041b6:	4688      	movhi	r8, r1
 80041b8:	4698      	movls	r8, r3
 80041ba:	f022 0204 	bic.w	r2, r2, #4
 80041be:	2303      	movs	r3, #3
 80041c0:	6123      	str	r3, [r4, #16]
 80041c2:	6022      	str	r2, [r4, #0]
 80041c4:	f04f 0a00 	mov.w	sl, #0
 80041c8:	9700      	str	r7, [sp, #0]
 80041ca:	4633      	mov	r3, r6
 80041cc:	aa0b      	add	r2, sp, #44	; 0x2c
 80041ce:	4621      	mov	r1, r4
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 f9e1 	bl	8004598 <_printf_common>
 80041d6:	3001      	adds	r0, #1
 80041d8:	f040 8089 	bne.w	80042ee <_printf_float+0x1ae>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041e0:	b00d      	add	sp, #52	; 0x34
 80041e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041e6:	eeb4 0b40 	vcmp.f64	d0, d0
 80041ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ee:	d702      	bvc.n	80041f6 <_printf_float+0xb6>
 80041f0:	498b      	ldr	r1, [pc, #556]	; (8004420 <_printf_float+0x2e0>)
 80041f2:	4b8c      	ldr	r3, [pc, #560]	; (8004424 <_printf_float+0x2e4>)
 80041f4:	e7dc      	b.n	80041b0 <_printf_float+0x70>
 80041f6:	6861      	ldr	r1, [r4, #4]
 80041f8:	1c4b      	adds	r3, r1, #1
 80041fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041fe:	ab0a      	add	r3, sp, #40	; 0x28
 8004200:	a809      	add	r0, sp, #36	; 0x24
 8004202:	d13b      	bne.n	800427c <_printf_float+0x13c>
 8004204:	2106      	movs	r1, #6
 8004206:	6061      	str	r1, [r4, #4]
 8004208:	f04f 0c00 	mov.w	ip, #0
 800420c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004210:	e9cd 0900 	strd	r0, r9, [sp]
 8004214:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004218:	6022      	str	r2, [r4, #0]
 800421a:	6861      	ldr	r1, [r4, #4]
 800421c:	4628      	mov	r0, r5
 800421e:	f7ff ff07 	bl	8004030 <__cvt>
 8004222:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8004226:	2b47      	cmp	r3, #71	; 0x47
 8004228:	4680      	mov	r8, r0
 800422a:	d109      	bne.n	8004240 <_printf_float+0x100>
 800422c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800422e:	1cd8      	adds	r0, r3, #3
 8004230:	db02      	blt.n	8004238 <_printf_float+0xf8>
 8004232:	6862      	ldr	r2, [r4, #4]
 8004234:	4293      	cmp	r3, r2
 8004236:	dd47      	ble.n	80042c8 <_printf_float+0x188>
 8004238:	f1a9 0902 	sub.w	r9, r9, #2
 800423c:	fa5f f989 	uxtb.w	r9, r9
 8004240:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004246:	d824      	bhi.n	8004292 <_printf_float+0x152>
 8004248:	3901      	subs	r1, #1
 800424a:	464a      	mov	r2, r9
 800424c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004250:	9109      	str	r1, [sp, #36]	; 0x24
 8004252:	f7ff ff3f 	bl	80040d4 <__exponent>
 8004256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004258:	1813      	adds	r3, r2, r0
 800425a:	2a01      	cmp	r2, #1
 800425c:	4682      	mov	sl, r0
 800425e:	6123      	str	r3, [r4, #16]
 8004260:	dc02      	bgt.n	8004268 <_printf_float+0x128>
 8004262:	6822      	ldr	r2, [r4, #0]
 8004264:	07d1      	lsls	r1, r2, #31
 8004266:	d501      	bpl.n	800426c <_printf_float+0x12c>
 8004268:	3301      	adds	r3, #1
 800426a:	6123      	str	r3, [r4, #16]
 800426c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0a9      	beq.n	80041c8 <_printf_float+0x88>
 8004274:	232d      	movs	r3, #45	; 0x2d
 8004276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800427a:	e7a5      	b.n	80041c8 <_printf_float+0x88>
 800427c:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8004280:	f000 8178 	beq.w	8004574 <_printf_float+0x434>
 8004284:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004288:	d1be      	bne.n	8004208 <_printf_float+0xc8>
 800428a:	2900      	cmp	r1, #0
 800428c:	d1bc      	bne.n	8004208 <_printf_float+0xc8>
 800428e:	2101      	movs	r1, #1
 8004290:	e7b9      	b.n	8004206 <_printf_float+0xc6>
 8004292:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004296:	d119      	bne.n	80042cc <_printf_float+0x18c>
 8004298:	2900      	cmp	r1, #0
 800429a:	6863      	ldr	r3, [r4, #4]
 800429c:	dd0c      	ble.n	80042b8 <_printf_float+0x178>
 800429e:	6121      	str	r1, [r4, #16]
 80042a0:	b913      	cbnz	r3, 80042a8 <_printf_float+0x168>
 80042a2:	6822      	ldr	r2, [r4, #0]
 80042a4:	07d2      	lsls	r2, r2, #31
 80042a6:	d502      	bpl.n	80042ae <_printf_float+0x16e>
 80042a8:	3301      	adds	r3, #1
 80042aa:	440b      	add	r3, r1
 80042ac:	6123      	str	r3, [r4, #16]
 80042ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042b0:	65a3      	str	r3, [r4, #88]	; 0x58
 80042b2:	f04f 0a00 	mov.w	sl, #0
 80042b6:	e7d9      	b.n	800426c <_printf_float+0x12c>
 80042b8:	b913      	cbnz	r3, 80042c0 <_printf_float+0x180>
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	07d0      	lsls	r0, r2, #31
 80042be:	d501      	bpl.n	80042c4 <_printf_float+0x184>
 80042c0:	3302      	adds	r3, #2
 80042c2:	e7f3      	b.n	80042ac <_printf_float+0x16c>
 80042c4:	2301      	movs	r3, #1
 80042c6:	e7f1      	b.n	80042ac <_printf_float+0x16c>
 80042c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80042cc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80042d0:	4293      	cmp	r3, r2
 80042d2:	db05      	blt.n	80042e0 <_printf_float+0x1a0>
 80042d4:	6822      	ldr	r2, [r4, #0]
 80042d6:	6123      	str	r3, [r4, #16]
 80042d8:	07d1      	lsls	r1, r2, #31
 80042da:	d5e8      	bpl.n	80042ae <_printf_float+0x16e>
 80042dc:	3301      	adds	r3, #1
 80042de:	e7e5      	b.n	80042ac <_printf_float+0x16c>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bfd4      	ite	le
 80042e4:	f1c3 0302 	rsble	r3, r3, #2
 80042e8:	2301      	movgt	r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	e7de      	b.n	80042ac <_printf_float+0x16c>
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	055a      	lsls	r2, r3, #21
 80042f2:	d407      	bmi.n	8004304 <_printf_float+0x1c4>
 80042f4:	6923      	ldr	r3, [r4, #16]
 80042f6:	4642      	mov	r2, r8
 80042f8:	4631      	mov	r1, r6
 80042fa:	4628      	mov	r0, r5
 80042fc:	47b8      	blx	r7
 80042fe:	3001      	adds	r0, #1
 8004300:	d12a      	bne.n	8004358 <_printf_float+0x218>
 8004302:	e76b      	b.n	80041dc <_printf_float+0x9c>
 8004304:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004308:	f240 80de 	bls.w	80044c8 <_printf_float+0x388>
 800430c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004310:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004318:	d133      	bne.n	8004382 <_printf_float+0x242>
 800431a:	2301      	movs	r3, #1
 800431c:	4a42      	ldr	r2, [pc, #264]	; (8004428 <_printf_float+0x2e8>)
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	f43f af59 	beq.w	80041dc <_printf_float+0x9c>
 800432a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800432e:	429a      	cmp	r2, r3
 8004330:	db02      	blt.n	8004338 <_printf_float+0x1f8>
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	07d8      	lsls	r0, r3, #31
 8004336:	d50f      	bpl.n	8004358 <_printf_float+0x218>
 8004338:	9b05      	ldr	r3, [sp, #20]
 800433a:	465a      	mov	r2, fp
 800433c:	4631      	mov	r1, r6
 800433e:	4628      	mov	r0, r5
 8004340:	47b8      	blx	r7
 8004342:	3001      	adds	r0, #1
 8004344:	f43f af4a 	beq.w	80041dc <_printf_float+0x9c>
 8004348:	f04f 0800 	mov.w	r8, #0
 800434c:	f104 091a 	add.w	r9, r4, #26
 8004350:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	4543      	cmp	r3, r8
 8004356:	dc09      	bgt.n	800436c <_printf_float+0x22c>
 8004358:	6823      	ldr	r3, [r4, #0]
 800435a:	079b      	lsls	r3, r3, #30
 800435c:	f100 8105 	bmi.w	800456a <_printf_float+0x42a>
 8004360:	68e0      	ldr	r0, [r4, #12]
 8004362:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004364:	4298      	cmp	r0, r3
 8004366:	bfb8      	it	lt
 8004368:	4618      	movlt	r0, r3
 800436a:	e739      	b.n	80041e0 <_printf_float+0xa0>
 800436c:	2301      	movs	r3, #1
 800436e:	464a      	mov	r2, r9
 8004370:	4631      	mov	r1, r6
 8004372:	4628      	mov	r0, r5
 8004374:	47b8      	blx	r7
 8004376:	3001      	adds	r0, #1
 8004378:	f43f af30 	beq.w	80041dc <_printf_float+0x9c>
 800437c:	f108 0801 	add.w	r8, r8, #1
 8004380:	e7e6      	b.n	8004350 <_printf_float+0x210>
 8004382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004384:	2b00      	cmp	r3, #0
 8004386:	dc2b      	bgt.n	80043e0 <_printf_float+0x2a0>
 8004388:	2301      	movs	r3, #1
 800438a:	4a27      	ldr	r2, [pc, #156]	; (8004428 <_printf_float+0x2e8>)
 800438c:	4631      	mov	r1, r6
 800438e:	4628      	mov	r0, r5
 8004390:	47b8      	blx	r7
 8004392:	3001      	adds	r0, #1
 8004394:	f43f af22 	beq.w	80041dc <_printf_float+0x9c>
 8004398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439a:	b923      	cbnz	r3, 80043a6 <_printf_float+0x266>
 800439c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800439e:	b913      	cbnz	r3, 80043a6 <_printf_float+0x266>
 80043a0:	6823      	ldr	r3, [r4, #0]
 80043a2:	07d9      	lsls	r1, r3, #31
 80043a4:	d5d8      	bpl.n	8004358 <_printf_float+0x218>
 80043a6:	9b05      	ldr	r3, [sp, #20]
 80043a8:	465a      	mov	r2, fp
 80043aa:	4631      	mov	r1, r6
 80043ac:	4628      	mov	r0, r5
 80043ae:	47b8      	blx	r7
 80043b0:	3001      	adds	r0, #1
 80043b2:	f43f af13 	beq.w	80041dc <_printf_float+0x9c>
 80043b6:	f04f 0900 	mov.w	r9, #0
 80043ba:	f104 0a1a 	add.w	sl, r4, #26
 80043be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043c0:	425b      	negs	r3, r3
 80043c2:	454b      	cmp	r3, r9
 80043c4:	dc01      	bgt.n	80043ca <_printf_float+0x28a>
 80043c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043c8:	e795      	b.n	80042f6 <_printf_float+0x1b6>
 80043ca:	2301      	movs	r3, #1
 80043cc:	4652      	mov	r2, sl
 80043ce:	4631      	mov	r1, r6
 80043d0:	4628      	mov	r0, r5
 80043d2:	47b8      	blx	r7
 80043d4:	3001      	adds	r0, #1
 80043d6:	f43f af01 	beq.w	80041dc <_printf_float+0x9c>
 80043da:	f109 0901 	add.w	r9, r9, #1
 80043de:	e7ee      	b.n	80043be <_printf_float+0x27e>
 80043e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80043e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043e4:	429a      	cmp	r2, r3
 80043e6:	bfa8      	it	ge
 80043e8:	461a      	movge	r2, r3
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	4691      	mov	r9, r2
 80043ee:	dd07      	ble.n	8004400 <_printf_float+0x2c0>
 80043f0:	4613      	mov	r3, r2
 80043f2:	4631      	mov	r1, r6
 80043f4:	4642      	mov	r2, r8
 80043f6:	4628      	mov	r0, r5
 80043f8:	47b8      	blx	r7
 80043fa:	3001      	adds	r0, #1
 80043fc:	f43f aeee 	beq.w	80041dc <_printf_float+0x9c>
 8004400:	f104 031a 	add.w	r3, r4, #26
 8004404:	f04f 0a00 	mov.w	sl, #0
 8004408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800440c:	9307      	str	r3, [sp, #28]
 800440e:	e017      	b.n	8004440 <_printf_float+0x300>
 8004410:	ffffffff 	.word	0xffffffff
 8004414:	7fefffff 	.word	0x7fefffff
 8004418:	08005fe0 	.word	0x08005fe0
 800441c:	08005fdc 	.word	0x08005fdc
 8004420:	08005fe8 	.word	0x08005fe8
 8004424:	08005fe4 	.word	0x08005fe4
 8004428:	08005fec 	.word	0x08005fec
 800442c:	2301      	movs	r3, #1
 800442e:	9a07      	ldr	r2, [sp, #28]
 8004430:	4631      	mov	r1, r6
 8004432:	4628      	mov	r0, r5
 8004434:	47b8      	blx	r7
 8004436:	3001      	adds	r0, #1
 8004438:	f43f aed0 	beq.w	80041dc <_printf_float+0x9c>
 800443c:	f10a 0a01 	add.w	sl, sl, #1
 8004440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004442:	9306      	str	r3, [sp, #24]
 8004444:	eba3 0309 	sub.w	r3, r3, r9
 8004448:	4553      	cmp	r3, sl
 800444a:	dcef      	bgt.n	800442c <_printf_float+0x2ec>
 800444c:	9b06      	ldr	r3, [sp, #24]
 800444e:	4498      	add	r8, r3
 8004450:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004454:	429a      	cmp	r2, r3
 8004456:	db15      	blt.n	8004484 <_printf_float+0x344>
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	07da      	lsls	r2, r3, #31
 800445c:	d412      	bmi.n	8004484 <_printf_float+0x344>
 800445e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004460:	9a06      	ldr	r2, [sp, #24]
 8004462:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004464:	1a9a      	subs	r2, r3, r2
 8004466:	eba3 0a01 	sub.w	sl, r3, r1
 800446a:	4592      	cmp	sl, r2
 800446c:	bfa8      	it	ge
 800446e:	4692      	movge	sl, r2
 8004470:	f1ba 0f00 	cmp.w	sl, #0
 8004474:	dc0e      	bgt.n	8004494 <_printf_float+0x354>
 8004476:	f04f 0800 	mov.w	r8, #0
 800447a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800447e:	f104 091a 	add.w	r9, r4, #26
 8004482:	e019      	b.n	80044b8 <_printf_float+0x378>
 8004484:	9b05      	ldr	r3, [sp, #20]
 8004486:	465a      	mov	r2, fp
 8004488:	4631      	mov	r1, r6
 800448a:	4628      	mov	r0, r5
 800448c:	47b8      	blx	r7
 800448e:	3001      	adds	r0, #1
 8004490:	d1e5      	bne.n	800445e <_printf_float+0x31e>
 8004492:	e6a3      	b.n	80041dc <_printf_float+0x9c>
 8004494:	4653      	mov	r3, sl
 8004496:	4642      	mov	r2, r8
 8004498:	4631      	mov	r1, r6
 800449a:	4628      	mov	r0, r5
 800449c:	47b8      	blx	r7
 800449e:	3001      	adds	r0, #1
 80044a0:	d1e9      	bne.n	8004476 <_printf_float+0x336>
 80044a2:	e69b      	b.n	80041dc <_printf_float+0x9c>
 80044a4:	2301      	movs	r3, #1
 80044a6:	464a      	mov	r2, r9
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f ae94 	beq.w	80041dc <_printf_float+0x9c>
 80044b4:	f108 0801 	add.w	r8, r8, #1
 80044b8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	eba3 030a 	sub.w	r3, r3, sl
 80044c2:	4543      	cmp	r3, r8
 80044c4:	dcee      	bgt.n	80044a4 <_printf_float+0x364>
 80044c6:	e747      	b.n	8004358 <_printf_float+0x218>
 80044c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80044ca:	2a01      	cmp	r2, #1
 80044cc:	dc01      	bgt.n	80044d2 <_printf_float+0x392>
 80044ce:	07db      	lsls	r3, r3, #31
 80044d0:	d539      	bpl.n	8004546 <_printf_float+0x406>
 80044d2:	2301      	movs	r3, #1
 80044d4:	4642      	mov	r2, r8
 80044d6:	4631      	mov	r1, r6
 80044d8:	4628      	mov	r0, r5
 80044da:	47b8      	blx	r7
 80044dc:	3001      	adds	r0, #1
 80044de:	f43f ae7d 	beq.w	80041dc <_printf_float+0x9c>
 80044e2:	9b05      	ldr	r3, [sp, #20]
 80044e4:	465a      	mov	r2, fp
 80044e6:	4631      	mov	r1, r6
 80044e8:	4628      	mov	r0, r5
 80044ea:	47b8      	blx	r7
 80044ec:	3001      	adds	r0, #1
 80044ee:	f108 0801 	add.w	r8, r8, #1
 80044f2:	f43f ae73 	beq.w	80041dc <_printf_float+0x9c>
 80044f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80044fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004504:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8004508:	d018      	beq.n	800453c <_printf_float+0x3fc>
 800450a:	4642      	mov	r2, r8
 800450c:	4631      	mov	r1, r6
 800450e:	4628      	mov	r0, r5
 8004510:	47b8      	blx	r7
 8004512:	3001      	adds	r0, #1
 8004514:	d10e      	bne.n	8004534 <_printf_float+0x3f4>
 8004516:	e661      	b.n	80041dc <_printf_float+0x9c>
 8004518:	2301      	movs	r3, #1
 800451a:	464a      	mov	r2, r9
 800451c:	4631      	mov	r1, r6
 800451e:	4628      	mov	r0, r5
 8004520:	47b8      	blx	r7
 8004522:	3001      	adds	r0, #1
 8004524:	f43f ae5a 	beq.w	80041dc <_printf_float+0x9c>
 8004528:	f108 0801 	add.w	r8, r8, #1
 800452c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800452e:	3b01      	subs	r3, #1
 8004530:	4543      	cmp	r3, r8
 8004532:	dcf1      	bgt.n	8004518 <_printf_float+0x3d8>
 8004534:	4653      	mov	r3, sl
 8004536:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800453a:	e6dd      	b.n	80042f8 <_printf_float+0x1b8>
 800453c:	f04f 0800 	mov.w	r8, #0
 8004540:	f104 091a 	add.w	r9, r4, #26
 8004544:	e7f2      	b.n	800452c <_printf_float+0x3ec>
 8004546:	2301      	movs	r3, #1
 8004548:	e7df      	b.n	800450a <_printf_float+0x3ca>
 800454a:	2301      	movs	r3, #1
 800454c:	464a      	mov	r2, r9
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	47b8      	blx	r7
 8004554:	3001      	adds	r0, #1
 8004556:	f43f ae41 	beq.w	80041dc <_printf_float+0x9c>
 800455a:	f108 0801 	add.w	r8, r8, #1
 800455e:	68e3      	ldr	r3, [r4, #12]
 8004560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	4543      	cmp	r3, r8
 8004566:	dcf0      	bgt.n	800454a <_printf_float+0x40a>
 8004568:	e6fa      	b.n	8004360 <_printf_float+0x220>
 800456a:	f04f 0800 	mov.w	r8, #0
 800456e:	f104 0919 	add.w	r9, r4, #25
 8004572:	e7f4      	b.n	800455e <_printf_float+0x41e>
 8004574:	2900      	cmp	r1, #0
 8004576:	f43f ae8a 	beq.w	800428e <_printf_float+0x14e>
 800457a:	f04f 0c00 	mov.w	ip, #0
 800457e:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004582:	e9cd 0900 	strd	r0, r9, [sp]
 8004586:	6022      	str	r2, [r4, #0]
 8004588:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800458c:	4628      	mov	r0, r5
 800458e:	f7ff fd4f 	bl	8004030 <__cvt>
 8004592:	4680      	mov	r8, r0
 8004594:	e64a      	b.n	800422c <_printf_float+0xec>
 8004596:	bf00      	nop

08004598 <_printf_common>:
 8004598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459c:	4691      	mov	r9, r2
 800459e:	461f      	mov	r7, r3
 80045a0:	688a      	ldr	r2, [r1, #8]
 80045a2:	690b      	ldr	r3, [r1, #16]
 80045a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bfb8      	it	lt
 80045ac:	4613      	movlt	r3, r2
 80045ae:	f8c9 3000 	str.w	r3, [r9]
 80045b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045b6:	4606      	mov	r6, r0
 80045b8:	460c      	mov	r4, r1
 80045ba:	b112      	cbz	r2, 80045c2 <_printf_common+0x2a>
 80045bc:	3301      	adds	r3, #1
 80045be:	f8c9 3000 	str.w	r3, [r9]
 80045c2:	6823      	ldr	r3, [r4, #0]
 80045c4:	0699      	lsls	r1, r3, #26
 80045c6:	bf42      	ittt	mi
 80045c8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80045cc:	3302      	addmi	r3, #2
 80045ce:	f8c9 3000 	strmi.w	r3, [r9]
 80045d2:	6825      	ldr	r5, [r4, #0]
 80045d4:	f015 0506 	ands.w	r5, r5, #6
 80045d8:	d107      	bne.n	80045ea <_printf_common+0x52>
 80045da:	f104 0a19 	add.w	sl, r4, #25
 80045de:	68e3      	ldr	r3, [r4, #12]
 80045e0:	f8d9 2000 	ldr.w	r2, [r9]
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	42ab      	cmp	r3, r5
 80045e8:	dc28      	bgt.n	800463c <_printf_common+0xa4>
 80045ea:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80045ee:	6822      	ldr	r2, [r4, #0]
 80045f0:	3300      	adds	r3, #0
 80045f2:	bf18      	it	ne
 80045f4:	2301      	movne	r3, #1
 80045f6:	0692      	lsls	r2, r2, #26
 80045f8:	d42d      	bmi.n	8004656 <_printf_common+0xbe>
 80045fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045fe:	4639      	mov	r1, r7
 8004600:	4630      	mov	r0, r6
 8004602:	47c0      	blx	r8
 8004604:	3001      	adds	r0, #1
 8004606:	d020      	beq.n	800464a <_printf_common+0xb2>
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	68e5      	ldr	r5, [r4, #12]
 800460c:	f8d9 2000 	ldr.w	r2, [r9]
 8004610:	f003 0306 	and.w	r3, r3, #6
 8004614:	2b04      	cmp	r3, #4
 8004616:	bf08      	it	eq
 8004618:	1aad      	subeq	r5, r5, r2
 800461a:	68a3      	ldr	r3, [r4, #8]
 800461c:	6922      	ldr	r2, [r4, #16]
 800461e:	bf0c      	ite	eq
 8004620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004624:	2500      	movne	r5, #0
 8004626:	4293      	cmp	r3, r2
 8004628:	bfc4      	itt	gt
 800462a:	1a9b      	subgt	r3, r3, r2
 800462c:	18ed      	addgt	r5, r5, r3
 800462e:	f04f 0900 	mov.w	r9, #0
 8004632:	341a      	adds	r4, #26
 8004634:	454d      	cmp	r5, r9
 8004636:	d11a      	bne.n	800466e <_printf_common+0xd6>
 8004638:	2000      	movs	r0, #0
 800463a:	e008      	b.n	800464e <_printf_common+0xb6>
 800463c:	2301      	movs	r3, #1
 800463e:	4652      	mov	r2, sl
 8004640:	4639      	mov	r1, r7
 8004642:	4630      	mov	r0, r6
 8004644:	47c0      	blx	r8
 8004646:	3001      	adds	r0, #1
 8004648:	d103      	bne.n	8004652 <_printf_common+0xba>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800464e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004652:	3501      	adds	r5, #1
 8004654:	e7c3      	b.n	80045de <_printf_common+0x46>
 8004656:	18e1      	adds	r1, r4, r3
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	2030      	movs	r0, #48	; 0x30
 800465c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004660:	4422      	add	r2, r4
 8004662:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004666:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800466a:	3302      	adds	r3, #2
 800466c:	e7c5      	b.n	80045fa <_printf_common+0x62>
 800466e:	2301      	movs	r3, #1
 8004670:	4622      	mov	r2, r4
 8004672:	4639      	mov	r1, r7
 8004674:	4630      	mov	r0, r6
 8004676:	47c0      	blx	r8
 8004678:	3001      	adds	r0, #1
 800467a:	d0e6      	beq.n	800464a <_printf_common+0xb2>
 800467c:	f109 0901 	add.w	r9, r9, #1
 8004680:	e7d8      	b.n	8004634 <_printf_common+0x9c>
	...

08004684 <_printf_i>:
 8004684:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004688:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800468c:	460c      	mov	r4, r1
 800468e:	7e09      	ldrb	r1, [r1, #24]
 8004690:	b085      	sub	sp, #20
 8004692:	296e      	cmp	r1, #110	; 0x6e
 8004694:	4617      	mov	r7, r2
 8004696:	4606      	mov	r6, r0
 8004698:	4698      	mov	r8, r3
 800469a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800469c:	f000 80b3 	beq.w	8004806 <_printf_i+0x182>
 80046a0:	d822      	bhi.n	80046e8 <_printf_i+0x64>
 80046a2:	2963      	cmp	r1, #99	; 0x63
 80046a4:	d036      	beq.n	8004714 <_printf_i+0x90>
 80046a6:	d80a      	bhi.n	80046be <_printf_i+0x3a>
 80046a8:	2900      	cmp	r1, #0
 80046aa:	f000 80b9 	beq.w	8004820 <_printf_i+0x19c>
 80046ae:	2958      	cmp	r1, #88	; 0x58
 80046b0:	f000 8083 	beq.w	80047ba <_printf_i+0x136>
 80046b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046b8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80046bc:	e032      	b.n	8004724 <_printf_i+0xa0>
 80046be:	2964      	cmp	r1, #100	; 0x64
 80046c0:	d001      	beq.n	80046c6 <_printf_i+0x42>
 80046c2:	2969      	cmp	r1, #105	; 0x69
 80046c4:	d1f6      	bne.n	80046b4 <_printf_i+0x30>
 80046c6:	6820      	ldr	r0, [r4, #0]
 80046c8:	6813      	ldr	r3, [r2, #0]
 80046ca:	0605      	lsls	r5, r0, #24
 80046cc:	f103 0104 	add.w	r1, r3, #4
 80046d0:	d52a      	bpl.n	8004728 <_printf_i+0xa4>
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6011      	str	r1, [r2, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	da03      	bge.n	80046e2 <_printf_i+0x5e>
 80046da:	222d      	movs	r2, #45	; 0x2d
 80046dc:	425b      	negs	r3, r3
 80046de:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80046e2:	486f      	ldr	r0, [pc, #444]	; (80048a0 <_printf_i+0x21c>)
 80046e4:	220a      	movs	r2, #10
 80046e6:	e039      	b.n	800475c <_printf_i+0xd8>
 80046e8:	2973      	cmp	r1, #115	; 0x73
 80046ea:	f000 809d 	beq.w	8004828 <_printf_i+0x1a4>
 80046ee:	d808      	bhi.n	8004702 <_printf_i+0x7e>
 80046f0:	296f      	cmp	r1, #111	; 0x6f
 80046f2:	d020      	beq.n	8004736 <_printf_i+0xb2>
 80046f4:	2970      	cmp	r1, #112	; 0x70
 80046f6:	d1dd      	bne.n	80046b4 <_printf_i+0x30>
 80046f8:	6823      	ldr	r3, [r4, #0]
 80046fa:	f043 0320 	orr.w	r3, r3, #32
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	e003      	b.n	800470a <_printf_i+0x86>
 8004702:	2975      	cmp	r1, #117	; 0x75
 8004704:	d017      	beq.n	8004736 <_printf_i+0xb2>
 8004706:	2978      	cmp	r1, #120	; 0x78
 8004708:	d1d4      	bne.n	80046b4 <_printf_i+0x30>
 800470a:	2378      	movs	r3, #120	; 0x78
 800470c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004710:	4864      	ldr	r0, [pc, #400]	; (80048a4 <_printf_i+0x220>)
 8004712:	e055      	b.n	80047c0 <_printf_i+0x13c>
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	1d19      	adds	r1, r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6011      	str	r1, [r2, #0]
 800471c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004720:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004724:	2301      	movs	r3, #1
 8004726:	e08c      	b.n	8004842 <_printf_i+0x1be>
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6011      	str	r1, [r2, #0]
 800472c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004730:	bf18      	it	ne
 8004732:	b21b      	sxthne	r3, r3
 8004734:	e7cf      	b.n	80046d6 <_printf_i+0x52>
 8004736:	6813      	ldr	r3, [r2, #0]
 8004738:	6825      	ldr	r5, [r4, #0]
 800473a:	1d18      	adds	r0, r3, #4
 800473c:	6010      	str	r0, [r2, #0]
 800473e:	0628      	lsls	r0, r5, #24
 8004740:	d501      	bpl.n	8004746 <_printf_i+0xc2>
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	e002      	b.n	800474c <_printf_i+0xc8>
 8004746:	0668      	lsls	r0, r5, #25
 8004748:	d5fb      	bpl.n	8004742 <_printf_i+0xbe>
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	4854      	ldr	r0, [pc, #336]	; (80048a0 <_printf_i+0x21c>)
 800474e:	296f      	cmp	r1, #111	; 0x6f
 8004750:	bf14      	ite	ne
 8004752:	220a      	movne	r2, #10
 8004754:	2208      	moveq	r2, #8
 8004756:	2100      	movs	r1, #0
 8004758:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800475c:	6865      	ldr	r5, [r4, #4]
 800475e:	60a5      	str	r5, [r4, #8]
 8004760:	2d00      	cmp	r5, #0
 8004762:	f2c0 8095 	blt.w	8004890 <_printf_i+0x20c>
 8004766:	6821      	ldr	r1, [r4, #0]
 8004768:	f021 0104 	bic.w	r1, r1, #4
 800476c:	6021      	str	r1, [r4, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d13d      	bne.n	80047ee <_printf_i+0x16a>
 8004772:	2d00      	cmp	r5, #0
 8004774:	f040 808e 	bne.w	8004894 <_printf_i+0x210>
 8004778:	4665      	mov	r5, ip
 800477a:	2a08      	cmp	r2, #8
 800477c:	d10b      	bne.n	8004796 <_printf_i+0x112>
 800477e:	6823      	ldr	r3, [r4, #0]
 8004780:	07db      	lsls	r3, r3, #31
 8004782:	d508      	bpl.n	8004796 <_printf_i+0x112>
 8004784:	6923      	ldr	r3, [r4, #16]
 8004786:	6862      	ldr	r2, [r4, #4]
 8004788:	429a      	cmp	r2, r3
 800478a:	bfde      	ittt	le
 800478c:	2330      	movle	r3, #48	; 0x30
 800478e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004792:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004796:	ebac 0305 	sub.w	r3, ip, r5
 800479a:	6123      	str	r3, [r4, #16]
 800479c:	f8cd 8000 	str.w	r8, [sp]
 80047a0:	463b      	mov	r3, r7
 80047a2:	aa03      	add	r2, sp, #12
 80047a4:	4621      	mov	r1, r4
 80047a6:	4630      	mov	r0, r6
 80047a8:	f7ff fef6 	bl	8004598 <_printf_common>
 80047ac:	3001      	adds	r0, #1
 80047ae:	d14d      	bne.n	800484c <_printf_i+0x1c8>
 80047b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047b4:	b005      	add	sp, #20
 80047b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80047ba:	4839      	ldr	r0, [pc, #228]	; (80048a0 <_printf_i+0x21c>)
 80047bc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80047c0:	6813      	ldr	r3, [r2, #0]
 80047c2:	6821      	ldr	r1, [r4, #0]
 80047c4:	1d1d      	adds	r5, r3, #4
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	6015      	str	r5, [r2, #0]
 80047ca:	060a      	lsls	r2, r1, #24
 80047cc:	d50b      	bpl.n	80047e6 <_printf_i+0x162>
 80047ce:	07ca      	lsls	r2, r1, #31
 80047d0:	bf44      	itt	mi
 80047d2:	f041 0120 	orrmi.w	r1, r1, #32
 80047d6:	6021      	strmi	r1, [r4, #0]
 80047d8:	b91b      	cbnz	r3, 80047e2 <_printf_i+0x15e>
 80047da:	6822      	ldr	r2, [r4, #0]
 80047dc:	f022 0220 	bic.w	r2, r2, #32
 80047e0:	6022      	str	r2, [r4, #0]
 80047e2:	2210      	movs	r2, #16
 80047e4:	e7b7      	b.n	8004756 <_printf_i+0xd2>
 80047e6:	064d      	lsls	r5, r1, #25
 80047e8:	bf48      	it	mi
 80047ea:	b29b      	uxthmi	r3, r3
 80047ec:	e7ef      	b.n	80047ce <_printf_i+0x14a>
 80047ee:	4665      	mov	r5, ip
 80047f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80047f4:	fb02 3311 	mls	r3, r2, r1, r3
 80047f8:	5cc3      	ldrb	r3, [r0, r3]
 80047fa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80047fe:	460b      	mov	r3, r1
 8004800:	2900      	cmp	r1, #0
 8004802:	d1f5      	bne.n	80047f0 <_printf_i+0x16c>
 8004804:	e7b9      	b.n	800477a <_printf_i+0xf6>
 8004806:	6813      	ldr	r3, [r2, #0]
 8004808:	6825      	ldr	r5, [r4, #0]
 800480a:	6961      	ldr	r1, [r4, #20]
 800480c:	1d18      	adds	r0, r3, #4
 800480e:	6010      	str	r0, [r2, #0]
 8004810:	0628      	lsls	r0, r5, #24
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	d501      	bpl.n	800481a <_printf_i+0x196>
 8004816:	6019      	str	r1, [r3, #0]
 8004818:	e002      	b.n	8004820 <_printf_i+0x19c>
 800481a:	066a      	lsls	r2, r5, #25
 800481c:	d5fb      	bpl.n	8004816 <_printf_i+0x192>
 800481e:	8019      	strh	r1, [r3, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	6123      	str	r3, [r4, #16]
 8004824:	4665      	mov	r5, ip
 8004826:	e7b9      	b.n	800479c <_printf_i+0x118>
 8004828:	6813      	ldr	r3, [r2, #0]
 800482a:	1d19      	adds	r1, r3, #4
 800482c:	6011      	str	r1, [r2, #0]
 800482e:	681d      	ldr	r5, [r3, #0]
 8004830:	6862      	ldr	r2, [r4, #4]
 8004832:	2100      	movs	r1, #0
 8004834:	4628      	mov	r0, r5
 8004836:	f7fb fd0b 	bl	8000250 <memchr>
 800483a:	b108      	cbz	r0, 8004840 <_printf_i+0x1bc>
 800483c:	1b40      	subs	r0, r0, r5
 800483e:	6060      	str	r0, [r4, #4]
 8004840:	6863      	ldr	r3, [r4, #4]
 8004842:	6123      	str	r3, [r4, #16]
 8004844:	2300      	movs	r3, #0
 8004846:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800484a:	e7a7      	b.n	800479c <_printf_i+0x118>
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	462a      	mov	r2, r5
 8004850:	4639      	mov	r1, r7
 8004852:	4630      	mov	r0, r6
 8004854:	47c0      	blx	r8
 8004856:	3001      	adds	r0, #1
 8004858:	d0aa      	beq.n	80047b0 <_printf_i+0x12c>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	079b      	lsls	r3, r3, #30
 800485e:	d413      	bmi.n	8004888 <_printf_i+0x204>
 8004860:	68e0      	ldr	r0, [r4, #12]
 8004862:	9b03      	ldr	r3, [sp, #12]
 8004864:	4298      	cmp	r0, r3
 8004866:	bfb8      	it	lt
 8004868:	4618      	movlt	r0, r3
 800486a:	e7a3      	b.n	80047b4 <_printf_i+0x130>
 800486c:	2301      	movs	r3, #1
 800486e:	464a      	mov	r2, r9
 8004870:	4639      	mov	r1, r7
 8004872:	4630      	mov	r0, r6
 8004874:	47c0      	blx	r8
 8004876:	3001      	adds	r0, #1
 8004878:	d09a      	beq.n	80047b0 <_printf_i+0x12c>
 800487a:	3501      	adds	r5, #1
 800487c:	68e3      	ldr	r3, [r4, #12]
 800487e:	9a03      	ldr	r2, [sp, #12]
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	42ab      	cmp	r3, r5
 8004884:	dcf2      	bgt.n	800486c <_printf_i+0x1e8>
 8004886:	e7eb      	b.n	8004860 <_printf_i+0x1dc>
 8004888:	2500      	movs	r5, #0
 800488a:	f104 0919 	add.w	r9, r4, #25
 800488e:	e7f5      	b.n	800487c <_printf_i+0x1f8>
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ac      	bne.n	80047ee <_printf_i+0x16a>
 8004894:	7803      	ldrb	r3, [r0, #0]
 8004896:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800489a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800489e:	e76c      	b.n	800477a <_printf_i+0xf6>
 80048a0:	08005fee 	.word	0x08005fee
 80048a4:	08005fff 	.word	0x08005fff

080048a8 <siprintf>:
 80048a8:	b40e      	push	{r1, r2, r3}
 80048aa:	b500      	push	{lr}
 80048ac:	b09c      	sub	sp, #112	; 0x70
 80048ae:	ab1d      	add	r3, sp, #116	; 0x74
 80048b0:	9002      	str	r0, [sp, #8]
 80048b2:	9006      	str	r0, [sp, #24]
 80048b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048b8:	4809      	ldr	r0, [pc, #36]	; (80048e0 <siprintf+0x38>)
 80048ba:	9107      	str	r1, [sp, #28]
 80048bc:	9104      	str	r1, [sp, #16]
 80048be:	4909      	ldr	r1, [pc, #36]	; (80048e4 <siprintf+0x3c>)
 80048c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c4:	9105      	str	r1, [sp, #20]
 80048c6:	6800      	ldr	r0, [r0, #0]
 80048c8:	9301      	str	r3, [sp, #4]
 80048ca:	a902      	add	r1, sp, #8
 80048cc:	f001 f9f0 	bl	8005cb0 <_svfiprintf_r>
 80048d0:	9b02      	ldr	r3, [sp, #8]
 80048d2:	2200      	movs	r2, #0
 80048d4:	701a      	strb	r2, [r3, #0]
 80048d6:	b01c      	add	sp, #112	; 0x70
 80048d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048dc:	b003      	add	sp, #12
 80048de:	4770      	bx	lr
 80048e0:	2000000c 	.word	0x2000000c
 80048e4:	ffff0208 	.word	0xffff0208

080048e8 <quorem>:
 80048e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ec:	6903      	ldr	r3, [r0, #16]
 80048ee:	690c      	ldr	r4, [r1, #16]
 80048f0:	42a3      	cmp	r3, r4
 80048f2:	4680      	mov	r8, r0
 80048f4:	f2c0 8082 	blt.w	80049fc <quorem+0x114>
 80048f8:	3c01      	subs	r4, #1
 80048fa:	f101 0714 	add.w	r7, r1, #20
 80048fe:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004902:	f100 0614 	add.w	r6, r0, #20
 8004906:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800490a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800490e:	eb06 030c 	add.w	r3, r6, ip
 8004912:	3501      	adds	r5, #1
 8004914:	eb07 090c 	add.w	r9, r7, ip
 8004918:	9301      	str	r3, [sp, #4]
 800491a:	fbb0 f5f5 	udiv	r5, r0, r5
 800491e:	b395      	cbz	r5, 8004986 <quorem+0x9e>
 8004920:	f04f 0a00 	mov.w	sl, #0
 8004924:	4638      	mov	r0, r7
 8004926:	46b6      	mov	lr, r6
 8004928:	46d3      	mov	fp, sl
 800492a:	f850 2b04 	ldr.w	r2, [r0], #4
 800492e:	b293      	uxth	r3, r2
 8004930:	fb05 a303 	mla	r3, r5, r3, sl
 8004934:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004938:	b29b      	uxth	r3, r3
 800493a:	ebab 0303 	sub.w	r3, fp, r3
 800493e:	0c12      	lsrs	r2, r2, #16
 8004940:	f8de b000 	ldr.w	fp, [lr]
 8004944:	fb05 a202 	mla	r2, r5, r2, sl
 8004948:	fa13 f38b 	uxtah	r3, r3, fp
 800494c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004950:	fa1f fb82 	uxth.w	fp, r2
 8004954:	f8de 2000 	ldr.w	r2, [lr]
 8004958:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800495c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004960:	b29b      	uxth	r3, r3
 8004962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004966:	4581      	cmp	r9, r0
 8004968:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800496c:	f84e 3b04 	str.w	r3, [lr], #4
 8004970:	d2db      	bcs.n	800492a <quorem+0x42>
 8004972:	f856 300c 	ldr.w	r3, [r6, ip]
 8004976:	b933      	cbnz	r3, 8004986 <quorem+0x9e>
 8004978:	9b01      	ldr	r3, [sp, #4]
 800497a:	3b04      	subs	r3, #4
 800497c:	429e      	cmp	r6, r3
 800497e:	461a      	mov	r2, r3
 8004980:	d330      	bcc.n	80049e4 <quorem+0xfc>
 8004982:	f8c8 4010 	str.w	r4, [r8, #16]
 8004986:	4640      	mov	r0, r8
 8004988:	f000 ffbc 	bl	8005904 <__mcmp>
 800498c:	2800      	cmp	r0, #0
 800498e:	db25      	blt.n	80049dc <quorem+0xf4>
 8004990:	3501      	adds	r5, #1
 8004992:	4630      	mov	r0, r6
 8004994:	f04f 0c00 	mov.w	ip, #0
 8004998:	f857 2b04 	ldr.w	r2, [r7], #4
 800499c:	f8d0 e000 	ldr.w	lr, [r0]
 80049a0:	b293      	uxth	r3, r2
 80049a2:	ebac 0303 	sub.w	r3, ip, r3
 80049a6:	0c12      	lsrs	r2, r2, #16
 80049a8:	fa13 f38e 	uxtah	r3, r3, lr
 80049ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80049b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049ba:	45b9      	cmp	r9, r7
 80049bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80049c0:	f840 3b04 	str.w	r3, [r0], #4
 80049c4:	d2e8      	bcs.n	8004998 <quorem+0xb0>
 80049c6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80049ca:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80049ce:	b92a      	cbnz	r2, 80049dc <quorem+0xf4>
 80049d0:	3b04      	subs	r3, #4
 80049d2:	429e      	cmp	r6, r3
 80049d4:	461a      	mov	r2, r3
 80049d6:	d30b      	bcc.n	80049f0 <quorem+0x108>
 80049d8:	f8c8 4010 	str.w	r4, [r8, #16]
 80049dc:	4628      	mov	r0, r5
 80049de:	b003      	add	sp, #12
 80049e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e4:	6812      	ldr	r2, [r2, #0]
 80049e6:	3b04      	subs	r3, #4
 80049e8:	2a00      	cmp	r2, #0
 80049ea:	d1ca      	bne.n	8004982 <quorem+0x9a>
 80049ec:	3c01      	subs	r4, #1
 80049ee:	e7c5      	b.n	800497c <quorem+0x94>
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	3b04      	subs	r3, #4
 80049f4:	2a00      	cmp	r2, #0
 80049f6:	d1ef      	bne.n	80049d8 <quorem+0xf0>
 80049f8:	3c01      	subs	r4, #1
 80049fa:	e7ea      	b.n	80049d2 <quorem+0xea>
 80049fc:	2000      	movs	r0, #0
 80049fe:	e7ee      	b.n	80049de <quorem+0xf6>

08004a00 <_dtoa_r>:
 8004a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a04:	ec57 6b10 	vmov	r6, r7, d0
 8004a08:	b095      	sub	sp, #84	; 0x54
 8004a0a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a0c:	9108      	str	r1, [sp, #32]
 8004a0e:	4604      	mov	r4, r0
 8004a10:	920a      	str	r2, [sp, #40]	; 0x28
 8004a12:	9311      	str	r3, [sp, #68]	; 0x44
 8004a14:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 8004a18:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8004a1c:	b93d      	cbnz	r5, 8004a2e <_dtoa_r+0x2e>
 8004a1e:	2010      	movs	r0, #16
 8004a20:	f000 fd48 	bl	80054b4 <malloc>
 8004a24:	6260      	str	r0, [r4, #36]	; 0x24
 8004a26:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004a2a:	6005      	str	r5, [r0, #0]
 8004a2c:	60c5      	str	r5, [r0, #12]
 8004a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	b151      	cbz	r1, 8004a4a <_dtoa_r+0x4a>
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	604a      	str	r2, [r1, #4]
 8004a38:	2301      	movs	r3, #1
 8004a3a:	4093      	lsls	r3, r2
 8004a3c:	608b      	str	r3, [r1, #8]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	f000 fd7f 	bl	8005542 <_Bfree>
 8004a44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	1e3b      	subs	r3, r7, #0
 8004a4c:	bfb9      	ittee	lt
 8004a4e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004a52:	9303      	strlt	r3, [sp, #12]
 8004a54:	2300      	movge	r3, #0
 8004a56:	f8c8 3000 	strge.w	r3, [r8]
 8004a5a:	9d03      	ldr	r5, [sp, #12]
 8004a5c:	4bac      	ldr	r3, [pc, #688]	; (8004d10 <_dtoa_r+0x310>)
 8004a5e:	bfbc      	itt	lt
 8004a60:	2201      	movlt	r2, #1
 8004a62:	f8c8 2000 	strlt.w	r2, [r8]
 8004a66:	43ab      	bics	r3, r5
 8004a68:	d11b      	bne.n	8004aa2 <_dtoa_r+0xa2>
 8004a6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004a6c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	9b02      	ldr	r3, [sp, #8]
 8004a74:	b923      	cbnz	r3, 8004a80 <_dtoa_r+0x80>
 8004a76:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	f000 84dd 	beq.w	800543a <_dtoa_r+0xa3a>
 8004a80:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004a82:	b953      	cbnz	r3, 8004a9a <_dtoa_r+0x9a>
 8004a84:	4ba3      	ldr	r3, [pc, #652]	; (8004d14 <_dtoa_r+0x314>)
 8004a86:	e020      	b.n	8004aca <_dtoa_r+0xca>
 8004a88:	4ba3      	ldr	r3, [pc, #652]	; (8004d18 <_dtoa_r+0x318>)
 8004a8a:	9304      	str	r3, [sp, #16]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	9804      	ldr	r0, [sp, #16]
 8004a94:	b015      	add	sp, #84	; 0x54
 8004a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a9a:	4b9e      	ldr	r3, [pc, #632]	; (8004d14 <_dtoa_r+0x314>)
 8004a9c:	9304      	str	r3, [sp, #16]
 8004a9e:	3303      	adds	r3, #3
 8004aa0:	e7f5      	b.n	8004a8e <_dtoa_r+0x8e>
 8004aa2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004aa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aae:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004ab2:	d10c      	bne.n	8004ace <_dtoa_r+0xce>
 8004ab4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 84b9 	beq.w	8005434 <_dtoa_r+0xa34>
 8004ac2:	4b96      	ldr	r3, [pc, #600]	; (8004d1c <_dtoa_r+0x31c>)
 8004ac4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	e7e1      	b.n	8004a92 <_dtoa_r+0x92>
 8004ace:	a913      	add	r1, sp, #76	; 0x4c
 8004ad0:	aa12      	add	r2, sp, #72	; 0x48
 8004ad2:	ed9d 0b04 	vldr	d0, [sp, #16]
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f000 ff8b 	bl	80059f2 <__d2b>
 8004adc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8004ae0:	9001      	str	r0, [sp, #4]
 8004ae2:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004ae4:	2e00      	cmp	r6, #0
 8004ae6:	d046      	beq.n	8004b76 <_dtoa_r+0x176>
 8004ae8:	9805      	ldr	r0, [sp, #20]
 8004aea:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8004aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004af2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004af6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004afa:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8004afe:	2700      	movs	r7, #0
 8004b00:	ee07 aa90 	vmov	s15, sl
 8004b04:	ec43 2b16 	vmov	d6, r2, r3
 8004b08:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8004b0c:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8004cf8 <_dtoa_r+0x2f8>
 8004b10:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8004b14:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004b18:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8004d00 <_dtoa_r+0x300>
 8004b1c:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004b20:	eeb0 7b46 	vmov.f64	d7, d6
 8004b24:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8004d08 <_dtoa_r+0x308>
 8004b28:	eea5 7b06 	vfma.f64	d7, d5, d6
 8004b2c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004b30:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b38:	ee16 ba90 	vmov	fp, s13
 8004b3c:	d508      	bpl.n	8004b50 <_dtoa_r+0x150>
 8004b3e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004b42:	eeb4 6b47 	vcmp.f64	d6, d7
 8004b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4a:	bf18      	it	ne
 8004b4c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8004b50:	f1bb 0f16 	cmp.w	fp, #22
 8004b54:	d834      	bhi.n	8004bc0 <_dtoa_r+0x1c0>
 8004b56:	4b72      	ldr	r3, [pc, #456]	; (8004d20 <_dtoa_r+0x320>)
 8004b58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b5c:	ed93 7b00 	vldr	d7, [r3]
 8004b60:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004b64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	dd01      	ble.n	8004b72 <_dtoa_r+0x172>
 8004b6e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004b72:	2300      	movs	r3, #0
 8004b74:	e025      	b.n	8004bc2 <_dtoa_r+0x1c2>
 8004b76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004b78:	eb01 0a03 	add.w	sl, r1, r3
 8004b7c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	dd17      	ble.n	8004bb4 <_dtoa_r+0x1b4>
 8004b84:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004b88:	9a02      	ldr	r2, [sp, #8]
 8004b8a:	409d      	lsls	r5, r3
 8004b8c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8004b90:	fa22 f303 	lsr.w	r3, r2, r3
 8004b94:	432b      	orrs	r3, r5
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004b9e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004ba2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004ba6:	9805      	ldr	r0, [sp, #20]
 8004ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bac:	2701      	movs	r7, #1
 8004bae:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8004bb2:	e7a5      	b.n	8004b00 <_dtoa_r+0x100>
 8004bb4:	9a02      	ldr	r2, [sp, #8]
 8004bb6:	f1c3 0320 	rsb	r3, r3, #32
 8004bba:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbe:	e7ea      	b.n	8004b96 <_dtoa_r+0x196>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	eba1 0a0a 	sub.w	sl, r1, sl
 8004bc6:	9310      	str	r3, [sp, #64]	; 0x40
 8004bc8:	f1ba 0301 	subs.w	r3, sl, #1
 8004bcc:	9307      	str	r3, [sp, #28]
 8004bce:	bf43      	ittte	mi
 8004bd0:	2300      	movmi	r3, #0
 8004bd2:	f1ca 0a01 	rsbmi	sl, sl, #1
 8004bd6:	9307      	strmi	r3, [sp, #28]
 8004bd8:	f04f 0a00 	movpl.w	sl, #0
 8004bdc:	f1bb 0f00 	cmp.w	fp, #0
 8004be0:	db19      	blt.n	8004c16 <_dtoa_r+0x216>
 8004be2:	9b07      	ldr	r3, [sp, #28]
 8004be4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004be8:	445b      	add	r3, fp
 8004bea:	9307      	str	r3, [sp, #28]
 8004bec:	f04f 0800 	mov.w	r8, #0
 8004bf0:	9b08      	ldr	r3, [sp, #32]
 8004bf2:	2b09      	cmp	r3, #9
 8004bf4:	d866      	bhi.n	8004cc4 <_dtoa_r+0x2c4>
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	bfc4      	itt	gt
 8004bfa:	3b04      	subgt	r3, #4
 8004bfc:	9308      	strgt	r3, [sp, #32]
 8004bfe:	9b08      	ldr	r3, [sp, #32]
 8004c00:	f1a3 0302 	sub.w	r3, r3, #2
 8004c04:	bfcc      	ite	gt
 8004c06:	2500      	movgt	r5, #0
 8004c08:	2501      	movle	r5, #1
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	d866      	bhi.n	8004cdc <_dtoa_r+0x2dc>
 8004c0e:	e8df f003 	tbb	[pc, r3]
 8004c12:	5755      	.short	0x5755
 8004c14:	4909      	.short	0x4909
 8004c16:	2300      	movs	r3, #0
 8004c18:	ebaa 0a0b 	sub.w	sl, sl, fp
 8004c1c:	f1cb 0800 	rsb	r8, fp, #0
 8004c20:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c22:	e7e5      	b.n	8004bf0 <_dtoa_r+0x1f0>
 8004c24:	2301      	movs	r3, #1
 8004c26:	9309      	str	r3, [sp, #36]	; 0x24
 8004c28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dd59      	ble.n	8004ce2 <_dtoa_r+0x2e2>
 8004c2e:	9306      	str	r3, [sp, #24]
 8004c30:	4699      	mov	r9, r3
 8004c32:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004c34:	2200      	movs	r2, #0
 8004c36:	6072      	str	r2, [r6, #4]
 8004c38:	2204      	movs	r2, #4
 8004c3a:	f102 0014 	add.w	r0, r2, #20
 8004c3e:	4298      	cmp	r0, r3
 8004c40:	6871      	ldr	r1, [r6, #4]
 8004c42:	d953      	bls.n	8004cec <_dtoa_r+0x2ec>
 8004c44:	4620      	mov	r0, r4
 8004c46:	f000 fc48 	bl	80054da <_Balloc>
 8004c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c4c:	6030      	str	r0, [r6, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	9304      	str	r3, [sp, #16]
 8004c52:	f1b9 0f0e 	cmp.w	r9, #14
 8004c56:	f200 80c2 	bhi.w	8004dde <_dtoa_r+0x3de>
 8004c5a:	2d00      	cmp	r5, #0
 8004c5c:	f000 80bf 	beq.w	8004dde <_dtoa_r+0x3de>
 8004c60:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004c64:	f1bb 0f00 	cmp.w	fp, #0
 8004c68:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004c6c:	f340 80e6 	ble.w	8004e3c <_dtoa_r+0x43c>
 8004c70:	4a2b      	ldr	r2, [pc, #172]	; (8004d20 <_dtoa_r+0x320>)
 8004c72:	f00b 030f 	and.w	r3, fp, #15
 8004c76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004c7a:	ed93 7b00 	vldr	d7, [r3]
 8004c7e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8004c82:	06da      	lsls	r2, r3, #27
 8004c84:	f140 80d8 	bpl.w	8004e38 <_dtoa_r+0x438>
 8004c88:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <_dtoa_r+0x324>)
 8004c8a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8004c8e:	ed92 6b08 	vldr	d6, [r2, #32]
 8004c92:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004c96:	ed8d 6b02 	vstr	d6, [sp, #8]
 8004c9a:	f003 030f 	and.w	r3, r3, #15
 8004c9e:	2203      	movs	r2, #3
 8004ca0:	4920      	ldr	r1, [pc, #128]	; (8004d24 <_dtoa_r+0x324>)
 8004ca2:	e04a      	b.n	8004d3a <_dtoa_r+0x33a>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	9309      	str	r3, [sp, #36]	; 0x24
 8004ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004caa:	445b      	add	r3, fp
 8004cac:	f103 0901 	add.w	r9, r3, #1
 8004cb0:	9306      	str	r3, [sp, #24]
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	bfb8      	it	lt
 8004cb8:	2301      	movlt	r3, #1
 8004cba:	e7ba      	b.n	8004c32 <_dtoa_r+0x232>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e7b2      	b.n	8004c26 <_dtoa_r+0x226>
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	e7f0      	b.n	8004ca6 <_dtoa_r+0x2a6>
 8004cc4:	2501      	movs	r5, #1
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cd0:	9306      	str	r3, [sp, #24]
 8004cd2:	4699      	mov	r9, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	2312      	movs	r3, #18
 8004cd8:	920a      	str	r2, [sp, #40]	; 0x28
 8004cda:	e7aa      	b.n	8004c32 <_dtoa_r+0x232>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	9309      	str	r3, [sp, #36]	; 0x24
 8004ce0:	e7f4      	b.n	8004ccc <_dtoa_r+0x2cc>
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	9306      	str	r3, [sp, #24]
 8004ce6:	4699      	mov	r9, r3
 8004ce8:	461a      	mov	r2, r3
 8004cea:	e7f5      	b.n	8004cd8 <_dtoa_r+0x2d8>
 8004cec:	3101      	adds	r1, #1
 8004cee:	6071      	str	r1, [r6, #4]
 8004cf0:	0052      	lsls	r2, r2, #1
 8004cf2:	e7a2      	b.n	8004c3a <_dtoa_r+0x23a>
 8004cf4:	f3af 8000 	nop.w
 8004cf8:	636f4361 	.word	0x636f4361
 8004cfc:	3fd287a7 	.word	0x3fd287a7
 8004d00:	8b60c8b3 	.word	0x8b60c8b3
 8004d04:	3fc68a28 	.word	0x3fc68a28
 8004d08:	509f79fb 	.word	0x509f79fb
 8004d0c:	3fd34413 	.word	0x3fd34413
 8004d10:	7ff00000 	.word	0x7ff00000
 8004d14:	08006019 	.word	0x08006019
 8004d18:	08006010 	.word	0x08006010
 8004d1c:	08005fed 	.word	0x08005fed
 8004d20:	08006048 	.word	0x08006048
 8004d24:	08006020 	.word	0x08006020
 8004d28:	07de      	lsls	r6, r3, #31
 8004d2a:	d504      	bpl.n	8004d36 <_dtoa_r+0x336>
 8004d2c:	ed91 6b00 	vldr	d6, [r1]
 8004d30:	3201      	adds	r2, #1
 8004d32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d36:	105b      	asrs	r3, r3, #1
 8004d38:	3108      	adds	r1, #8
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1f4      	bne.n	8004d28 <_dtoa_r+0x328>
 8004d3e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004d42:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004d46:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d4a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 80a7 	beq.w	8004ea0 <_dtoa_r+0x4a0>
 8004d52:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004d56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004d5a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d62:	f140 809d 	bpl.w	8004ea0 <_dtoa_r+0x4a0>
 8004d66:	f1b9 0f00 	cmp.w	r9, #0
 8004d6a:	f000 8099 	beq.w	8004ea0 <_dtoa_r+0x4a0>
 8004d6e:	9b06      	ldr	r3, [sp, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dd30      	ble.n	8004dd6 <_dtoa_r+0x3d6>
 8004d74:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004d78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d80:	9d06      	ldr	r5, [sp, #24]
 8004d82:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8004d86:	3201      	adds	r2, #1
 8004d88:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004d8c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004d90:	ee07 2a90 	vmov	s15, r2
 8004d94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004d98:	eea7 5b06 	vfma.f64	d5, d7, d6
 8004d9c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004da0:	9a03      	ldr	r2, [sp, #12]
 8004da2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004da6:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8004daa:	2d00      	cmp	r5, #0
 8004dac:	d17b      	bne.n	8004ea6 <_dtoa_r+0x4a6>
 8004dae:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004db2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004db6:	ec41 0b17 	vmov	d7, r0, r1
 8004dba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc2:	f300 8253 	bgt.w	800526c <_dtoa_r+0x86c>
 8004dc6:	eeb1 7b47 	vneg.f64	d7, d7
 8004dca:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd2:	f100 8249 	bmi.w	8005268 <_dtoa_r+0x868>
 8004dd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004dda:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f2c0 8119 	blt.w	8005018 <_dtoa_r+0x618>
 8004de6:	f1bb 0f0e 	cmp.w	fp, #14
 8004dea:	f300 8115 	bgt.w	8005018 <_dtoa_r+0x618>
 8004dee:	4bc3      	ldr	r3, [pc, #780]	; (80050fc <_dtoa_r+0x6fc>)
 8004df0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004df4:	ed93 6b00 	vldr	d6, [r3]
 8004df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f280 80ba 	bge.w	8004f74 <_dtoa_r+0x574>
 8004e00:	f1b9 0f00 	cmp.w	r9, #0
 8004e04:	f300 80b6 	bgt.w	8004f74 <_dtoa_r+0x574>
 8004e08:	f040 822d 	bne.w	8005266 <_dtoa_r+0x866>
 8004e0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004e10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8004e14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004e18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e20:	464d      	mov	r5, r9
 8004e22:	464f      	mov	r7, r9
 8004e24:	f280 8204 	bge.w	8005230 <_dtoa_r+0x830>
 8004e28:	9b04      	ldr	r3, [sp, #16]
 8004e2a:	9a04      	ldr	r2, [sp, #16]
 8004e2c:	1c5e      	adds	r6, r3, #1
 8004e2e:	2331      	movs	r3, #49	; 0x31
 8004e30:	7013      	strb	r3, [r2, #0]
 8004e32:	f10b 0b01 	add.w	fp, fp, #1
 8004e36:	e1ff      	b.n	8005238 <_dtoa_r+0x838>
 8004e38:	2202      	movs	r2, #2
 8004e3a:	e731      	b.n	8004ca0 <_dtoa_r+0x2a0>
 8004e3c:	d02e      	beq.n	8004e9c <_dtoa_r+0x49c>
 8004e3e:	f1cb 0300 	rsb	r3, fp, #0
 8004e42:	4aae      	ldr	r2, [pc, #696]	; (80050fc <_dtoa_r+0x6fc>)
 8004e44:	f003 010f 	and.w	r1, r3, #15
 8004e48:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004e4c:	ed92 7b00 	vldr	d7, [r2]
 8004e50:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8004e54:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e58:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004e5c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8004e60:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004e64:	49a6      	ldr	r1, [pc, #664]	; (8005100 <_dtoa_r+0x700>)
 8004e66:	111b      	asrs	r3, r3, #4
 8004e68:	2000      	movs	r0, #0
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	b93b      	cbnz	r3, 8004e7e <_dtoa_r+0x47e>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	f43f af6b 	beq.w	8004d4a <_dtoa_r+0x34a>
 8004e74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e7c:	e765      	b.n	8004d4a <_dtoa_r+0x34a>
 8004e7e:	07dd      	lsls	r5, r3, #31
 8004e80:	d509      	bpl.n	8004e96 <_dtoa_r+0x496>
 8004e82:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004e86:	ed91 7b00 	vldr	d7, [r1]
 8004e8a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004e8e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004e92:	3201      	adds	r2, #1
 8004e94:	2001      	movs	r0, #1
 8004e96:	105b      	asrs	r3, r3, #1
 8004e98:	3108      	adds	r1, #8
 8004e9a:	e7e7      	b.n	8004e6c <_dtoa_r+0x46c>
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	e754      	b.n	8004d4a <_dtoa_r+0x34a>
 8004ea0:	465b      	mov	r3, fp
 8004ea2:	464d      	mov	r5, r9
 8004ea4:	e770      	b.n	8004d88 <_dtoa_r+0x388>
 8004ea6:	4a95      	ldr	r2, [pc, #596]	; (80050fc <_dtoa_r+0x6fc>)
 8004ea8:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8004eac:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004eb2:	ec41 0b17 	vmov	d7, r0, r1
 8004eb6:	b35a      	cbz	r2, 8004f10 <_dtoa_r+0x510>
 8004eb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004ebc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004ec0:	9e04      	ldr	r6, [sp, #16]
 8004ec2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004ec6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004eca:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004ece:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004ed2:	ee14 2a90 	vmov	r2, s9
 8004ed6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004eda:	3230      	adds	r2, #48	; 0x30
 8004edc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004ee0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ee8:	f806 2b01 	strb.w	r2, [r6], #1
 8004eec:	d43b      	bmi.n	8004f66 <_dtoa_r+0x566>
 8004eee:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004ef2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004ef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004efa:	d472      	bmi.n	8004fe2 <_dtoa_r+0x5e2>
 8004efc:	9a04      	ldr	r2, [sp, #16]
 8004efe:	1ab2      	subs	r2, r6, r2
 8004f00:	4295      	cmp	r5, r2
 8004f02:	f77f af68 	ble.w	8004dd6 <_dtoa_r+0x3d6>
 8004f06:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004f0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004f0e:	e7de      	b.n	8004ece <_dtoa_r+0x4ce>
 8004f10:	9a04      	ldr	r2, [sp, #16]
 8004f12:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004f16:	1956      	adds	r6, r2, r5
 8004f18:	4611      	mov	r1, r2
 8004f1a:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004f1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004f22:	ee14 2a90 	vmov	r2, s9
 8004f26:	3230      	adds	r2, #48	; 0x30
 8004f28:	f801 2b01 	strb.w	r2, [r1], #1
 8004f2c:	42b1      	cmp	r1, r6
 8004f2e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004f32:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004f36:	d11a      	bne.n	8004f6e <_dtoa_r+0x56e>
 8004f38:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004f3c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004f40:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f48:	dc4b      	bgt.n	8004fe2 <_dtoa_r+0x5e2>
 8004f4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004f4e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	f57f af3e 	bpl.w	8004dd6 <_dtoa_r+0x3d6>
 8004f5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004f5e:	2a30      	cmp	r2, #48	; 0x30
 8004f60:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 8004f64:	d001      	beq.n	8004f6a <_dtoa_r+0x56a>
 8004f66:	469b      	mov	fp, r3
 8004f68:	e02a      	b.n	8004fc0 <_dtoa_r+0x5c0>
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	e7f5      	b.n	8004f5a <_dtoa_r+0x55a>
 8004f6e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004f72:	e7d4      	b.n	8004f1e <_dtoa_r+0x51e>
 8004f74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004f78:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004f7c:	9e04      	ldr	r6, [sp, #16]
 8004f7e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004f82:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004f86:	ee15 3a10 	vmov	r3, s10
 8004f8a:	3330      	adds	r3, #48	; 0x30
 8004f8c:	f806 3b01 	strb.w	r3, [r6], #1
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	1af3      	subs	r3, r6, r3
 8004f94:	4599      	cmp	r9, r3
 8004f96:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004f9a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004f9e:	d133      	bne.n	8005008 <_dtoa_r+0x608>
 8004fa0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004fa4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fac:	dc18      	bgt.n	8004fe0 <_dtoa_r+0x5e0>
 8004fae:	eeb4 7b46 	vcmp.f64	d7, d6
 8004fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fb6:	d103      	bne.n	8004fc0 <_dtoa_r+0x5c0>
 8004fb8:	ee15 3a10 	vmov	r3, s10
 8004fbc:	07db      	lsls	r3, r3, #31
 8004fbe:	d40f      	bmi.n	8004fe0 <_dtoa_r+0x5e0>
 8004fc0:	9901      	ldr	r1, [sp, #4]
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	f000 fabd 	bl	8005542 <_Bfree>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004fcc:	7033      	strb	r3, [r6, #0]
 8004fce:	f10b 0301 	add.w	r3, fp, #1
 8004fd2:	6013      	str	r3, [r2, #0]
 8004fd4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f43f ad5b 	beq.w	8004a92 <_dtoa_r+0x92>
 8004fdc:	601e      	str	r6, [r3, #0]
 8004fde:	e558      	b.n	8004a92 <_dtoa_r+0x92>
 8004fe0:	465b      	mov	r3, fp
 8004fe2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004fe6:	2939      	cmp	r1, #57	; 0x39
 8004fe8:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8004fec:	d106      	bne.n	8004ffc <_dtoa_r+0x5fc>
 8004fee:	9904      	ldr	r1, [sp, #16]
 8004ff0:	4291      	cmp	r1, r2
 8004ff2:	d107      	bne.n	8005004 <_dtoa_r+0x604>
 8004ff4:	2230      	movs	r2, #48	; 0x30
 8004ff6:	700a      	strb	r2, [r1, #0]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	7811      	ldrb	r1, [r2, #0]
 8004ffe:	3101      	adds	r1, #1
 8005000:	7011      	strb	r1, [r2, #0]
 8005002:	e7b0      	b.n	8004f66 <_dtoa_r+0x566>
 8005004:	4616      	mov	r6, r2
 8005006:	e7ec      	b.n	8004fe2 <_dtoa_r+0x5e2>
 8005008:	ee27 7b04 	vmul.f64	d7, d7, d4
 800500c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005014:	d1b3      	bne.n	8004f7e <_dtoa_r+0x57e>
 8005016:	e7d3      	b.n	8004fc0 <_dtoa_r+0x5c0>
 8005018:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800501a:	2a00      	cmp	r2, #0
 800501c:	f000 808d 	beq.w	800513a <_dtoa_r+0x73a>
 8005020:	9a08      	ldr	r2, [sp, #32]
 8005022:	2a01      	cmp	r2, #1
 8005024:	dc72      	bgt.n	800510c <_dtoa_r+0x70c>
 8005026:	2f00      	cmp	r7, #0
 8005028:	d06c      	beq.n	8005104 <_dtoa_r+0x704>
 800502a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800502e:	4645      	mov	r5, r8
 8005030:	4656      	mov	r6, sl
 8005032:	9a07      	ldr	r2, [sp, #28]
 8005034:	2101      	movs	r1, #1
 8005036:	441a      	add	r2, r3
 8005038:	4620      	mov	r0, r4
 800503a:	449a      	add	sl, r3
 800503c:	9207      	str	r2, [sp, #28]
 800503e:	f000 fb20 	bl	8005682 <__i2b>
 8005042:	4607      	mov	r7, r0
 8005044:	2e00      	cmp	r6, #0
 8005046:	dd0b      	ble.n	8005060 <_dtoa_r+0x660>
 8005048:	9b07      	ldr	r3, [sp, #28]
 800504a:	2b00      	cmp	r3, #0
 800504c:	dd08      	ble.n	8005060 <_dtoa_r+0x660>
 800504e:	42b3      	cmp	r3, r6
 8005050:	9a07      	ldr	r2, [sp, #28]
 8005052:	bfa8      	it	ge
 8005054:	4633      	movge	r3, r6
 8005056:	ebaa 0a03 	sub.w	sl, sl, r3
 800505a:	1af6      	subs	r6, r6, r3
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	9307      	str	r3, [sp, #28]
 8005060:	f1b8 0f00 	cmp.w	r8, #0
 8005064:	d01d      	beq.n	80050a2 <_dtoa_r+0x6a2>
 8005066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d06a      	beq.n	8005142 <_dtoa_r+0x742>
 800506c:	b18d      	cbz	r5, 8005092 <_dtoa_r+0x692>
 800506e:	4639      	mov	r1, r7
 8005070:	462a      	mov	r2, r5
 8005072:	4620      	mov	r0, r4
 8005074:	f000 fba4 	bl	80057c0 <__pow5mult>
 8005078:	9a01      	ldr	r2, [sp, #4]
 800507a:	4601      	mov	r1, r0
 800507c:	4607      	mov	r7, r0
 800507e:	4620      	mov	r0, r4
 8005080:	f000 fb08 	bl	8005694 <__multiply>
 8005084:	9901      	ldr	r1, [sp, #4]
 8005086:	900c      	str	r0, [sp, #48]	; 0x30
 8005088:	4620      	mov	r0, r4
 800508a:	f000 fa5a 	bl	8005542 <_Bfree>
 800508e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	ebb8 0205 	subs.w	r2, r8, r5
 8005096:	d004      	beq.n	80050a2 <_dtoa_r+0x6a2>
 8005098:	9901      	ldr	r1, [sp, #4]
 800509a:	4620      	mov	r0, r4
 800509c:	f000 fb90 	bl	80057c0 <__pow5mult>
 80050a0:	9001      	str	r0, [sp, #4]
 80050a2:	2101      	movs	r1, #1
 80050a4:	4620      	mov	r0, r4
 80050a6:	f000 faec 	bl	8005682 <__i2b>
 80050aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050ac:	4605      	mov	r5, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 81ca 	beq.w	8005448 <_dtoa_r+0xa48>
 80050b4:	461a      	mov	r2, r3
 80050b6:	4601      	mov	r1, r0
 80050b8:	4620      	mov	r0, r4
 80050ba:	f000 fb81 	bl	80057c0 <__pow5mult>
 80050be:	9b08      	ldr	r3, [sp, #32]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	4605      	mov	r5, r0
 80050c4:	dc44      	bgt.n	8005150 <_dtoa_r+0x750>
 80050c6:	9b02      	ldr	r3, [sp, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d13c      	bne.n	8005146 <_dtoa_r+0x746>
 80050cc:	9b03      	ldr	r3, [sp, #12]
 80050ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d137      	bne.n	8005146 <_dtoa_r+0x746>
 80050d6:	9b03      	ldr	r3, [sp, #12]
 80050d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050dc:	0d1b      	lsrs	r3, r3, #20
 80050de:	051b      	lsls	r3, r3, #20
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d033      	beq.n	800514c <_dtoa_r+0x74c>
 80050e4:	9b07      	ldr	r3, [sp, #28]
 80050e6:	3301      	adds	r3, #1
 80050e8:	f10a 0a01 	add.w	sl, sl, #1
 80050ec:	9307      	str	r3, [sp, #28]
 80050ee:	f04f 0801 	mov.w	r8, #1
 80050f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050f4:	bb73      	cbnz	r3, 8005154 <_dtoa_r+0x754>
 80050f6:	2001      	movs	r0, #1
 80050f8:	e034      	b.n	8005164 <_dtoa_r+0x764>
 80050fa:	bf00      	nop
 80050fc:	08006048 	.word	0x08006048
 8005100:	08006020 	.word	0x08006020
 8005104:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800510a:	e790      	b.n	800502e <_dtoa_r+0x62e>
 800510c:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 8005110:	45a8      	cmp	r8, r5
 8005112:	bfbf      	itttt	lt
 8005114:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005116:	eba5 0808 	sublt.w	r8, r5, r8
 800511a:	4443      	addlt	r3, r8
 800511c:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800511e:	bfb6      	itet	lt
 8005120:	46a8      	movlt	r8, r5
 8005122:	eba8 0505 	subge.w	r5, r8, r5
 8005126:	2500      	movlt	r5, #0
 8005128:	f1b9 0f00 	cmp.w	r9, #0
 800512c:	bfb9      	ittee	lt
 800512e:	ebaa 0609 	sublt.w	r6, sl, r9
 8005132:	2300      	movlt	r3, #0
 8005134:	4656      	movge	r6, sl
 8005136:	464b      	movge	r3, r9
 8005138:	e77b      	b.n	8005032 <_dtoa_r+0x632>
 800513a:	4645      	mov	r5, r8
 800513c:	4656      	mov	r6, sl
 800513e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005140:	e780      	b.n	8005044 <_dtoa_r+0x644>
 8005142:	4642      	mov	r2, r8
 8005144:	e7a8      	b.n	8005098 <_dtoa_r+0x698>
 8005146:	f04f 0800 	mov.w	r8, #0
 800514a:	e7d2      	b.n	80050f2 <_dtoa_r+0x6f2>
 800514c:	4698      	mov	r8, r3
 800514e:	e7d0      	b.n	80050f2 <_dtoa_r+0x6f2>
 8005150:	f04f 0800 	mov.w	r8, #0
 8005154:	692b      	ldr	r3, [r5, #16]
 8005156:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800515a:	6918      	ldr	r0, [r3, #16]
 800515c:	f000 fa43 	bl	80055e6 <__hi0bits>
 8005160:	f1c0 0020 	rsb	r0, r0, #32
 8005164:	9b07      	ldr	r3, [sp, #28]
 8005166:	4418      	add	r0, r3
 8005168:	f010 001f 	ands.w	r0, r0, #31
 800516c:	d047      	beq.n	80051fe <_dtoa_r+0x7fe>
 800516e:	f1c0 0320 	rsb	r3, r0, #32
 8005172:	2b04      	cmp	r3, #4
 8005174:	dd3b      	ble.n	80051ee <_dtoa_r+0x7ee>
 8005176:	9b07      	ldr	r3, [sp, #28]
 8005178:	f1c0 001c 	rsb	r0, r0, #28
 800517c:	4482      	add	sl, r0
 800517e:	4406      	add	r6, r0
 8005180:	4403      	add	r3, r0
 8005182:	9307      	str	r3, [sp, #28]
 8005184:	f1ba 0f00 	cmp.w	sl, #0
 8005188:	dd05      	ble.n	8005196 <_dtoa_r+0x796>
 800518a:	4652      	mov	r2, sl
 800518c:	9901      	ldr	r1, [sp, #4]
 800518e:	4620      	mov	r0, r4
 8005190:	f000 fb64 	bl	800585c <__lshift>
 8005194:	9001      	str	r0, [sp, #4]
 8005196:	9b07      	ldr	r3, [sp, #28]
 8005198:	2b00      	cmp	r3, #0
 800519a:	dd05      	ble.n	80051a8 <_dtoa_r+0x7a8>
 800519c:	4629      	mov	r1, r5
 800519e:	461a      	mov	r2, r3
 80051a0:	4620      	mov	r0, r4
 80051a2:	f000 fb5b 	bl	800585c <__lshift>
 80051a6:	4605      	mov	r5, r0
 80051a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80051aa:	b353      	cbz	r3, 8005202 <_dtoa_r+0x802>
 80051ac:	4629      	mov	r1, r5
 80051ae:	9801      	ldr	r0, [sp, #4]
 80051b0:	f000 fba8 	bl	8005904 <__mcmp>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	da24      	bge.n	8005202 <_dtoa_r+0x802>
 80051b8:	2300      	movs	r3, #0
 80051ba:	220a      	movs	r2, #10
 80051bc:	9901      	ldr	r1, [sp, #4]
 80051be:	4620      	mov	r0, r4
 80051c0:	f000 f9d6 	bl	8005570 <__multadd>
 80051c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c6:	9001      	str	r0, [sp, #4]
 80051c8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	f000 8142 	beq.w	8005456 <_dtoa_r+0xa56>
 80051d2:	2300      	movs	r3, #0
 80051d4:	4639      	mov	r1, r7
 80051d6:	220a      	movs	r2, #10
 80051d8:	4620      	mov	r0, r4
 80051da:	f000 f9c9 	bl	8005570 <__multadd>
 80051de:	9b06      	ldr	r3, [sp, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	4607      	mov	r7, r0
 80051e4:	dc4b      	bgt.n	800527e <_dtoa_r+0x87e>
 80051e6:	9b08      	ldr	r3, [sp, #32]
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	dd48      	ble.n	800527e <_dtoa_r+0x87e>
 80051ec:	e011      	b.n	8005212 <_dtoa_r+0x812>
 80051ee:	d0c9      	beq.n	8005184 <_dtoa_r+0x784>
 80051f0:	9a07      	ldr	r2, [sp, #28]
 80051f2:	331c      	adds	r3, #28
 80051f4:	441a      	add	r2, r3
 80051f6:	449a      	add	sl, r3
 80051f8:	441e      	add	r6, r3
 80051fa:	4613      	mov	r3, r2
 80051fc:	e7c1      	b.n	8005182 <_dtoa_r+0x782>
 80051fe:	4603      	mov	r3, r0
 8005200:	e7f6      	b.n	80051f0 <_dtoa_r+0x7f0>
 8005202:	f1b9 0f00 	cmp.w	r9, #0
 8005206:	dc34      	bgt.n	8005272 <_dtoa_r+0x872>
 8005208:	9b08      	ldr	r3, [sp, #32]
 800520a:	2b02      	cmp	r3, #2
 800520c:	dd31      	ble.n	8005272 <_dtoa_r+0x872>
 800520e:	f8cd 9018 	str.w	r9, [sp, #24]
 8005212:	9b06      	ldr	r3, [sp, #24]
 8005214:	b963      	cbnz	r3, 8005230 <_dtoa_r+0x830>
 8005216:	4629      	mov	r1, r5
 8005218:	2205      	movs	r2, #5
 800521a:	4620      	mov	r0, r4
 800521c:	f000 f9a8 	bl	8005570 <__multadd>
 8005220:	4601      	mov	r1, r0
 8005222:	4605      	mov	r5, r0
 8005224:	9801      	ldr	r0, [sp, #4]
 8005226:	f000 fb6d 	bl	8005904 <__mcmp>
 800522a:	2800      	cmp	r0, #0
 800522c:	f73f adfc 	bgt.w	8004e28 <_dtoa_r+0x428>
 8005230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005232:	9e04      	ldr	r6, [sp, #16]
 8005234:	ea6f 0b03 	mvn.w	fp, r3
 8005238:	f04f 0900 	mov.w	r9, #0
 800523c:	4629      	mov	r1, r5
 800523e:	4620      	mov	r0, r4
 8005240:	f000 f97f 	bl	8005542 <_Bfree>
 8005244:	2f00      	cmp	r7, #0
 8005246:	f43f aebb 	beq.w	8004fc0 <_dtoa_r+0x5c0>
 800524a:	f1b9 0f00 	cmp.w	r9, #0
 800524e:	d005      	beq.n	800525c <_dtoa_r+0x85c>
 8005250:	45b9      	cmp	r9, r7
 8005252:	d003      	beq.n	800525c <_dtoa_r+0x85c>
 8005254:	4649      	mov	r1, r9
 8005256:	4620      	mov	r0, r4
 8005258:	f000 f973 	bl	8005542 <_Bfree>
 800525c:	4639      	mov	r1, r7
 800525e:	4620      	mov	r0, r4
 8005260:	f000 f96f 	bl	8005542 <_Bfree>
 8005264:	e6ac      	b.n	8004fc0 <_dtoa_r+0x5c0>
 8005266:	2500      	movs	r5, #0
 8005268:	462f      	mov	r7, r5
 800526a:	e7e1      	b.n	8005230 <_dtoa_r+0x830>
 800526c:	469b      	mov	fp, r3
 800526e:	462f      	mov	r7, r5
 8005270:	e5da      	b.n	8004e28 <_dtoa_r+0x428>
 8005272:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005274:	f8cd 9018 	str.w	r9, [sp, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 80f3 	beq.w	8005464 <_dtoa_r+0xa64>
 800527e:	2e00      	cmp	r6, #0
 8005280:	dd05      	ble.n	800528e <_dtoa_r+0x88e>
 8005282:	4639      	mov	r1, r7
 8005284:	4632      	mov	r2, r6
 8005286:	4620      	mov	r0, r4
 8005288:	f000 fae8 	bl	800585c <__lshift>
 800528c:	4607      	mov	r7, r0
 800528e:	f1b8 0f00 	cmp.w	r8, #0
 8005292:	d04c      	beq.n	800532e <_dtoa_r+0x92e>
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4620      	mov	r0, r4
 8005298:	f000 f91f 	bl	80054da <_Balloc>
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	3202      	adds	r2, #2
 80052a0:	4606      	mov	r6, r0
 80052a2:	0092      	lsls	r2, r2, #2
 80052a4:	f107 010c 	add.w	r1, r7, #12
 80052a8:	300c      	adds	r0, #12
 80052aa:	f000 f90b 	bl	80054c4 <memcpy>
 80052ae:	2201      	movs	r2, #1
 80052b0:	4631      	mov	r1, r6
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 fad2 	bl	800585c <__lshift>
 80052b8:	9b02      	ldr	r3, [sp, #8]
 80052ba:	f8dd a010 	ldr.w	sl, [sp, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	46b9      	mov	r9, r7
 80052c4:	9307      	str	r3, [sp, #28]
 80052c6:	4607      	mov	r7, r0
 80052c8:	4629      	mov	r1, r5
 80052ca:	9801      	ldr	r0, [sp, #4]
 80052cc:	f7ff fb0c 	bl	80048e8 <quorem>
 80052d0:	4649      	mov	r1, r9
 80052d2:	4606      	mov	r6, r0
 80052d4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052d8:	9801      	ldr	r0, [sp, #4]
 80052da:	f000 fb13 	bl	8005904 <__mcmp>
 80052de:	463a      	mov	r2, r7
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	4629      	mov	r1, r5
 80052e4:	4620      	mov	r0, r4
 80052e6:	f000 fb27 	bl	8005938 <__mdiff>
 80052ea:	68c3      	ldr	r3, [r0, #12]
 80052ec:	4602      	mov	r2, r0
 80052ee:	bb03      	cbnz	r3, 8005332 <_dtoa_r+0x932>
 80052f0:	4601      	mov	r1, r0
 80052f2:	9009      	str	r0, [sp, #36]	; 0x24
 80052f4:	9801      	ldr	r0, [sp, #4]
 80052f6:	f000 fb05 	bl	8005904 <__mcmp>
 80052fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052fc:	4603      	mov	r3, r0
 80052fe:	4611      	mov	r1, r2
 8005300:	4620      	mov	r0, r4
 8005302:	9309      	str	r3, [sp, #36]	; 0x24
 8005304:	f000 f91d 	bl	8005542 <_Bfree>
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	b9a3      	cbnz	r3, 8005336 <_dtoa_r+0x936>
 800530c:	9a08      	ldr	r2, [sp, #32]
 800530e:	b992      	cbnz	r2, 8005336 <_dtoa_r+0x936>
 8005310:	9a07      	ldr	r2, [sp, #28]
 8005312:	b982      	cbnz	r2, 8005336 <_dtoa_r+0x936>
 8005314:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005318:	d029      	beq.n	800536e <_dtoa_r+0x96e>
 800531a:	9b02      	ldr	r3, [sp, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd01      	ble.n	8005324 <_dtoa_r+0x924>
 8005320:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8005324:	f10a 0601 	add.w	r6, sl, #1
 8005328:	f88a 8000 	strb.w	r8, [sl]
 800532c:	e786      	b.n	800523c <_dtoa_r+0x83c>
 800532e:	4638      	mov	r0, r7
 8005330:	e7c2      	b.n	80052b8 <_dtoa_r+0x8b8>
 8005332:	2301      	movs	r3, #1
 8005334:	e7e3      	b.n	80052fe <_dtoa_r+0x8fe>
 8005336:	9a02      	ldr	r2, [sp, #8]
 8005338:	2a00      	cmp	r2, #0
 800533a:	db04      	blt.n	8005346 <_dtoa_r+0x946>
 800533c:	d124      	bne.n	8005388 <_dtoa_r+0x988>
 800533e:	9a08      	ldr	r2, [sp, #32]
 8005340:	bb12      	cbnz	r2, 8005388 <_dtoa_r+0x988>
 8005342:	9a07      	ldr	r2, [sp, #28]
 8005344:	bb02      	cbnz	r2, 8005388 <_dtoa_r+0x988>
 8005346:	2b00      	cmp	r3, #0
 8005348:	ddec      	ble.n	8005324 <_dtoa_r+0x924>
 800534a:	2201      	movs	r2, #1
 800534c:	9901      	ldr	r1, [sp, #4]
 800534e:	4620      	mov	r0, r4
 8005350:	f000 fa84 	bl	800585c <__lshift>
 8005354:	4629      	mov	r1, r5
 8005356:	9001      	str	r0, [sp, #4]
 8005358:	f000 fad4 	bl	8005904 <__mcmp>
 800535c:	2800      	cmp	r0, #0
 800535e:	dc03      	bgt.n	8005368 <_dtoa_r+0x968>
 8005360:	d1e0      	bne.n	8005324 <_dtoa_r+0x924>
 8005362:	f018 0f01 	tst.w	r8, #1
 8005366:	d0dd      	beq.n	8005324 <_dtoa_r+0x924>
 8005368:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800536c:	d1d8      	bne.n	8005320 <_dtoa_r+0x920>
 800536e:	2339      	movs	r3, #57	; 0x39
 8005370:	f10a 0601 	add.w	r6, sl, #1
 8005374:	f88a 3000 	strb.w	r3, [sl]
 8005378:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800537c:	2b39      	cmp	r3, #57	; 0x39
 800537e:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8005382:	d04c      	beq.n	800541e <_dtoa_r+0xa1e>
 8005384:	3301      	adds	r3, #1
 8005386:	e051      	b.n	800542c <_dtoa_r+0xa2c>
 8005388:	2b00      	cmp	r3, #0
 800538a:	f10a 0601 	add.w	r6, sl, #1
 800538e:	dd05      	ble.n	800539c <_dtoa_r+0x99c>
 8005390:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005394:	d0eb      	beq.n	800536e <_dtoa_r+0x96e>
 8005396:	f108 0801 	add.w	r8, r8, #1
 800539a:	e7c5      	b.n	8005328 <_dtoa_r+0x928>
 800539c:	9b04      	ldr	r3, [sp, #16]
 800539e:	9a06      	ldr	r2, [sp, #24]
 80053a0:	f806 8c01 	strb.w	r8, [r6, #-1]
 80053a4:	1af3      	subs	r3, r6, r3
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d021      	beq.n	80053ee <_dtoa_r+0x9ee>
 80053aa:	2300      	movs	r3, #0
 80053ac:	220a      	movs	r2, #10
 80053ae:	9901      	ldr	r1, [sp, #4]
 80053b0:	4620      	mov	r0, r4
 80053b2:	f000 f8dd 	bl	8005570 <__multadd>
 80053b6:	45b9      	cmp	r9, r7
 80053b8:	9001      	str	r0, [sp, #4]
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	f04f 020a 	mov.w	r2, #10
 80053c2:	4649      	mov	r1, r9
 80053c4:	4620      	mov	r0, r4
 80053c6:	d105      	bne.n	80053d4 <_dtoa_r+0x9d4>
 80053c8:	f000 f8d2 	bl	8005570 <__multadd>
 80053cc:	4681      	mov	r9, r0
 80053ce:	4607      	mov	r7, r0
 80053d0:	46b2      	mov	sl, r6
 80053d2:	e779      	b.n	80052c8 <_dtoa_r+0x8c8>
 80053d4:	f000 f8cc 	bl	8005570 <__multadd>
 80053d8:	4639      	mov	r1, r7
 80053da:	4681      	mov	r9, r0
 80053dc:	2300      	movs	r3, #0
 80053de:	220a      	movs	r2, #10
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f8c5 	bl	8005570 <__multadd>
 80053e6:	4607      	mov	r7, r0
 80053e8:	e7f2      	b.n	80053d0 <_dtoa_r+0x9d0>
 80053ea:	f04f 0900 	mov.w	r9, #0
 80053ee:	2201      	movs	r2, #1
 80053f0:	9901      	ldr	r1, [sp, #4]
 80053f2:	4620      	mov	r0, r4
 80053f4:	f000 fa32 	bl	800585c <__lshift>
 80053f8:	4629      	mov	r1, r5
 80053fa:	9001      	str	r0, [sp, #4]
 80053fc:	f000 fa82 	bl	8005904 <__mcmp>
 8005400:	2800      	cmp	r0, #0
 8005402:	dcb9      	bgt.n	8005378 <_dtoa_r+0x978>
 8005404:	d102      	bne.n	800540c <_dtoa_r+0xa0c>
 8005406:	f018 0f01 	tst.w	r8, #1
 800540a:	d1b5      	bne.n	8005378 <_dtoa_r+0x978>
 800540c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005410:	2b30      	cmp	r3, #48	; 0x30
 8005412:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8005416:	f47f af11 	bne.w	800523c <_dtoa_r+0x83c>
 800541a:	4616      	mov	r6, r2
 800541c:	e7f6      	b.n	800540c <_dtoa_r+0xa0c>
 800541e:	9b04      	ldr	r3, [sp, #16]
 8005420:	4293      	cmp	r3, r2
 8005422:	d105      	bne.n	8005430 <_dtoa_r+0xa30>
 8005424:	9a04      	ldr	r2, [sp, #16]
 8005426:	f10b 0b01 	add.w	fp, fp, #1
 800542a:	2331      	movs	r3, #49	; 0x31
 800542c:	7013      	strb	r3, [r2, #0]
 800542e:	e705      	b.n	800523c <_dtoa_r+0x83c>
 8005430:	4616      	mov	r6, r2
 8005432:	e7a1      	b.n	8005378 <_dtoa_r+0x978>
 8005434:	4b16      	ldr	r3, [pc, #88]	; (8005490 <_dtoa_r+0xa90>)
 8005436:	f7ff bb48 	b.w	8004aca <_dtoa_r+0xca>
 800543a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800543c:	2b00      	cmp	r3, #0
 800543e:	f47f ab23 	bne.w	8004a88 <_dtoa_r+0x88>
 8005442:	4b14      	ldr	r3, [pc, #80]	; (8005494 <_dtoa_r+0xa94>)
 8005444:	f7ff bb41 	b.w	8004aca <_dtoa_r+0xca>
 8005448:	9b08      	ldr	r3, [sp, #32]
 800544a:	2b01      	cmp	r3, #1
 800544c:	f77f ae3b 	ble.w	80050c6 <_dtoa_r+0x6c6>
 8005450:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005454:	e64f      	b.n	80050f6 <_dtoa_r+0x6f6>
 8005456:	9b06      	ldr	r3, [sp, #24]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc03      	bgt.n	8005464 <_dtoa_r+0xa64>
 800545c:	9b08      	ldr	r3, [sp, #32]
 800545e:	2b02      	cmp	r3, #2
 8005460:	f73f aed7 	bgt.w	8005212 <_dtoa_r+0x812>
 8005464:	9e04      	ldr	r6, [sp, #16]
 8005466:	9801      	ldr	r0, [sp, #4]
 8005468:	4629      	mov	r1, r5
 800546a:	f7ff fa3d 	bl	80048e8 <quorem>
 800546e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005472:	f806 8b01 	strb.w	r8, [r6], #1
 8005476:	9b04      	ldr	r3, [sp, #16]
 8005478:	9a06      	ldr	r2, [sp, #24]
 800547a:	1af3      	subs	r3, r6, r3
 800547c:	429a      	cmp	r2, r3
 800547e:	ddb4      	ble.n	80053ea <_dtoa_r+0x9ea>
 8005480:	2300      	movs	r3, #0
 8005482:	220a      	movs	r2, #10
 8005484:	9901      	ldr	r1, [sp, #4]
 8005486:	4620      	mov	r0, r4
 8005488:	f000 f872 	bl	8005570 <__multadd>
 800548c:	9001      	str	r0, [sp, #4]
 800548e:	e7ea      	b.n	8005466 <_dtoa_r+0xa66>
 8005490:	08005fec 	.word	0x08005fec
 8005494:	08006010 	.word	0x08006010

08005498 <_localeconv_r>:
 8005498:	4b04      	ldr	r3, [pc, #16]	; (80054ac <_localeconv_r+0x14>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6a18      	ldr	r0, [r3, #32]
 800549e:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <_localeconv_r+0x18>)
 80054a0:	2800      	cmp	r0, #0
 80054a2:	bf08      	it	eq
 80054a4:	4618      	moveq	r0, r3
 80054a6:	30f0      	adds	r0, #240	; 0xf0
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	2000000c 	.word	0x2000000c
 80054b0:	20000070 	.word	0x20000070

080054b4 <malloc>:
 80054b4:	4b02      	ldr	r3, [pc, #8]	; (80054c0 <malloc+0xc>)
 80054b6:	4601      	mov	r1, r0
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	f000 bb45 	b.w	8005b48 <_malloc_r>
 80054be:	bf00      	nop
 80054c0:	2000000c 	.word	0x2000000c

080054c4 <memcpy>:
 80054c4:	b510      	push	{r4, lr}
 80054c6:	1e43      	subs	r3, r0, #1
 80054c8:	440a      	add	r2, r1
 80054ca:	4291      	cmp	r1, r2
 80054cc:	d100      	bne.n	80054d0 <memcpy+0xc>
 80054ce:	bd10      	pop	{r4, pc}
 80054d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054d8:	e7f7      	b.n	80054ca <memcpy+0x6>

080054da <_Balloc>:
 80054da:	b570      	push	{r4, r5, r6, lr}
 80054dc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80054de:	4604      	mov	r4, r0
 80054e0:	460e      	mov	r6, r1
 80054e2:	b93d      	cbnz	r5, 80054f4 <_Balloc+0x1a>
 80054e4:	2010      	movs	r0, #16
 80054e6:	f7ff ffe5 	bl	80054b4 <malloc>
 80054ea:	6260      	str	r0, [r4, #36]	; 0x24
 80054ec:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80054f0:	6005      	str	r5, [r0, #0]
 80054f2:	60c5      	str	r5, [r0, #12]
 80054f4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80054f6:	68eb      	ldr	r3, [r5, #12]
 80054f8:	b183      	cbz	r3, 800551c <_Balloc+0x42>
 80054fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005502:	b9b8      	cbnz	r0, 8005534 <_Balloc+0x5a>
 8005504:	2101      	movs	r1, #1
 8005506:	fa01 f506 	lsl.w	r5, r1, r6
 800550a:	1d6a      	adds	r2, r5, #5
 800550c:	0092      	lsls	r2, r2, #2
 800550e:	4620      	mov	r0, r4
 8005510:	f000 fabe 	bl	8005a90 <_calloc_r>
 8005514:	b160      	cbz	r0, 8005530 <_Balloc+0x56>
 8005516:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800551a:	e00e      	b.n	800553a <_Balloc+0x60>
 800551c:	2221      	movs	r2, #33	; 0x21
 800551e:	2104      	movs	r1, #4
 8005520:	4620      	mov	r0, r4
 8005522:	f000 fab5 	bl	8005a90 <_calloc_r>
 8005526:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005528:	60e8      	str	r0, [r5, #12]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e4      	bne.n	80054fa <_Balloc+0x20>
 8005530:	2000      	movs	r0, #0
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	6802      	ldr	r2, [r0, #0]
 8005536:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800553a:	2300      	movs	r3, #0
 800553c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005540:	e7f7      	b.n	8005532 <_Balloc+0x58>

08005542 <_Bfree>:
 8005542:	b570      	push	{r4, r5, r6, lr}
 8005544:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005546:	4606      	mov	r6, r0
 8005548:	460d      	mov	r5, r1
 800554a:	b93c      	cbnz	r4, 800555c <_Bfree+0x1a>
 800554c:	2010      	movs	r0, #16
 800554e:	f7ff ffb1 	bl	80054b4 <malloc>
 8005552:	6270      	str	r0, [r6, #36]	; 0x24
 8005554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005558:	6004      	str	r4, [r0, #0]
 800555a:	60c4      	str	r4, [r0, #12]
 800555c:	b13d      	cbz	r5, 800556e <_Bfree+0x2c>
 800555e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005560:	686a      	ldr	r2, [r5, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005568:	6029      	str	r1, [r5, #0]
 800556a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800556e:	bd70      	pop	{r4, r5, r6, pc}

08005570 <__multadd>:
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005574:	690d      	ldr	r5, [r1, #16]
 8005576:	461f      	mov	r7, r3
 8005578:	4606      	mov	r6, r0
 800557a:	460c      	mov	r4, r1
 800557c:	f101 0c14 	add.w	ip, r1, #20
 8005580:	2300      	movs	r3, #0
 8005582:	f8dc 0000 	ldr.w	r0, [ip]
 8005586:	b281      	uxth	r1, r0
 8005588:	fb02 7101 	mla	r1, r2, r1, r7
 800558c:	0c0f      	lsrs	r7, r1, #16
 800558e:	0c00      	lsrs	r0, r0, #16
 8005590:	fb02 7000 	mla	r0, r2, r0, r7
 8005594:	b289      	uxth	r1, r1
 8005596:	3301      	adds	r3, #1
 8005598:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800559c:	429d      	cmp	r5, r3
 800559e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80055a2:	f84c 1b04 	str.w	r1, [ip], #4
 80055a6:	dcec      	bgt.n	8005582 <__multadd+0x12>
 80055a8:	b1d7      	cbz	r7, 80055e0 <__multadd+0x70>
 80055aa:	68a3      	ldr	r3, [r4, #8]
 80055ac:	42ab      	cmp	r3, r5
 80055ae:	dc12      	bgt.n	80055d6 <__multadd+0x66>
 80055b0:	6861      	ldr	r1, [r4, #4]
 80055b2:	4630      	mov	r0, r6
 80055b4:	3101      	adds	r1, #1
 80055b6:	f7ff ff90 	bl	80054da <_Balloc>
 80055ba:	6922      	ldr	r2, [r4, #16]
 80055bc:	3202      	adds	r2, #2
 80055be:	f104 010c 	add.w	r1, r4, #12
 80055c2:	4680      	mov	r8, r0
 80055c4:	0092      	lsls	r2, r2, #2
 80055c6:	300c      	adds	r0, #12
 80055c8:	f7ff ff7c 	bl	80054c4 <memcpy>
 80055cc:	4621      	mov	r1, r4
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7ff ffb7 	bl	8005542 <_Bfree>
 80055d4:	4644      	mov	r4, r8
 80055d6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80055da:	3501      	adds	r5, #1
 80055dc:	615f      	str	r7, [r3, #20]
 80055de:	6125      	str	r5, [r4, #16]
 80055e0:	4620      	mov	r0, r4
 80055e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080055e6 <__hi0bits>:
 80055e6:	0c02      	lsrs	r2, r0, #16
 80055e8:	0412      	lsls	r2, r2, #16
 80055ea:	4603      	mov	r3, r0
 80055ec:	b9b2      	cbnz	r2, 800561c <__hi0bits+0x36>
 80055ee:	0403      	lsls	r3, r0, #16
 80055f0:	2010      	movs	r0, #16
 80055f2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80055f6:	bf04      	itt	eq
 80055f8:	021b      	lsleq	r3, r3, #8
 80055fa:	3008      	addeq	r0, #8
 80055fc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005600:	bf04      	itt	eq
 8005602:	011b      	lsleq	r3, r3, #4
 8005604:	3004      	addeq	r0, #4
 8005606:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800560a:	bf04      	itt	eq
 800560c:	009b      	lsleq	r3, r3, #2
 800560e:	3002      	addeq	r0, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	db06      	blt.n	8005622 <__hi0bits+0x3c>
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	d503      	bpl.n	8005620 <__hi0bits+0x3a>
 8005618:	3001      	adds	r0, #1
 800561a:	4770      	bx	lr
 800561c:	2000      	movs	r0, #0
 800561e:	e7e8      	b.n	80055f2 <__hi0bits+0xc>
 8005620:	2020      	movs	r0, #32
 8005622:	4770      	bx	lr

08005624 <__lo0bits>:
 8005624:	6803      	ldr	r3, [r0, #0]
 8005626:	f013 0207 	ands.w	r2, r3, #7
 800562a:	4601      	mov	r1, r0
 800562c:	d00b      	beq.n	8005646 <__lo0bits+0x22>
 800562e:	07da      	lsls	r2, r3, #31
 8005630:	d423      	bmi.n	800567a <__lo0bits+0x56>
 8005632:	0798      	lsls	r0, r3, #30
 8005634:	bf49      	itett	mi
 8005636:	085b      	lsrmi	r3, r3, #1
 8005638:	089b      	lsrpl	r3, r3, #2
 800563a:	2001      	movmi	r0, #1
 800563c:	600b      	strmi	r3, [r1, #0]
 800563e:	bf5c      	itt	pl
 8005640:	600b      	strpl	r3, [r1, #0]
 8005642:	2002      	movpl	r0, #2
 8005644:	4770      	bx	lr
 8005646:	b298      	uxth	r0, r3
 8005648:	b9a8      	cbnz	r0, 8005676 <__lo0bits+0x52>
 800564a:	0c1b      	lsrs	r3, r3, #16
 800564c:	2010      	movs	r0, #16
 800564e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005652:	bf04      	itt	eq
 8005654:	0a1b      	lsreq	r3, r3, #8
 8005656:	3008      	addeq	r0, #8
 8005658:	071a      	lsls	r2, r3, #28
 800565a:	bf04      	itt	eq
 800565c:	091b      	lsreq	r3, r3, #4
 800565e:	3004      	addeq	r0, #4
 8005660:	079a      	lsls	r2, r3, #30
 8005662:	bf04      	itt	eq
 8005664:	089b      	lsreq	r3, r3, #2
 8005666:	3002      	addeq	r0, #2
 8005668:	07da      	lsls	r2, r3, #31
 800566a:	d402      	bmi.n	8005672 <__lo0bits+0x4e>
 800566c:	085b      	lsrs	r3, r3, #1
 800566e:	d006      	beq.n	800567e <__lo0bits+0x5a>
 8005670:	3001      	adds	r0, #1
 8005672:	600b      	str	r3, [r1, #0]
 8005674:	4770      	bx	lr
 8005676:	4610      	mov	r0, r2
 8005678:	e7e9      	b.n	800564e <__lo0bits+0x2a>
 800567a:	2000      	movs	r0, #0
 800567c:	4770      	bx	lr
 800567e:	2020      	movs	r0, #32
 8005680:	4770      	bx	lr

08005682 <__i2b>:
 8005682:	b510      	push	{r4, lr}
 8005684:	460c      	mov	r4, r1
 8005686:	2101      	movs	r1, #1
 8005688:	f7ff ff27 	bl	80054da <_Balloc>
 800568c:	2201      	movs	r2, #1
 800568e:	6144      	str	r4, [r0, #20]
 8005690:	6102      	str	r2, [r0, #16]
 8005692:	bd10      	pop	{r4, pc}

08005694 <__multiply>:
 8005694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005698:	4614      	mov	r4, r2
 800569a:	690a      	ldr	r2, [r1, #16]
 800569c:	6923      	ldr	r3, [r4, #16]
 800569e:	429a      	cmp	r2, r3
 80056a0:	bfb8      	it	lt
 80056a2:	460b      	movlt	r3, r1
 80056a4:	4688      	mov	r8, r1
 80056a6:	bfbc      	itt	lt
 80056a8:	46a0      	movlt	r8, r4
 80056aa:	461c      	movlt	r4, r3
 80056ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80056b0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80056b4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80056b8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80056bc:	eb07 0609 	add.w	r6, r7, r9
 80056c0:	42b3      	cmp	r3, r6
 80056c2:	bfb8      	it	lt
 80056c4:	3101      	addlt	r1, #1
 80056c6:	f7ff ff08 	bl	80054da <_Balloc>
 80056ca:	f100 0514 	add.w	r5, r0, #20
 80056ce:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80056d2:	462b      	mov	r3, r5
 80056d4:	2200      	movs	r2, #0
 80056d6:	4573      	cmp	r3, lr
 80056d8:	d316      	bcc.n	8005708 <__multiply+0x74>
 80056da:	f104 0214 	add.w	r2, r4, #20
 80056de:	f108 0114 	add.w	r1, r8, #20
 80056e2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80056e6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80056ea:	9300      	str	r3, [sp, #0]
 80056ec:	9b00      	ldr	r3, [sp, #0]
 80056ee:	9201      	str	r2, [sp, #4]
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d80c      	bhi.n	800570e <__multiply+0x7a>
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	dd03      	ble.n	8005700 <__multiply+0x6c>
 80056f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d05d      	beq.n	80057bc <__multiply+0x128>
 8005700:	6106      	str	r6, [r0, #16]
 8005702:	b003      	add	sp, #12
 8005704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005708:	f843 2b04 	str.w	r2, [r3], #4
 800570c:	e7e3      	b.n	80056d6 <__multiply+0x42>
 800570e:	f8b2 b000 	ldrh.w	fp, [r2]
 8005712:	f1bb 0f00 	cmp.w	fp, #0
 8005716:	d023      	beq.n	8005760 <__multiply+0xcc>
 8005718:	4689      	mov	r9, r1
 800571a:	46ac      	mov	ip, r5
 800571c:	f04f 0800 	mov.w	r8, #0
 8005720:	f859 4b04 	ldr.w	r4, [r9], #4
 8005724:	f8dc a000 	ldr.w	sl, [ip]
 8005728:	b2a3      	uxth	r3, r4
 800572a:	fa1f fa8a 	uxth.w	sl, sl
 800572e:	fb0b a303 	mla	r3, fp, r3, sl
 8005732:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005736:	f8dc 4000 	ldr.w	r4, [ip]
 800573a:	4443      	add	r3, r8
 800573c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005740:	fb0b 840a 	mla	r4, fp, sl, r8
 8005744:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005748:	46e2      	mov	sl, ip
 800574a:	b29b      	uxth	r3, r3
 800574c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005750:	454f      	cmp	r7, r9
 8005752:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005756:	f84a 3b04 	str.w	r3, [sl], #4
 800575a:	d82b      	bhi.n	80057b4 <__multiply+0x120>
 800575c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005760:	9b01      	ldr	r3, [sp, #4]
 8005762:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005766:	3204      	adds	r2, #4
 8005768:	f1ba 0f00 	cmp.w	sl, #0
 800576c:	d020      	beq.n	80057b0 <__multiply+0x11c>
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	4689      	mov	r9, r1
 8005772:	46a8      	mov	r8, r5
 8005774:	f04f 0b00 	mov.w	fp, #0
 8005778:	f8b9 c000 	ldrh.w	ip, [r9]
 800577c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005780:	fb0a 440c 	mla	r4, sl, ip, r4
 8005784:	445c      	add	r4, fp
 8005786:	46c4      	mov	ip, r8
 8005788:	b29b      	uxth	r3, r3
 800578a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800578e:	f84c 3b04 	str.w	r3, [ip], #4
 8005792:	f859 3b04 	ldr.w	r3, [r9], #4
 8005796:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800579a:	0c1b      	lsrs	r3, r3, #16
 800579c:	fb0a b303 	mla	r3, sl, r3, fp
 80057a0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80057a4:	454f      	cmp	r7, r9
 80057a6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80057aa:	d805      	bhi.n	80057b8 <__multiply+0x124>
 80057ac:	f8c8 3004 	str.w	r3, [r8, #4]
 80057b0:	3504      	adds	r5, #4
 80057b2:	e79b      	b.n	80056ec <__multiply+0x58>
 80057b4:	46d4      	mov	ip, sl
 80057b6:	e7b3      	b.n	8005720 <__multiply+0x8c>
 80057b8:	46e0      	mov	r8, ip
 80057ba:	e7dd      	b.n	8005778 <__multiply+0xe4>
 80057bc:	3e01      	subs	r6, #1
 80057be:	e799      	b.n	80056f4 <__multiply+0x60>

080057c0 <__pow5mult>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4615      	mov	r5, r2
 80057c6:	f012 0203 	ands.w	r2, r2, #3
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	d007      	beq.n	80057e0 <__pow5mult+0x20>
 80057d0:	3a01      	subs	r2, #1
 80057d2:	4c21      	ldr	r4, [pc, #132]	; (8005858 <__pow5mult+0x98>)
 80057d4:	2300      	movs	r3, #0
 80057d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80057da:	f7ff fec9 	bl	8005570 <__multadd>
 80057de:	4607      	mov	r7, r0
 80057e0:	10ad      	asrs	r5, r5, #2
 80057e2:	d035      	beq.n	8005850 <__pow5mult+0x90>
 80057e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80057e6:	b93c      	cbnz	r4, 80057f8 <__pow5mult+0x38>
 80057e8:	2010      	movs	r0, #16
 80057ea:	f7ff fe63 	bl	80054b4 <malloc>
 80057ee:	6270      	str	r0, [r6, #36]	; 0x24
 80057f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80057f4:	6004      	str	r4, [r0, #0]
 80057f6:	60c4      	str	r4, [r0, #12]
 80057f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80057fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005800:	b94c      	cbnz	r4, 8005816 <__pow5mult+0x56>
 8005802:	f240 2171 	movw	r1, #625	; 0x271
 8005806:	4630      	mov	r0, r6
 8005808:	f7ff ff3b 	bl	8005682 <__i2b>
 800580c:	2300      	movs	r3, #0
 800580e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005812:	4604      	mov	r4, r0
 8005814:	6003      	str	r3, [r0, #0]
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	07eb      	lsls	r3, r5, #31
 800581c:	d50a      	bpl.n	8005834 <__pow5mult+0x74>
 800581e:	4639      	mov	r1, r7
 8005820:	4622      	mov	r2, r4
 8005822:	4630      	mov	r0, r6
 8005824:	f7ff ff36 	bl	8005694 <__multiply>
 8005828:	4639      	mov	r1, r7
 800582a:	4681      	mov	r9, r0
 800582c:	4630      	mov	r0, r6
 800582e:	f7ff fe88 	bl	8005542 <_Bfree>
 8005832:	464f      	mov	r7, r9
 8005834:	106d      	asrs	r5, r5, #1
 8005836:	d00b      	beq.n	8005850 <__pow5mult+0x90>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	b938      	cbnz	r0, 800584c <__pow5mult+0x8c>
 800583c:	4622      	mov	r2, r4
 800583e:	4621      	mov	r1, r4
 8005840:	4630      	mov	r0, r6
 8005842:	f7ff ff27 	bl	8005694 <__multiply>
 8005846:	6020      	str	r0, [r4, #0]
 8005848:	f8c0 8000 	str.w	r8, [r0]
 800584c:	4604      	mov	r4, r0
 800584e:	e7e4      	b.n	800581a <__pow5mult+0x5a>
 8005850:	4638      	mov	r0, r7
 8005852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005856:	bf00      	nop
 8005858:	08006110 	.word	0x08006110

0800585c <__lshift>:
 800585c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005860:	460c      	mov	r4, r1
 8005862:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005866:	6923      	ldr	r3, [r4, #16]
 8005868:	6849      	ldr	r1, [r1, #4]
 800586a:	eb0a 0903 	add.w	r9, sl, r3
 800586e:	68a3      	ldr	r3, [r4, #8]
 8005870:	4607      	mov	r7, r0
 8005872:	4616      	mov	r6, r2
 8005874:	f109 0501 	add.w	r5, r9, #1
 8005878:	42ab      	cmp	r3, r5
 800587a:	db32      	blt.n	80058e2 <__lshift+0x86>
 800587c:	4638      	mov	r0, r7
 800587e:	f7ff fe2c 	bl	80054da <_Balloc>
 8005882:	2300      	movs	r3, #0
 8005884:	4680      	mov	r8, r0
 8005886:	f100 0114 	add.w	r1, r0, #20
 800588a:	461a      	mov	r2, r3
 800588c:	4553      	cmp	r3, sl
 800588e:	db2b      	blt.n	80058e8 <__lshift+0x8c>
 8005890:	6920      	ldr	r0, [r4, #16]
 8005892:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005896:	f104 0314 	add.w	r3, r4, #20
 800589a:	f016 021f 	ands.w	r2, r6, #31
 800589e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80058a2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80058a6:	d025      	beq.n	80058f4 <__lshift+0x98>
 80058a8:	f1c2 0e20 	rsb	lr, r2, #32
 80058ac:	2000      	movs	r0, #0
 80058ae:	681e      	ldr	r6, [r3, #0]
 80058b0:	468a      	mov	sl, r1
 80058b2:	4096      	lsls	r6, r2
 80058b4:	4330      	orrs	r0, r6
 80058b6:	f84a 0b04 	str.w	r0, [sl], #4
 80058ba:	f853 0b04 	ldr.w	r0, [r3], #4
 80058be:	459c      	cmp	ip, r3
 80058c0:	fa20 f00e 	lsr.w	r0, r0, lr
 80058c4:	d814      	bhi.n	80058f0 <__lshift+0x94>
 80058c6:	6048      	str	r0, [r1, #4]
 80058c8:	b108      	cbz	r0, 80058ce <__lshift+0x72>
 80058ca:	f109 0502 	add.w	r5, r9, #2
 80058ce:	3d01      	subs	r5, #1
 80058d0:	4638      	mov	r0, r7
 80058d2:	f8c8 5010 	str.w	r5, [r8, #16]
 80058d6:	4621      	mov	r1, r4
 80058d8:	f7ff fe33 	bl	8005542 <_Bfree>
 80058dc:	4640      	mov	r0, r8
 80058de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058e2:	3101      	adds	r1, #1
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	e7c7      	b.n	8005878 <__lshift+0x1c>
 80058e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80058ec:	3301      	adds	r3, #1
 80058ee:	e7cd      	b.n	800588c <__lshift+0x30>
 80058f0:	4651      	mov	r1, sl
 80058f2:	e7dc      	b.n	80058ae <__lshift+0x52>
 80058f4:	3904      	subs	r1, #4
 80058f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fa:	f841 2f04 	str.w	r2, [r1, #4]!
 80058fe:	459c      	cmp	ip, r3
 8005900:	d8f9      	bhi.n	80058f6 <__lshift+0x9a>
 8005902:	e7e4      	b.n	80058ce <__lshift+0x72>

08005904 <__mcmp>:
 8005904:	6903      	ldr	r3, [r0, #16]
 8005906:	690a      	ldr	r2, [r1, #16]
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	b530      	push	{r4, r5, lr}
 800590c:	d10c      	bne.n	8005928 <__mcmp+0x24>
 800590e:	0092      	lsls	r2, r2, #2
 8005910:	3014      	adds	r0, #20
 8005912:	3114      	adds	r1, #20
 8005914:	1884      	adds	r4, r0, r2
 8005916:	4411      	add	r1, r2
 8005918:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800591c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005920:	4295      	cmp	r5, r2
 8005922:	d003      	beq.n	800592c <__mcmp+0x28>
 8005924:	d305      	bcc.n	8005932 <__mcmp+0x2e>
 8005926:	2301      	movs	r3, #1
 8005928:	4618      	mov	r0, r3
 800592a:	bd30      	pop	{r4, r5, pc}
 800592c:	42a0      	cmp	r0, r4
 800592e:	d3f3      	bcc.n	8005918 <__mcmp+0x14>
 8005930:	e7fa      	b.n	8005928 <__mcmp+0x24>
 8005932:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005936:	e7f7      	b.n	8005928 <__mcmp+0x24>

08005938 <__mdiff>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	460d      	mov	r5, r1
 800593e:	4607      	mov	r7, r0
 8005940:	4611      	mov	r1, r2
 8005942:	4628      	mov	r0, r5
 8005944:	4614      	mov	r4, r2
 8005946:	f7ff ffdd 	bl	8005904 <__mcmp>
 800594a:	1e06      	subs	r6, r0, #0
 800594c:	d108      	bne.n	8005960 <__mdiff+0x28>
 800594e:	4631      	mov	r1, r6
 8005950:	4638      	mov	r0, r7
 8005952:	f7ff fdc2 	bl	80054da <_Balloc>
 8005956:	2301      	movs	r3, #1
 8005958:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800595c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005960:	bfa4      	itt	ge
 8005962:	4623      	movge	r3, r4
 8005964:	462c      	movge	r4, r5
 8005966:	4638      	mov	r0, r7
 8005968:	6861      	ldr	r1, [r4, #4]
 800596a:	bfa6      	itte	ge
 800596c:	461d      	movge	r5, r3
 800596e:	2600      	movge	r6, #0
 8005970:	2601      	movlt	r6, #1
 8005972:	f7ff fdb2 	bl	80054da <_Balloc>
 8005976:	692b      	ldr	r3, [r5, #16]
 8005978:	60c6      	str	r6, [r0, #12]
 800597a:	6926      	ldr	r6, [r4, #16]
 800597c:	f105 0914 	add.w	r9, r5, #20
 8005980:	f104 0214 	add.w	r2, r4, #20
 8005984:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005988:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800598c:	f100 0514 	add.w	r5, r0, #20
 8005990:	f04f 0e00 	mov.w	lr, #0
 8005994:	f852 ab04 	ldr.w	sl, [r2], #4
 8005998:	f859 4b04 	ldr.w	r4, [r9], #4
 800599c:	fa1e f18a 	uxtah	r1, lr, sl
 80059a0:	b2a3      	uxth	r3, r4
 80059a2:	1ac9      	subs	r1, r1, r3
 80059a4:	0c23      	lsrs	r3, r4, #16
 80059a6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80059aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80059ae:	b289      	uxth	r1, r1
 80059b0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80059b4:	45c8      	cmp	r8, r9
 80059b6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80059ba:	4694      	mov	ip, r2
 80059bc:	f845 3b04 	str.w	r3, [r5], #4
 80059c0:	d8e8      	bhi.n	8005994 <__mdiff+0x5c>
 80059c2:	45bc      	cmp	ip, r7
 80059c4:	d304      	bcc.n	80059d0 <__mdiff+0x98>
 80059c6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80059ca:	b183      	cbz	r3, 80059ee <__mdiff+0xb6>
 80059cc:	6106      	str	r6, [r0, #16]
 80059ce:	e7c5      	b.n	800595c <__mdiff+0x24>
 80059d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80059d4:	fa1e f381 	uxtah	r3, lr, r1
 80059d8:	141a      	asrs	r2, r3, #16
 80059da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80059de:	b29b      	uxth	r3, r3
 80059e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059e4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80059e8:	f845 3b04 	str.w	r3, [r5], #4
 80059ec:	e7e9      	b.n	80059c2 <__mdiff+0x8a>
 80059ee:	3e01      	subs	r6, #1
 80059f0:	e7e9      	b.n	80059c6 <__mdiff+0x8e>

080059f2 <__d2b>:
 80059f2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80059f6:	460e      	mov	r6, r1
 80059f8:	2101      	movs	r1, #1
 80059fa:	ec59 8b10 	vmov	r8, r9, d0
 80059fe:	4615      	mov	r5, r2
 8005a00:	f7ff fd6b 	bl	80054da <_Balloc>
 8005a04:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005a08:	4607      	mov	r7, r0
 8005a0a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005a0e:	bb34      	cbnz	r4, 8005a5e <__d2b+0x6c>
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	f1b8 0300 	subs.w	r3, r8, #0
 8005a16:	d027      	beq.n	8005a68 <__d2b+0x76>
 8005a18:	a802      	add	r0, sp, #8
 8005a1a:	f840 3d08 	str.w	r3, [r0, #-8]!
 8005a1e:	f7ff fe01 	bl	8005624 <__lo0bits>
 8005a22:	9900      	ldr	r1, [sp, #0]
 8005a24:	b1f0      	cbz	r0, 8005a64 <__d2b+0x72>
 8005a26:	9a01      	ldr	r2, [sp, #4]
 8005a28:	f1c0 0320 	rsb	r3, r0, #32
 8005a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a30:	430b      	orrs	r3, r1
 8005a32:	40c2      	lsrs	r2, r0
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	9201      	str	r2, [sp, #4]
 8005a38:	9b01      	ldr	r3, [sp, #4]
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bf14      	ite	ne
 8005a40:	2102      	movne	r1, #2
 8005a42:	2101      	moveq	r1, #1
 8005a44:	6139      	str	r1, [r7, #16]
 8005a46:	b1c4      	cbz	r4, 8005a7a <__d2b+0x88>
 8005a48:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a4c:	4404      	add	r4, r0
 8005a4e:	6034      	str	r4, [r6, #0]
 8005a50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a54:	6028      	str	r0, [r5, #0]
 8005a56:	4638      	mov	r0, r7
 8005a58:	b003      	add	sp, #12
 8005a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a62:	e7d5      	b.n	8005a10 <__d2b+0x1e>
 8005a64:	6179      	str	r1, [r7, #20]
 8005a66:	e7e7      	b.n	8005a38 <__d2b+0x46>
 8005a68:	a801      	add	r0, sp, #4
 8005a6a:	f7ff fddb 	bl	8005624 <__lo0bits>
 8005a6e:	9b01      	ldr	r3, [sp, #4]
 8005a70:	617b      	str	r3, [r7, #20]
 8005a72:	2101      	movs	r1, #1
 8005a74:	6139      	str	r1, [r7, #16]
 8005a76:	3020      	adds	r0, #32
 8005a78:	e7e5      	b.n	8005a46 <__d2b+0x54>
 8005a7a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005a7e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005a82:	6030      	str	r0, [r6, #0]
 8005a84:	6918      	ldr	r0, [r3, #16]
 8005a86:	f7ff fdae 	bl	80055e6 <__hi0bits>
 8005a8a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005a8e:	e7e1      	b.n	8005a54 <__d2b+0x62>

08005a90 <_calloc_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	fb02 f401 	mul.w	r4, r2, r1
 8005a96:	4621      	mov	r1, r4
 8005a98:	f000 f856 	bl	8005b48 <_malloc_r>
 8005a9c:	4605      	mov	r5, r0
 8005a9e:	b118      	cbz	r0, 8005aa8 <_calloc_r+0x18>
 8005aa0:	4622      	mov	r2, r4
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	f7fe fabc 	bl	8004020 <memset>
 8005aa8:	4628      	mov	r0, r5
 8005aaa:	bd38      	pop	{r3, r4, r5, pc}

08005aac <_free_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	4605      	mov	r5, r0
 8005ab0:	2900      	cmp	r1, #0
 8005ab2:	d045      	beq.n	8005b40 <_free_r+0x94>
 8005ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ab8:	1f0c      	subs	r4, r1, #4
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	bfb8      	it	lt
 8005abe:	18e4      	addlt	r4, r4, r3
 8005ac0:	f000 fa29 	bl	8005f16 <__malloc_lock>
 8005ac4:	4a1f      	ldr	r2, [pc, #124]	; (8005b44 <_free_r+0x98>)
 8005ac6:	6813      	ldr	r3, [r2, #0]
 8005ac8:	4610      	mov	r0, r2
 8005aca:	b933      	cbnz	r3, 8005ada <_free_r+0x2e>
 8005acc:	6063      	str	r3, [r4, #4]
 8005ace:	6014      	str	r4, [r2, #0]
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ad6:	f000 ba1f 	b.w	8005f18 <__malloc_unlock>
 8005ada:	42a3      	cmp	r3, r4
 8005adc:	d90c      	bls.n	8005af8 <_free_r+0x4c>
 8005ade:	6821      	ldr	r1, [r4, #0]
 8005ae0:	1862      	adds	r2, r4, r1
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	bf04      	itt	eq
 8005ae6:	681a      	ldreq	r2, [r3, #0]
 8005ae8:	685b      	ldreq	r3, [r3, #4]
 8005aea:	6063      	str	r3, [r4, #4]
 8005aec:	bf04      	itt	eq
 8005aee:	1852      	addeq	r2, r2, r1
 8005af0:	6022      	streq	r2, [r4, #0]
 8005af2:	6004      	str	r4, [r0, #0]
 8005af4:	e7ec      	b.n	8005ad0 <_free_r+0x24>
 8005af6:	4613      	mov	r3, r2
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	b10a      	cbz	r2, 8005b00 <_free_r+0x54>
 8005afc:	42a2      	cmp	r2, r4
 8005afe:	d9fa      	bls.n	8005af6 <_free_r+0x4a>
 8005b00:	6819      	ldr	r1, [r3, #0]
 8005b02:	1858      	adds	r0, r3, r1
 8005b04:	42a0      	cmp	r0, r4
 8005b06:	d10b      	bne.n	8005b20 <_free_r+0x74>
 8005b08:	6820      	ldr	r0, [r4, #0]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	1858      	adds	r0, r3, r1
 8005b0e:	4282      	cmp	r2, r0
 8005b10:	6019      	str	r1, [r3, #0]
 8005b12:	d1dd      	bne.n	8005ad0 <_free_r+0x24>
 8005b14:	6810      	ldr	r0, [r2, #0]
 8005b16:	6852      	ldr	r2, [r2, #4]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	4401      	add	r1, r0
 8005b1c:	6019      	str	r1, [r3, #0]
 8005b1e:	e7d7      	b.n	8005ad0 <_free_r+0x24>
 8005b20:	d902      	bls.n	8005b28 <_free_r+0x7c>
 8005b22:	230c      	movs	r3, #12
 8005b24:	602b      	str	r3, [r5, #0]
 8005b26:	e7d3      	b.n	8005ad0 <_free_r+0x24>
 8005b28:	6820      	ldr	r0, [r4, #0]
 8005b2a:	1821      	adds	r1, r4, r0
 8005b2c:	428a      	cmp	r2, r1
 8005b2e:	bf04      	itt	eq
 8005b30:	6811      	ldreq	r1, [r2, #0]
 8005b32:	6852      	ldreq	r2, [r2, #4]
 8005b34:	6062      	str	r2, [r4, #4]
 8005b36:	bf04      	itt	eq
 8005b38:	1809      	addeq	r1, r1, r0
 8005b3a:	6021      	streq	r1, [r4, #0]
 8005b3c:	605c      	str	r4, [r3, #4]
 8005b3e:	e7c7      	b.n	8005ad0 <_free_r+0x24>
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	200001fc 	.word	0x200001fc

08005b48 <_malloc_r>:
 8005b48:	b570      	push	{r4, r5, r6, lr}
 8005b4a:	1ccd      	adds	r5, r1, #3
 8005b4c:	f025 0503 	bic.w	r5, r5, #3
 8005b50:	3508      	adds	r5, #8
 8005b52:	2d0c      	cmp	r5, #12
 8005b54:	bf38      	it	cc
 8005b56:	250c      	movcc	r5, #12
 8005b58:	2d00      	cmp	r5, #0
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	db01      	blt.n	8005b62 <_malloc_r+0x1a>
 8005b5e:	42a9      	cmp	r1, r5
 8005b60:	d903      	bls.n	8005b6a <_malloc_r+0x22>
 8005b62:	230c      	movs	r3, #12
 8005b64:	6033      	str	r3, [r6, #0]
 8005b66:	2000      	movs	r0, #0
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	f000 f9d4 	bl	8005f16 <__malloc_lock>
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <_malloc_r+0xac>)
 8005b70:	6814      	ldr	r4, [r2, #0]
 8005b72:	4621      	mov	r1, r4
 8005b74:	b991      	cbnz	r1, 8005b9c <_malloc_r+0x54>
 8005b76:	4c20      	ldr	r4, [pc, #128]	; (8005bf8 <_malloc_r+0xb0>)
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	b91b      	cbnz	r3, 8005b84 <_malloc_r+0x3c>
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	f000 f98f 	bl	8005ea0 <_sbrk_r>
 8005b82:	6020      	str	r0, [r4, #0]
 8005b84:	4629      	mov	r1, r5
 8005b86:	4630      	mov	r0, r6
 8005b88:	f000 f98a 	bl	8005ea0 <_sbrk_r>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d124      	bne.n	8005bda <_malloc_r+0x92>
 8005b90:	230c      	movs	r3, #12
 8005b92:	6033      	str	r3, [r6, #0]
 8005b94:	4630      	mov	r0, r6
 8005b96:	f000 f9bf 	bl	8005f18 <__malloc_unlock>
 8005b9a:	e7e4      	b.n	8005b66 <_malloc_r+0x1e>
 8005b9c:	680b      	ldr	r3, [r1, #0]
 8005b9e:	1b5b      	subs	r3, r3, r5
 8005ba0:	d418      	bmi.n	8005bd4 <_malloc_r+0x8c>
 8005ba2:	2b0b      	cmp	r3, #11
 8005ba4:	d90f      	bls.n	8005bc6 <_malloc_r+0x7e>
 8005ba6:	600b      	str	r3, [r1, #0]
 8005ba8:	50cd      	str	r5, [r1, r3]
 8005baa:	18cc      	adds	r4, r1, r3
 8005bac:	4630      	mov	r0, r6
 8005bae:	f000 f9b3 	bl	8005f18 <__malloc_unlock>
 8005bb2:	f104 000b 	add.w	r0, r4, #11
 8005bb6:	1d23      	adds	r3, r4, #4
 8005bb8:	f020 0007 	bic.w	r0, r0, #7
 8005bbc:	1ac3      	subs	r3, r0, r3
 8005bbe:	d0d3      	beq.n	8005b68 <_malloc_r+0x20>
 8005bc0:	425a      	negs	r2, r3
 8005bc2:	50e2      	str	r2, [r4, r3]
 8005bc4:	e7d0      	b.n	8005b68 <_malloc_r+0x20>
 8005bc6:	428c      	cmp	r4, r1
 8005bc8:	684b      	ldr	r3, [r1, #4]
 8005bca:	bf16      	itet	ne
 8005bcc:	6063      	strne	r3, [r4, #4]
 8005bce:	6013      	streq	r3, [r2, #0]
 8005bd0:	460c      	movne	r4, r1
 8005bd2:	e7eb      	b.n	8005bac <_malloc_r+0x64>
 8005bd4:	460c      	mov	r4, r1
 8005bd6:	6849      	ldr	r1, [r1, #4]
 8005bd8:	e7cc      	b.n	8005b74 <_malloc_r+0x2c>
 8005bda:	1cc4      	adds	r4, r0, #3
 8005bdc:	f024 0403 	bic.w	r4, r4, #3
 8005be0:	42a0      	cmp	r0, r4
 8005be2:	d005      	beq.n	8005bf0 <_malloc_r+0xa8>
 8005be4:	1a21      	subs	r1, r4, r0
 8005be6:	4630      	mov	r0, r6
 8005be8:	f000 f95a 	bl	8005ea0 <_sbrk_r>
 8005bec:	3001      	adds	r0, #1
 8005bee:	d0cf      	beq.n	8005b90 <_malloc_r+0x48>
 8005bf0:	6025      	str	r5, [r4, #0]
 8005bf2:	e7db      	b.n	8005bac <_malloc_r+0x64>
 8005bf4:	200001fc 	.word	0x200001fc
 8005bf8:	20000200 	.word	0x20000200

08005bfc <__ssputs_r>:
 8005bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c00:	688e      	ldr	r6, [r1, #8]
 8005c02:	429e      	cmp	r6, r3
 8005c04:	4682      	mov	sl, r0
 8005c06:	460c      	mov	r4, r1
 8005c08:	4690      	mov	r8, r2
 8005c0a:	4699      	mov	r9, r3
 8005c0c:	d837      	bhi.n	8005c7e <__ssputs_r+0x82>
 8005c0e:	898a      	ldrh	r2, [r1, #12]
 8005c10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c14:	d031      	beq.n	8005c7a <__ssputs_r+0x7e>
 8005c16:	6825      	ldr	r5, [r4, #0]
 8005c18:	6909      	ldr	r1, [r1, #16]
 8005c1a:	1a6f      	subs	r7, r5, r1
 8005c1c:	6965      	ldr	r5, [r4, #20]
 8005c1e:	2302      	movs	r3, #2
 8005c20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c24:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c28:	f109 0301 	add.w	r3, r9, #1
 8005c2c:	443b      	add	r3, r7
 8005c2e:	429d      	cmp	r5, r3
 8005c30:	bf38      	it	cc
 8005c32:	461d      	movcc	r5, r3
 8005c34:	0553      	lsls	r3, r2, #21
 8005c36:	d530      	bpl.n	8005c9a <__ssputs_r+0x9e>
 8005c38:	4629      	mov	r1, r5
 8005c3a:	f7ff ff85 	bl	8005b48 <_malloc_r>
 8005c3e:	4606      	mov	r6, r0
 8005c40:	b950      	cbnz	r0, 8005c58 <__ssputs_r+0x5c>
 8005c42:	230c      	movs	r3, #12
 8005c44:	f8ca 3000 	str.w	r3, [sl]
 8005c48:	89a3      	ldrh	r3, [r4, #12]
 8005c4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c58:	463a      	mov	r2, r7
 8005c5a:	6921      	ldr	r1, [r4, #16]
 8005c5c:	f7ff fc32 	bl	80054c4 <memcpy>
 8005c60:	89a3      	ldrh	r3, [r4, #12]
 8005c62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6a:	81a3      	strh	r3, [r4, #12]
 8005c6c:	6126      	str	r6, [r4, #16]
 8005c6e:	6165      	str	r5, [r4, #20]
 8005c70:	443e      	add	r6, r7
 8005c72:	1bed      	subs	r5, r5, r7
 8005c74:	6026      	str	r6, [r4, #0]
 8005c76:	60a5      	str	r5, [r4, #8]
 8005c78:	464e      	mov	r6, r9
 8005c7a:	454e      	cmp	r6, r9
 8005c7c:	d900      	bls.n	8005c80 <__ssputs_r+0x84>
 8005c7e:	464e      	mov	r6, r9
 8005c80:	4632      	mov	r2, r6
 8005c82:	4641      	mov	r1, r8
 8005c84:	6820      	ldr	r0, [r4, #0]
 8005c86:	f000 f92d 	bl	8005ee4 <memmove>
 8005c8a:	68a3      	ldr	r3, [r4, #8]
 8005c8c:	1b9b      	subs	r3, r3, r6
 8005c8e:	60a3      	str	r3, [r4, #8]
 8005c90:	6823      	ldr	r3, [r4, #0]
 8005c92:	441e      	add	r6, r3
 8005c94:	6026      	str	r6, [r4, #0]
 8005c96:	2000      	movs	r0, #0
 8005c98:	e7dc      	b.n	8005c54 <__ssputs_r+0x58>
 8005c9a:	462a      	mov	r2, r5
 8005c9c:	f000 f93d 	bl	8005f1a <_realloc_r>
 8005ca0:	4606      	mov	r6, r0
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	d1e2      	bne.n	8005c6c <__ssputs_r+0x70>
 8005ca6:	6921      	ldr	r1, [r4, #16]
 8005ca8:	4650      	mov	r0, sl
 8005caa:	f7ff feff 	bl	8005aac <_free_r>
 8005cae:	e7c8      	b.n	8005c42 <__ssputs_r+0x46>

08005cb0 <_svfiprintf_r>:
 8005cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb4:	461d      	mov	r5, r3
 8005cb6:	898b      	ldrh	r3, [r1, #12]
 8005cb8:	061f      	lsls	r7, r3, #24
 8005cba:	b09d      	sub	sp, #116	; 0x74
 8005cbc:	4680      	mov	r8, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	4616      	mov	r6, r2
 8005cc2:	d50f      	bpl.n	8005ce4 <_svfiprintf_r+0x34>
 8005cc4:	690b      	ldr	r3, [r1, #16]
 8005cc6:	b96b      	cbnz	r3, 8005ce4 <_svfiprintf_r+0x34>
 8005cc8:	2140      	movs	r1, #64	; 0x40
 8005cca:	f7ff ff3d 	bl	8005b48 <_malloc_r>
 8005cce:	6020      	str	r0, [r4, #0]
 8005cd0:	6120      	str	r0, [r4, #16]
 8005cd2:	b928      	cbnz	r0, 8005ce0 <_svfiprintf_r+0x30>
 8005cd4:	230c      	movs	r3, #12
 8005cd6:	f8c8 3000 	str.w	r3, [r8]
 8005cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cde:	e0c8      	b.n	8005e72 <_svfiprintf_r+0x1c2>
 8005ce0:	2340      	movs	r3, #64	; 0x40
 8005ce2:	6163      	str	r3, [r4, #20]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ce8:	2320      	movs	r3, #32
 8005cea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005cee:	2330      	movs	r3, #48	; 0x30
 8005cf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005cf4:	9503      	str	r5, [sp, #12]
 8005cf6:	f04f 0b01 	mov.w	fp, #1
 8005cfa:	4637      	mov	r7, r6
 8005cfc:	463d      	mov	r5, r7
 8005cfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d02:	b10b      	cbz	r3, 8005d08 <_svfiprintf_r+0x58>
 8005d04:	2b25      	cmp	r3, #37	; 0x25
 8005d06:	d13e      	bne.n	8005d86 <_svfiprintf_r+0xd6>
 8005d08:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d0c:	d00b      	beq.n	8005d26 <_svfiprintf_r+0x76>
 8005d0e:	4653      	mov	r3, sl
 8005d10:	4632      	mov	r2, r6
 8005d12:	4621      	mov	r1, r4
 8005d14:	4640      	mov	r0, r8
 8005d16:	f7ff ff71 	bl	8005bfc <__ssputs_r>
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	f000 80a4 	beq.w	8005e68 <_svfiprintf_r+0x1b8>
 8005d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d22:	4453      	add	r3, sl
 8005d24:	9309      	str	r3, [sp, #36]	; 0x24
 8005d26:	783b      	ldrb	r3, [r7, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f000 809d 	beq.w	8005e68 <_svfiprintf_r+0x1b8>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d38:	9304      	str	r3, [sp, #16]
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d40:	931a      	str	r3, [sp, #104]	; 0x68
 8005d42:	462f      	mov	r7, r5
 8005d44:	2205      	movs	r2, #5
 8005d46:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005d4a:	4850      	ldr	r0, [pc, #320]	; (8005e8c <_svfiprintf_r+0x1dc>)
 8005d4c:	f7fa fa80 	bl	8000250 <memchr>
 8005d50:	9b04      	ldr	r3, [sp, #16]
 8005d52:	b9d0      	cbnz	r0, 8005d8a <_svfiprintf_r+0xda>
 8005d54:	06d9      	lsls	r1, r3, #27
 8005d56:	bf44      	itt	mi
 8005d58:	2220      	movmi	r2, #32
 8005d5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d5e:	071a      	lsls	r2, r3, #28
 8005d60:	bf44      	itt	mi
 8005d62:	222b      	movmi	r2, #43	; 0x2b
 8005d64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005d68:	782a      	ldrb	r2, [r5, #0]
 8005d6a:	2a2a      	cmp	r2, #42	; 0x2a
 8005d6c:	d015      	beq.n	8005d9a <_svfiprintf_r+0xea>
 8005d6e:	9a07      	ldr	r2, [sp, #28]
 8005d70:	462f      	mov	r7, r5
 8005d72:	2000      	movs	r0, #0
 8005d74:	250a      	movs	r5, #10
 8005d76:	4639      	mov	r1, r7
 8005d78:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d7c:	3b30      	subs	r3, #48	; 0x30
 8005d7e:	2b09      	cmp	r3, #9
 8005d80:	d94d      	bls.n	8005e1e <_svfiprintf_r+0x16e>
 8005d82:	b1b8      	cbz	r0, 8005db4 <_svfiprintf_r+0x104>
 8005d84:	e00f      	b.n	8005da6 <_svfiprintf_r+0xf6>
 8005d86:	462f      	mov	r7, r5
 8005d88:	e7b8      	b.n	8005cfc <_svfiprintf_r+0x4c>
 8005d8a:	4a40      	ldr	r2, [pc, #256]	; (8005e8c <_svfiprintf_r+0x1dc>)
 8005d8c:	1a80      	subs	r0, r0, r2
 8005d8e:	fa0b f000 	lsl.w	r0, fp, r0
 8005d92:	4318      	orrs	r0, r3
 8005d94:	9004      	str	r0, [sp, #16]
 8005d96:	463d      	mov	r5, r7
 8005d98:	e7d3      	b.n	8005d42 <_svfiprintf_r+0x92>
 8005d9a:	9a03      	ldr	r2, [sp, #12]
 8005d9c:	1d11      	adds	r1, r2, #4
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	9103      	str	r1, [sp, #12]
 8005da2:	2a00      	cmp	r2, #0
 8005da4:	db01      	blt.n	8005daa <_svfiprintf_r+0xfa>
 8005da6:	9207      	str	r2, [sp, #28]
 8005da8:	e004      	b.n	8005db4 <_svfiprintf_r+0x104>
 8005daa:	4252      	negs	r2, r2
 8005dac:	f043 0302 	orr.w	r3, r3, #2
 8005db0:	9207      	str	r2, [sp, #28]
 8005db2:	9304      	str	r3, [sp, #16]
 8005db4:	783b      	ldrb	r3, [r7, #0]
 8005db6:	2b2e      	cmp	r3, #46	; 0x2e
 8005db8:	d10c      	bne.n	8005dd4 <_svfiprintf_r+0x124>
 8005dba:	787b      	ldrb	r3, [r7, #1]
 8005dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8005dbe:	d133      	bne.n	8005e28 <_svfiprintf_r+0x178>
 8005dc0:	9b03      	ldr	r3, [sp, #12]
 8005dc2:	1d1a      	adds	r2, r3, #4
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	9203      	str	r2, [sp, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	bfb8      	it	lt
 8005dcc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005dd0:	3702      	adds	r7, #2
 8005dd2:	9305      	str	r3, [sp, #20]
 8005dd4:	4d2e      	ldr	r5, [pc, #184]	; (8005e90 <_svfiprintf_r+0x1e0>)
 8005dd6:	7839      	ldrb	r1, [r7, #0]
 8005dd8:	2203      	movs	r2, #3
 8005dda:	4628      	mov	r0, r5
 8005ddc:	f7fa fa38 	bl	8000250 <memchr>
 8005de0:	b138      	cbz	r0, 8005df2 <_svfiprintf_r+0x142>
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	1b40      	subs	r0, r0, r5
 8005de6:	fa03 f000 	lsl.w	r0, r3, r0
 8005dea:	9b04      	ldr	r3, [sp, #16]
 8005dec:	4303      	orrs	r3, r0
 8005dee:	3701      	adds	r7, #1
 8005df0:	9304      	str	r3, [sp, #16]
 8005df2:	7839      	ldrb	r1, [r7, #0]
 8005df4:	4827      	ldr	r0, [pc, #156]	; (8005e94 <_svfiprintf_r+0x1e4>)
 8005df6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005dfa:	2206      	movs	r2, #6
 8005dfc:	1c7e      	adds	r6, r7, #1
 8005dfe:	f7fa fa27 	bl	8000250 <memchr>
 8005e02:	2800      	cmp	r0, #0
 8005e04:	d038      	beq.n	8005e78 <_svfiprintf_r+0x1c8>
 8005e06:	4b24      	ldr	r3, [pc, #144]	; (8005e98 <_svfiprintf_r+0x1e8>)
 8005e08:	bb13      	cbnz	r3, 8005e50 <_svfiprintf_r+0x1a0>
 8005e0a:	9b03      	ldr	r3, [sp, #12]
 8005e0c:	3307      	adds	r3, #7
 8005e0e:	f023 0307 	bic.w	r3, r3, #7
 8005e12:	3308      	adds	r3, #8
 8005e14:	9303      	str	r3, [sp, #12]
 8005e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e18:	444b      	add	r3, r9
 8005e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8005e1c:	e76d      	b.n	8005cfa <_svfiprintf_r+0x4a>
 8005e1e:	fb05 3202 	mla	r2, r5, r2, r3
 8005e22:	2001      	movs	r0, #1
 8005e24:	460f      	mov	r7, r1
 8005e26:	e7a6      	b.n	8005d76 <_svfiprintf_r+0xc6>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	3701      	adds	r7, #1
 8005e2c:	9305      	str	r3, [sp, #20]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	250a      	movs	r5, #10
 8005e32:	4638      	mov	r0, r7
 8005e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e38:	3a30      	subs	r2, #48	; 0x30
 8005e3a:	2a09      	cmp	r2, #9
 8005e3c:	d903      	bls.n	8005e46 <_svfiprintf_r+0x196>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d0c8      	beq.n	8005dd4 <_svfiprintf_r+0x124>
 8005e42:	9105      	str	r1, [sp, #20]
 8005e44:	e7c6      	b.n	8005dd4 <_svfiprintf_r+0x124>
 8005e46:	fb05 2101 	mla	r1, r5, r1, r2
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	e7f0      	b.n	8005e32 <_svfiprintf_r+0x182>
 8005e50:	ab03      	add	r3, sp, #12
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4622      	mov	r2, r4
 8005e56:	4b11      	ldr	r3, [pc, #68]	; (8005e9c <_svfiprintf_r+0x1ec>)
 8005e58:	a904      	add	r1, sp, #16
 8005e5a:	4640      	mov	r0, r8
 8005e5c:	f7fe f970 	bl	8004140 <_printf_float>
 8005e60:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8005e64:	4681      	mov	r9, r0
 8005e66:	d1d6      	bne.n	8005e16 <_svfiprintf_r+0x166>
 8005e68:	89a3      	ldrh	r3, [r4, #12]
 8005e6a:	065b      	lsls	r3, r3, #25
 8005e6c:	f53f af35 	bmi.w	8005cda <_svfiprintf_r+0x2a>
 8005e70:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e72:	b01d      	add	sp, #116	; 0x74
 8005e74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e78:	ab03      	add	r3, sp, #12
 8005e7a:	9300      	str	r3, [sp, #0]
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4b07      	ldr	r3, [pc, #28]	; (8005e9c <_svfiprintf_r+0x1ec>)
 8005e80:	a904      	add	r1, sp, #16
 8005e82:	4640      	mov	r0, r8
 8005e84:	f7fe fbfe 	bl	8004684 <_printf_i>
 8005e88:	e7ea      	b.n	8005e60 <_svfiprintf_r+0x1b0>
 8005e8a:	bf00      	nop
 8005e8c:	0800611c 	.word	0x0800611c
 8005e90:	08006122 	.word	0x08006122
 8005e94:	08006126 	.word	0x08006126
 8005e98:	08004141 	.word	0x08004141
 8005e9c:	08005bfd 	.word	0x08005bfd

08005ea0 <_sbrk_r>:
 8005ea0:	b538      	push	{r3, r4, r5, lr}
 8005ea2:	4c06      	ldr	r4, [pc, #24]	; (8005ebc <_sbrk_r+0x1c>)
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	4605      	mov	r5, r0
 8005ea8:	4608      	mov	r0, r1
 8005eaa:	6023      	str	r3, [r4, #0]
 8005eac:	f7fa fef6 	bl	8000c9c <_sbrk>
 8005eb0:	1c43      	adds	r3, r0, #1
 8005eb2:	d102      	bne.n	8005eba <_sbrk_r+0x1a>
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	b103      	cbz	r3, 8005eba <_sbrk_r+0x1a>
 8005eb8:	602b      	str	r3, [r5, #0]
 8005eba:	bd38      	pop	{r3, r4, r5, pc}
 8005ebc:	20008030 	.word	0x20008030

08005ec0 <__ascii_mbtowc>:
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	b901      	cbnz	r1, 8005ec6 <__ascii_mbtowc+0x6>
 8005ec4:	a901      	add	r1, sp, #4
 8005ec6:	b142      	cbz	r2, 8005eda <__ascii_mbtowc+0x1a>
 8005ec8:	b14b      	cbz	r3, 8005ede <__ascii_mbtowc+0x1e>
 8005eca:	7813      	ldrb	r3, [r2, #0]
 8005ecc:	600b      	str	r3, [r1, #0]
 8005ece:	7812      	ldrb	r2, [r2, #0]
 8005ed0:	1c10      	adds	r0, r2, #0
 8005ed2:	bf18      	it	ne
 8005ed4:	2001      	movne	r0, #1
 8005ed6:	b002      	add	sp, #8
 8005ed8:	4770      	bx	lr
 8005eda:	4610      	mov	r0, r2
 8005edc:	e7fb      	b.n	8005ed6 <__ascii_mbtowc+0x16>
 8005ede:	f06f 0001 	mvn.w	r0, #1
 8005ee2:	e7f8      	b.n	8005ed6 <__ascii_mbtowc+0x16>

08005ee4 <memmove>:
 8005ee4:	4288      	cmp	r0, r1
 8005ee6:	b510      	push	{r4, lr}
 8005ee8:	eb01 0302 	add.w	r3, r1, r2
 8005eec:	d807      	bhi.n	8005efe <memmove+0x1a>
 8005eee:	1e42      	subs	r2, r0, #1
 8005ef0:	4299      	cmp	r1, r3
 8005ef2:	d00a      	beq.n	8005f0a <memmove+0x26>
 8005ef4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005ef8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005efc:	e7f8      	b.n	8005ef0 <memmove+0xc>
 8005efe:	4283      	cmp	r3, r0
 8005f00:	d9f5      	bls.n	8005eee <memmove+0xa>
 8005f02:	1881      	adds	r1, r0, r2
 8005f04:	1ad2      	subs	r2, r2, r3
 8005f06:	42d3      	cmn	r3, r2
 8005f08:	d100      	bne.n	8005f0c <memmove+0x28>
 8005f0a:	bd10      	pop	{r4, pc}
 8005f0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f10:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005f14:	e7f7      	b.n	8005f06 <memmove+0x22>

08005f16 <__malloc_lock>:
 8005f16:	4770      	bx	lr

08005f18 <__malloc_unlock>:
 8005f18:	4770      	bx	lr

08005f1a <_realloc_r>:
 8005f1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	4614      	mov	r4, r2
 8005f20:	460e      	mov	r6, r1
 8005f22:	b921      	cbnz	r1, 8005f2e <_realloc_r+0x14>
 8005f24:	4611      	mov	r1, r2
 8005f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005f2a:	f7ff be0d 	b.w	8005b48 <_malloc_r>
 8005f2e:	b922      	cbnz	r2, 8005f3a <_realloc_r+0x20>
 8005f30:	f7ff fdbc 	bl	8005aac <_free_r>
 8005f34:	4625      	mov	r5, r4
 8005f36:	4628      	mov	r0, r5
 8005f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3a:	f000 f821 	bl	8005f80 <_malloc_usable_size_r>
 8005f3e:	42a0      	cmp	r0, r4
 8005f40:	d20f      	bcs.n	8005f62 <_realloc_r+0x48>
 8005f42:	4621      	mov	r1, r4
 8005f44:	4638      	mov	r0, r7
 8005f46:	f7ff fdff 	bl	8005b48 <_malloc_r>
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d0f2      	beq.n	8005f36 <_realloc_r+0x1c>
 8005f50:	4631      	mov	r1, r6
 8005f52:	4622      	mov	r2, r4
 8005f54:	f7ff fab6 	bl	80054c4 <memcpy>
 8005f58:	4631      	mov	r1, r6
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	f7ff fda6 	bl	8005aac <_free_r>
 8005f60:	e7e9      	b.n	8005f36 <_realloc_r+0x1c>
 8005f62:	4635      	mov	r5, r6
 8005f64:	e7e7      	b.n	8005f36 <_realloc_r+0x1c>

08005f66 <__ascii_wctomb>:
 8005f66:	b149      	cbz	r1, 8005f7c <__ascii_wctomb+0x16>
 8005f68:	2aff      	cmp	r2, #255	; 0xff
 8005f6a:	bf85      	ittet	hi
 8005f6c:	238a      	movhi	r3, #138	; 0x8a
 8005f6e:	6003      	strhi	r3, [r0, #0]
 8005f70:	700a      	strbls	r2, [r1, #0]
 8005f72:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8005f76:	bf98      	it	ls
 8005f78:	2001      	movls	r0, #1
 8005f7a:	4770      	bx	lr
 8005f7c:	4608      	mov	r0, r1
 8005f7e:	4770      	bx	lr

08005f80 <_malloc_usable_size_r>:
 8005f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f84:	1f18      	subs	r0, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfbc      	itt	lt
 8005f8a:	580b      	ldrlt	r3, [r1, r0]
 8005f8c:	18c0      	addlt	r0, r0, r3
 8005f8e:	4770      	bx	lr

08005f90 <_init>:
 8005f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f92:	bf00      	nop
 8005f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f96:	bc08      	pop	{r3}
 8005f98:	469e      	mov	lr, r3
 8005f9a:	4770      	bx	lr

08005f9c <_fini>:
 8005f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f9e:	bf00      	nop
 8005fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa2:	bc08      	pop	{r3}
 8005fa4:	469e      	mov	lr, r3
 8005fa6:	4770      	bx	lr
