
lab_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000344c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  0800364c  0800364c  0001364c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003754  08003754  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800375c  0800375c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800375c  0800375c  0001375c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000074  080037d8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080037d8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007fd3  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f8  00000000  00000000  00028075  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  00029570  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000628  00000000  00000000  00029c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000264f5  00000000  00000000  0002a278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006349  00000000  00000000  0005076d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0268  00000000  00000000  00056ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00146d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e14  00000000  00000000  00146d9c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08003634 	.word	0x08003634

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08003634 	.word	0x08003634

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fa5f 	bl	8000ab6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f808 	bl	800060c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8b0 	bl	8000760 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000600:	f000 f87e 	bl	8000700 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  q3();
 8000604:	f000 f8ec 	bl	80007e0 <q3>
 8000608:	e7fc      	b.n	8000604 <main+0x14>
	...

0800060c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b0b8      	sub	sp, #224	; 0xe0
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000616:	2234      	movs	r2, #52	; 0x34
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f002 fbfc 	bl	8002e18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000620:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000630:	f107 0308 	add.w	r3, r7, #8
 8000634:	2290      	movs	r2, #144	; 0x90
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fbed 	bl	8002e18 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063e:	4b2e      	ldr	r3, [pc, #184]	; (80006f8 <SystemClock_Config+0xec>)
 8000640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000642:	4a2d      	ldr	r2, [pc, #180]	; (80006f8 <SystemClock_Config+0xec>)
 8000644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000648:	6413      	str	r3, [r2, #64]	; 0x40
 800064a:	4b2b      	ldr	r3, [pc, #172]	; (80006f8 <SystemClock_Config+0xec>)
 800064c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000652:	607b      	str	r3, [r7, #4]
 8000654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000656:	4b29      	ldr	r3, [pc, #164]	; (80006fc <SystemClock_Config+0xf0>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800065e:	4a27      	ldr	r2, [pc, #156]	; (80006fc <SystemClock_Config+0xf0>)
 8000660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000664:	6013      	str	r3, [r2, #0]
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xf0>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066e:	603b      	str	r3, [r7, #0]
 8000670:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800067e:	2310      	movs	r3, #16
 8000680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fd3a 	bl	8001108 <HAL_RCC_OscConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800069a:	f000 f903 	bl	80008a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069e:	230f      	movs	r3, #15
 80006a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a4:	2300      	movs	r3, #0
 80006a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f000 ffce 	bl	8001664 <HAL_RCC_ClockConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ce:	f000 f8e9 	bl	80008a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80006d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d6:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006d8:	2300      	movs	r3, #0
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006dc:	f107 0308 	add.w	r3, r7, #8
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f991 	bl	8001a08 <HAL_RCCEx_PeriphCLKConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80006ec:	f000 f8da 	bl	80008a4 <Error_Handler>
  }
}
 80006f0:	bf00      	nop
 80006f2:	37e0      	adds	r7, #224	; 0xe0
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40007000 	.word	0x40007000

08000700 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000706:	4a15      	ldr	r2, [pc, #84]	; (800075c <MX_USART3_UART_Init+0x5c>)
 8000708:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b09      	ldr	r3, [pc, #36]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073c:	4b06      	ldr	r3, [pc, #24]	; (8000758 <MX_USART3_UART_Init+0x58>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000742:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_USART3_UART_Init+0x58>)
 8000744:	f001 fd86 	bl	8002254 <HAL_UART_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800074e:	f000 f8a9 	bl	80008a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	2000009c 	.word	0x2000009c
 800075c:	40004800 	.word	0x40004800

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000766:	f107 030c 	add.w	r3, r7, #12
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
 8000774:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_GPIO_Init+0x78>)
 800077c:	f043 0308 	orr.w	r3, r3, #8
 8000780:	6313      	str	r3, [r2, #48]	; 0x30
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	f003 0308 	and.w	r3, r3, #8
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x78>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x78>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D15_Pin|D14_Pin, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x7c>)
 80007ae:	f000 fc91 	bl	80010d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D15_Pin D14_Pin */
  GPIO_InitStruct.Pin = D15_Pin|D14_Pin;
 80007b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x7c>)
 80007cc:	f000 fad8 	bl	8000d80 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020400 	.word	0x40020400

080007e0 <q3>:
	HAL_UART_Transmit(&huart3,&ch1, sizeof(char), 1000);
	HAL_Delay(100);

}

void q3() {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0

	if (working_loop_flag){
 80007e6:	4b19      	ldr	r3, [pc, #100]	; (800084c <q3+0x6c>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d02a      	beq.n	8000844 <q3+0x64>

	send_str("Input => ");
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <q3+0x70>)
 80007f0:	f000 f838 	bl	8000864 <send_str>

	// wait for get char
	while (input == 0) {
 80007f4:	e009      	b.n	800080a <q3+0x2a>
		HAL_UART_Receive(&huart3, &input, sizeof(char), 1000);
 80007f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fa:	2201      	movs	r2, #1
 80007fc:	4915      	ldr	r1, [pc, #84]	; (8000854 <q3+0x74>)
 80007fe:	4816      	ldr	r0, [pc, #88]	; (8000858 <q3+0x78>)
 8000800:	f001 fe07 	bl	8002412 <HAL_UART_Receive>
		HAL_Delay(100);
 8000804:	2064      	movs	r0, #100	; 0x64
 8000806:	f000 f9b3 	bl	8000b70 <HAL_Delay>
	while (input == 0) {
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <q3+0x74>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f1      	beq.n	80007f6 <q3+0x16>
	}

	// print  the received char
	char output[10];
	sprintf(output, "%c\r\n", input);
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <q3+0x74>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	461a      	mov	r2, r3
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	4910      	ldr	r1, [pc, #64]	; (800085c <q3+0x7c>)
 800081c:	4618      	mov	r0, r3
 800081e:	f002 fb03 	bl	8002e28 <siprintf>
	send_str(output);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f000 f81d 	bl	8000864 <send_str>

	// if user want to quit
	if (input == 'q'){
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <q3+0x74>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b71      	cmp	r3, #113	; 0x71
 8000830:	d105      	bne.n	800083e <q3+0x5e>
		send_str("\r\nQUIT");
 8000832:	480b      	ldr	r0, [pc, #44]	; (8000860 <q3+0x80>)
 8000834:	f000 f816 	bl	8000864 <send_str>
		working_loop_flag = 0;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <q3+0x6c>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
	}

	// reset input value
	input = 0;
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <q3+0x74>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

	}

}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000
 8000850:	0800365c 	.word	0x0800365c
 8000854:	2000011c 	.word	0x2000011c
 8000858:	2000009c 	.word	0x2000009c
 800085c:	08003668 	.word	0x08003668
 8000860:	08003670 	.word	0x08003670

08000864 <send_str>:
		HAL_Delay(300);
	}

}

void send_str(char* str) {
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET);
 800086c:	bf00      	nop
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <send_str+0x3c>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000878:	2b40      	cmp	r3, #64	; 0x40
 800087a:	d1f8      	bne.n	800086e <send_str+0xa>
	HAL_UART_Transmit(&huart3,(uint8_t*) str, strlen(str), 1000);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f7ff fcdf 	bl	8000240 <strlen>
 8000882:	4603      	mov	r3, r0
 8000884:	b29a      	uxth	r2, r3
 8000886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088a:	6879      	ldr	r1, [r7, #4]
 800088c:	4804      	ldr	r0, [pc, #16]	; (80008a0 <send_str+0x3c>)
 800088e:	f001 fd2f 	bl	80022f0 <HAL_UART_Transmit>
	HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f000 f96c 	bl	8000b70 <HAL_Delay>
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000009c 	.word	0x2000009c

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a17      	ldr	r2, [pc, #92]	; (8000978 <HAL_UART_MspInit+0x7c>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d128      	bne.n	8000970 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <HAL_UART_MspInit+0x80>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a16      	ldr	r2, [pc, #88]	; (800097c <HAL_UART_MspInit+0x80>)
 8000924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <HAL_UART_MspInit+0x80>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_UART_MspInit+0x80>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <HAL_UART_MspInit+0x80>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <HAL_UART_MspInit+0x80>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800094e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000954:	2302      	movs	r3, #2
 8000956:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800095c:	2303      	movs	r3, #3
 800095e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000960:	2307      	movs	r3, #7
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000964:	f107 0314 	add.w	r3, r7, #20
 8000968:	4619      	mov	r1, r3
 800096a:	4805      	ldr	r0, [pc, #20]	; (8000980 <HAL_UART_MspInit+0x84>)
 800096c:	f000 fa08 	bl	8000d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000970:	bf00      	nop
 8000972:	3728      	adds	r7, #40	; 0x28
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40004800 	.word	0x40004800
 800097c:	40023800 	.word	0x40023800
 8000980:	40020c00 	.word	0x40020c00

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d8:	f000 f8aa 	bl	8000b30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}

080009e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <_sbrk+0x50>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d102      	bne.n	80009f6 <_sbrk+0x16>
		heap_end = &end;
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <_sbrk+0x50>)
 80009f2:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <_sbrk+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <_sbrk+0x50>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <_sbrk+0x50>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4413      	add	r3, r2
 8000a04:	466a      	mov	r2, sp
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d907      	bls.n	8000a1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000a0a:	f002 f9db 	bl	8002dc4 <__errno>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	230c      	movs	r3, #12
 8000a12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a18:	e006      	b.n	8000a28 <_sbrk+0x48>
	}

	heap_end += incr;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <_sbrk+0x50>)
 8000a1c:	681a      	ldr	r2, [r3, #0]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4413      	add	r3, r2
 8000a22:	4a03      	ldr	r2, [pc, #12]	; (8000a30 <_sbrk+0x50>)
 8000a24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	3710      	adds	r7, #16
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000090 	.word	0x20000090
 8000a34:	20000128 	.word	0x20000128

08000a38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <SystemInit+0x28>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <SystemInit+0x28>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <SystemInit+0x28>)
 8000a4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a52:	609a      	str	r2, [r3, #8]
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a6a:	e003      	b.n	8000a74 <LoopCopyDataInit>

08000a6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a72:	3104      	adds	r1, #4

08000a74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a7c:	d3f6      	bcc.n	8000a6c <CopyDataInit>
  ldr  r2, =_sbss
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a80:	e002      	b.n	8000a88 <LoopFillZerobss>

08000a82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a84:	f842 3b04 	str.w	r3, [r2], #4

08000a88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a8c:	d3f9      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a8e:	f7ff ffd3 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f002 f99d 	bl	8002dd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fdab 	bl	80005f0 <main>
  bx  lr    
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000aa0:	08003764 	.word	0x08003764
  ldr  r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000aa8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8000aac:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8000ab0:	20000128 	.word	0x20000128

08000ab4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC_IRQHandler>

08000ab6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aba:	2003      	movs	r0, #3
 8000abc:	f000 f92c 	bl	8000d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f000 f805 	bl	8000ad0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000ac6:	f7ff fef5 	bl	80008b4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000aca:	2300      	movs	r3, #0
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_InitTick+0x54>)
 8000ada:	681a      	ldr	r2, [r3, #0]
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <HAL_InitTick+0x58>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 f939 	bl	8000d66 <HAL_SYSTICK_Config>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000afa:	2301      	movs	r3, #1
 8000afc:	e00e      	b.n	8000b1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b0f      	cmp	r3, #15
 8000b02:	d80a      	bhi.n	8000b1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b04:	2200      	movs	r2, #0
 8000b06:	6879      	ldr	r1, [r7, #4]
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b0c:	f000 f90f 	bl	8000d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <HAL_InitTick+0x5c>)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
 8000b18:	e000      	b.n	8000b1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	3708      	adds	r7, #8
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000004 	.word	0x20000004
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	20000008 	.word	0x20000008

08000b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <HAL_IncTick+0x20>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <HAL_IncTick+0x24>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4413      	add	r3, r2
 8000b40:	4a04      	ldr	r2, [pc, #16]	; (8000b54 <HAL_IncTick+0x24>)
 8000b42:	6013      	str	r3, [r2, #0]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	2000000c 	.word	0x2000000c
 8000b54:	20000120 	.word	0x20000120

08000b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <HAL_GetTick+0x14>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	20000120 	.word	0x20000120

08000b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b78:	f7ff ffee 	bl	8000b58 <HAL_GetTick>
 8000b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b88:	d005      	beq.n	8000b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <HAL_Delay+0x40>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	461a      	mov	r2, r3
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	4413      	add	r3, r2
 8000b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b96:	bf00      	nop
 8000b98:	f7ff ffde 	bl	8000b58 <HAL_GetTick>
 8000b9c:	4602      	mov	r2, r0
 8000b9e:	68bb      	ldr	r3, [r7, #8]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	68fa      	ldr	r2, [r7, #12]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d8f7      	bhi.n	8000b98 <HAL_Delay+0x28>
  {
  }
}
 8000ba8:	bf00      	nop
 8000baa:	3710      	adds	r7, #16
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	2000000c 	.word	0x2000000c

08000bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000bc6:	68db      	ldr	r3, [r3, #12]
 8000bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bca:	68ba      	ldr	r2, [r7, #8]
 8000bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	60d3      	str	r3, [r2, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3714      	adds	r7, #20
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	05fa0000 	.word	0x05fa0000

08000bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c00:	4b04      	ldr	r3, [pc, #16]	; (8000c14 <__NVIC_GetPriorityGrouping+0x18>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	f003 0307 	and.w	r3, r3, #7
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	6039      	str	r1, [r7, #0]
 8000c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	db0a      	blt.n	8000c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	b2da      	uxtb	r2, r3
 8000c30:	490c      	ldr	r1, [pc, #48]	; (8000c64 <__NVIC_SetPriority+0x4c>)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	0112      	lsls	r2, r2, #4
 8000c38:	b2d2      	uxtb	r2, r2
 8000c3a:	440b      	add	r3, r1
 8000c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c40:	e00a      	b.n	8000c58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4908      	ldr	r1, [pc, #32]	; (8000c68 <__NVIC_SetPriority+0x50>)
 8000c48:	79fb      	ldrb	r3, [r7, #7]
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	3b04      	subs	r3, #4
 8000c50:	0112      	lsls	r2, r2, #4
 8000c52:	b2d2      	uxtb	r2, r2
 8000c54:	440b      	add	r3, r1
 8000c56:	761a      	strb	r2, [r3, #24]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	e000e100 	.word	0xe000e100
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b089      	sub	sp, #36	; 0x24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	f1c3 0307 	rsb	r3, r3, #7
 8000c86:	2b04      	cmp	r3, #4
 8000c88:	bf28      	it	cs
 8000c8a:	2304      	movcs	r3, #4
 8000c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	3304      	adds	r3, #4
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d902      	bls.n	8000c9c <NVIC_EncodePriority+0x30>
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	3b03      	subs	r3, #3
 8000c9a:	e000      	b.n	8000c9e <NVIC_EncodePriority+0x32>
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ca4:	69bb      	ldr	r3, [r7, #24]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43da      	mvns	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	401a      	ands	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	fa01 f303 	lsl.w	r3, r1, r3
 8000cbe:	43d9      	mvns	r1, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc4:	4313      	orrs	r3, r2
         );
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3724      	adds	r7, #36	; 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
	...

08000cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ce4:	d301      	bcc.n	8000cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e00f      	b.n	8000d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cea:	4a0a      	ldr	r2, [pc, #40]	; (8000d14 <SysTick_Config+0x40>)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf2:	210f      	movs	r1, #15
 8000cf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cf8:	f7ff ff8e 	bl	8000c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cfc:	4b05      	ldr	r3, [pc, #20]	; (8000d14 <SysTick_Config+0x40>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d02:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <SysTick_Config+0x40>)
 8000d04:	2207      	movs	r2, #7
 8000d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	e000e010 	.word	0xe000e010

08000d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ff47 	bl	8000bb4 <__NVIC_SetPriorityGrouping>
}
 8000d26:	bf00      	nop
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b086      	sub	sp, #24
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	4603      	mov	r3, r0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff5c 	bl	8000bfc <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff8e 	bl	8000c6c <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5d 	bl	8000c18 <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f7ff ffb0 	bl	8000cd4 <SysTick_Config>
 8000d74:	4603      	mov	r3, r0
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b089      	sub	sp, #36	; 0x24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
 8000d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d92:	2300      	movs	r3, #0
 8000d94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d96:	2300      	movs	r3, #0
 8000d98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61fb      	str	r3, [r7, #28]
 8000d9e:	e175      	b.n	800108c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000da0:	2201      	movs	r2, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	697a      	ldr	r2, [r7, #20]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db4:	693a      	ldr	r2, [r7, #16]
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	429a      	cmp	r2, r3
 8000dba:	f040 8164 	bne.w	8001086 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d00b      	beq.n	8000dde <HAL_GPIO_Init+0x5e>
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d007      	beq.n	8000dde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd2:	2b11      	cmp	r3, #17
 8000dd4:	d003      	beq.n	8000dde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d130      	bne.n	8000e40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	2203      	movs	r2, #3
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	4013      	ands	r3, r2
 8000e56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	689a      	ldr	r2, [r3, #8]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d003      	beq.n	8000e80 <HAL_GPIO_Init+0x100>
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b12      	cmp	r3, #18
 8000e7e:	d123      	bne.n	8000ec8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	08da      	lsrs	r2, r3, #3
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3208      	adds	r2, #8
 8000e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e8e:	69fb      	ldr	r3, [r7, #28]
 8000e90:	f003 0307 	and.w	r3, r3, #7
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	220f      	movs	r2, #15
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	691a      	ldr	r2, [r3, #16]
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	08da      	lsrs	r2, r3, #3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3208      	adds	r2, #8
 8000ec2:	69b9      	ldr	r1, [r7, #24]
 8000ec4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	2203      	movs	r2, #3
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f003 0203 	and.w	r2, r3, #3
 8000ee8:	69fb      	ldr	r3, [r7, #28]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80be 	beq.w	8001086 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0a:	4b65      	ldr	r3, [pc, #404]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0e:	4a64      	ldr	r2, [pc, #400]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	; 0x44
 8000f16:	4b62      	ldr	r3, [pc, #392]	; (80010a0 <HAL_GPIO_Init+0x320>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f22:	4a60      	ldr	r2, [pc, #384]	; (80010a4 <HAL_GPIO_Init+0x324>)
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	3302      	adds	r3, #2
 8000f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4013      	ands	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a57      	ldr	r2, [pc, #348]	; (80010a8 <HAL_GPIO_Init+0x328>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d037      	beq.n	8000fbe <HAL_GPIO_Init+0x23e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a56      	ldr	r2, [pc, #344]	; (80010ac <HAL_GPIO_Init+0x32c>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d031      	beq.n	8000fba <HAL_GPIO_Init+0x23a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a55      	ldr	r2, [pc, #340]	; (80010b0 <HAL_GPIO_Init+0x330>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d02b      	beq.n	8000fb6 <HAL_GPIO_Init+0x236>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a54      	ldr	r2, [pc, #336]	; (80010b4 <HAL_GPIO_Init+0x334>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d025      	beq.n	8000fb2 <HAL_GPIO_Init+0x232>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a53      	ldr	r2, [pc, #332]	; (80010b8 <HAL_GPIO_Init+0x338>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d01f      	beq.n	8000fae <HAL_GPIO_Init+0x22e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a52      	ldr	r2, [pc, #328]	; (80010bc <HAL_GPIO_Init+0x33c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d019      	beq.n	8000faa <HAL_GPIO_Init+0x22a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a51      	ldr	r2, [pc, #324]	; (80010c0 <HAL_GPIO_Init+0x340>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d013      	beq.n	8000fa6 <HAL_GPIO_Init+0x226>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a50      	ldr	r2, [pc, #320]	; (80010c4 <HAL_GPIO_Init+0x344>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d00d      	beq.n	8000fa2 <HAL_GPIO_Init+0x222>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a4f      	ldr	r2, [pc, #316]	; (80010c8 <HAL_GPIO_Init+0x348>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d007      	beq.n	8000f9e <HAL_GPIO_Init+0x21e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <HAL_GPIO_Init+0x34c>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d101      	bne.n	8000f9a <HAL_GPIO_Init+0x21a>
 8000f96:	2309      	movs	r3, #9
 8000f98:	e012      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000f9a:	230a      	movs	r3, #10
 8000f9c:	e010      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000f9e:	2308      	movs	r3, #8
 8000fa0:	e00e      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	e00c      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fa6:	2306      	movs	r3, #6
 8000fa8:	e00a      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000faa:	2305      	movs	r3, #5
 8000fac:	e008      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fae:	2304      	movs	r3, #4
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e004      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e002      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e000      	b.n	8000fc0 <HAL_GPIO_Init+0x240>
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	f002 0203 	and.w	r2, r2, #3
 8000fc6:	0092      	lsls	r2, r2, #2
 8000fc8:	4093      	lsls	r3, r2
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fd0:	4934      	ldr	r1, [pc, #208]	; (80010a4 <HAL_GPIO_Init+0x324>)
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fde:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <HAL_GPIO_Init+0x350>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001002:	4a33      	ldr	r2, [pc, #204]	; (80010d0 <HAL_GPIO_Init+0x350>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001008:	4b31      	ldr	r3, [pc, #196]	; (80010d0 <HAL_GPIO_Init+0x350>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102c:	4a28      	ldr	r2, [pc, #160]	; (80010d0 <HAL_GPIO_Init+0x350>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001032:	4b27      	ldr	r3, [pc, #156]	; (80010d0 <HAL_GPIO_Init+0x350>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001056:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_GPIO_Init+0x350>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105c:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <HAL_GPIO_Init+0x350>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001080:	4a13      	ldr	r2, [pc, #76]	; (80010d0 <HAL_GPIO_Init+0x350>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b0f      	cmp	r3, #15
 8001090:	f67f ae86 	bls.w	8000da0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001094:	bf00      	nop
 8001096:	3724      	adds	r7, #36	; 0x24
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40021400 	.word	0x40021400
 80010c0:	40021800 	.word	0x40021800
 80010c4:	40021c00 	.word	0x40021c00
 80010c8:	40022000 	.word	0x40022000
 80010cc:	40022400 	.word	0x40022400
 80010d0:	40013c00 	.word	0x40013c00

080010d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	460b      	mov	r3, r1
 80010de:	807b      	strh	r3, [r7, #2]
 80010e0:	4613      	mov	r3, r2
 80010e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010e4:	787b      	ldrb	r3, [r7, #1]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ea:	887a      	ldrh	r2, [r7, #2]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010f0:	e003      	b.n	80010fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010f2:	887b      	ldrh	r3, [r7, #2]
 80010f4:	041a      	lsls	r2, r3, #16
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	619a      	str	r2, [r3, #24]
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
	...

08001108 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001110:	2300      	movs	r3, #0
 8001112:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d101      	bne.n	800111e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e29b      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800112c:	4b96      	ldr	r3, [pc, #600]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b04      	cmp	r3, #4
 8001136:	d00c      	beq.n	8001152 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001138:	4b93      	ldr	r3, [pc, #588]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f003 030c 	and.w	r3, r3, #12
 8001140:	2b08      	cmp	r3, #8
 8001142:	d112      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
 8001144:	4b90      	ldr	r3, [pc, #576]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800114c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001150:	d10b      	bne.n	800116a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001152:	4b8d      	ldr	r3, [pc, #564]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d06c      	beq.n	8001238 <HAL_RCC_OscConfig+0x130>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d168      	bne.n	8001238 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e275      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001172:	d106      	bne.n	8001182 <HAL_RCC_OscConfig+0x7a>
 8001174:	4b84      	ldr	r3, [pc, #528]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a83      	ldr	r2, [pc, #524]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	6013      	str	r3, [r2, #0]
 8001180:	e02e      	b.n	80011e0 <HAL_RCC_OscConfig+0xd8>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10c      	bne.n	80011a4 <HAL_RCC_OscConfig+0x9c>
 800118a:	4b7f      	ldr	r3, [pc, #508]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a7e      	ldr	r2, [pc, #504]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001194:	6013      	str	r3, [r2, #0]
 8001196:	4b7c      	ldr	r3, [pc, #496]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a7b      	ldr	r2, [pc, #492]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800119c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a0:	6013      	str	r3, [r2, #0]
 80011a2:	e01d      	b.n	80011e0 <HAL_RCC_OscConfig+0xd8>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011ac:	d10c      	bne.n	80011c8 <HAL_RCC_OscConfig+0xc0>
 80011ae:	4b76      	ldr	r3, [pc, #472]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a75      	ldr	r2, [pc, #468]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011b8:	6013      	str	r3, [r2, #0]
 80011ba:	4b73      	ldr	r3, [pc, #460]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a72      	ldr	r2, [pc, #456]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	6013      	str	r3, [r2, #0]
 80011c6:	e00b      	b.n	80011e0 <HAL_RCC_OscConfig+0xd8>
 80011c8:	4b6f      	ldr	r3, [pc, #444]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a6e      	ldr	r2, [pc, #440]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b6c      	ldr	r3, [pc, #432]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a6b      	ldr	r2, [pc, #428]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d013      	beq.n	8001210 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e8:	f7ff fcb6 	bl	8000b58 <HAL_GetTick>
 80011ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ee:	e008      	b.n	8001202 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011f0:	f7ff fcb2 	bl	8000b58 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	2b64      	cmp	r3, #100	; 0x64
 80011fc:	d901      	bls.n	8001202 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011fe:	2303      	movs	r3, #3
 8001200:	e229      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001202:	4b61      	ldr	r3, [pc, #388]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d0f0      	beq.n	80011f0 <HAL_RCC_OscConfig+0xe8>
 800120e:	e014      	b.n	800123a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fca2 	bl	8000b58 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fc9e 	bl	8000b58 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	; 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e215      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122a:	4b57      	ldr	r3, [pc, #348]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d1f0      	bne.n	8001218 <HAL_RCC_OscConfig+0x110>
 8001236:	e000      	b.n	800123a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	2b00      	cmp	r3, #0
 8001244:	d069      	beq.n	800131a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 030c 	and.w	r3, r3, #12
 800124e:	2b00      	cmp	r3, #0
 8001250:	d00b      	beq.n	800126a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001252:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 030c 	and.w	r3, r3, #12
 800125a:	2b08      	cmp	r3, #8
 800125c:	d11c      	bne.n	8001298 <HAL_RCC_OscConfig+0x190>
 800125e:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d116      	bne.n	8001298 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	2b00      	cmp	r3, #0
 8001274:	d005      	beq.n	8001282 <HAL_RCC_OscConfig+0x17a>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e1e9      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b41      	ldr	r3, [pc, #260]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	493d      	ldr	r1, [pc, #244]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001292:	4313      	orrs	r3, r2
 8001294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001296:	e040      	b.n	800131a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a0:	4b39      	ldr	r3, [pc, #228]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a38      	ldr	r2, [pc, #224]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012a6:	f043 0301 	orr.w	r3, r3, #1
 80012aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc54 	bl	8000b58 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc50 	bl	8000b58 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e1c7      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c6:	4b30      	ldr	r3, [pc, #192]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d2:	4b2d      	ldr	r3, [pc, #180]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	691b      	ldr	r3, [r3, #16]
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	4929      	ldr	r1, [pc, #164]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	600b      	str	r3, [r1, #0]
 80012e6:	e018      	b.n	800131a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e8:	4b27      	ldr	r3, [pc, #156]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a26      	ldr	r2, [pc, #152]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fc30 	bl	8000b58 <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fc:	f7ff fc2c 	bl	8000b58 <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b02      	cmp	r3, #2
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1a3      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	4b1e      	ldr	r3, [pc, #120]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d038      	beq.n	8001398 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d019      	beq.n	8001362 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001332:	4a15      	ldr	r2, [pc, #84]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800133a:	f7ff fc0d 	bl	8000b58 <HAL_GetTick>
 800133e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001340:	e008      	b.n	8001354 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001342:	f7ff fc09 	bl	8000b58 <HAL_GetTick>
 8001346:	4602      	mov	r2, r0
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	1ad3      	subs	r3, r2, r3
 800134c:	2b02      	cmp	r3, #2
 800134e:	d901      	bls.n	8001354 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001350:	2303      	movs	r3, #3
 8001352:	e180      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001358:	f003 0302 	and.w	r3, r3, #2
 800135c:	2b00      	cmp	r3, #0
 800135e:	d0f0      	beq.n	8001342 <HAL_RCC_OscConfig+0x23a>
 8001360:	e01a      	b.n	8001398 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	4a08      	ldr	r2, [pc, #32]	; (8001388 <HAL_RCC_OscConfig+0x280>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800136e:	f7ff fbf3 	bl	8000b58 <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	e00a      	b.n	800138c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001376:	f7ff fbef 	bl	8000b58 <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d903      	bls.n	800138c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e166      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
 8001388:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800138c:	4b92      	ldr	r3, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800138e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	2b00      	cmp	r3, #0
 8001396:	d1ee      	bne.n	8001376 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	f000 80a4 	beq.w	80014ee <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013a6:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d10d      	bne.n	80013ce <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80013b2:	4b89      	ldr	r3, [pc, #548]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a88      	ldr	r2, [pc, #544]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b86      	ldr	r3, [pc, #536]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ca:	2301      	movs	r3, #1
 80013cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ce:	4b83      	ldr	r3, [pc, #524]	; (80015dc <HAL_RCC_OscConfig+0x4d4>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d118      	bne.n	800140c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80013da:	4b80      	ldr	r3, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x4d4>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a7f      	ldr	r2, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x4d4>)
 80013e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013e6:	f7ff fbb7 	bl	8000b58 <HAL_GetTick>
 80013ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013ec:	e008      	b.n	8001400 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013ee:	f7ff fbb3 	bl	8000b58 <HAL_GetTick>
 80013f2:	4602      	mov	r2, r0
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b64      	cmp	r3, #100	; 0x64
 80013fa:	d901      	bls.n	8001400 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e12a      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001400:	4b76      	ldr	r3, [pc, #472]	; (80015dc <HAL_RCC_OscConfig+0x4d4>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001408:	2b00      	cmp	r3, #0
 800140a:	d0f0      	beq.n	80013ee <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d106      	bne.n	8001422 <HAL_RCC_OscConfig+0x31a>
 8001414:	4b70      	ldr	r3, [pc, #448]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001418:	4a6f      	ldr	r2, [pc, #444]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	6713      	str	r3, [r2, #112]	; 0x70
 8001420:	e02d      	b.n	800147e <HAL_RCC_OscConfig+0x376>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d10c      	bne.n	8001444 <HAL_RCC_OscConfig+0x33c>
 800142a:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800142c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800142e:	4a6a      	ldr	r2, [pc, #424]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6713      	str	r3, [r2, #112]	; 0x70
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143a:	4a67      	ldr	r2, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800143c:	f023 0304 	bic.w	r3, r3, #4
 8001440:	6713      	str	r3, [r2, #112]	; 0x70
 8001442:	e01c      	b.n	800147e <HAL_RCC_OscConfig+0x376>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b05      	cmp	r3, #5
 800144a:	d10c      	bne.n	8001466 <HAL_RCC_OscConfig+0x35e>
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800144e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001450:	4a61      	ldr	r2, [pc, #388]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6713      	str	r3, [r2, #112]	; 0x70
 8001458:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800145a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145c:	4a5e      	ldr	r2, [pc, #376]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800145e:	f043 0301 	orr.w	r3, r3, #1
 8001462:	6713      	str	r3, [r2, #112]	; 0x70
 8001464:	e00b      	b.n	800147e <HAL_RCC_OscConfig+0x376>
 8001466:	4b5c      	ldr	r3, [pc, #368]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	4a5b      	ldr	r2, [pc, #364]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800146c:	f023 0301 	bic.w	r3, r3, #1
 8001470:	6713      	str	r3, [r2, #112]	; 0x70
 8001472:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001476:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001478:	f023 0304 	bic.w	r3, r3, #4
 800147c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d015      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001486:	f7ff fb67 	bl	8000b58 <HAL_GetTick>
 800148a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800148c:	e00a      	b.n	80014a4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148e:	f7ff fb63 	bl	8000b58 <HAL_GetTick>
 8001492:	4602      	mov	r2, r0
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	1ad3      	subs	r3, r2, r3
 8001498:	f241 3288 	movw	r2, #5000	; 0x1388
 800149c:	4293      	cmp	r3, r2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0d8      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80014a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0ee      	beq.n	800148e <HAL_RCC_OscConfig+0x386>
 80014b0:	e014      	b.n	80014dc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb51 	bl	8000b58 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b8:	e00a      	b.n	80014d0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ba:	f7ff fb4d 	bl	8000b58 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e0c2      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	4b41      	ldr	r3, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80014d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1ee      	bne.n	80014ba <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014dc:	7dfb      	ldrb	r3, [r7, #23]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d105      	bne.n	80014ee <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e2:	4b3d      	ldr	r3, [pc, #244]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	4a3c      	ldr	r2, [pc, #240]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80014e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 80ae 	beq.w	8001654 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b08      	cmp	r3, #8
 8001502:	d06d      	beq.n	80015e0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	699b      	ldr	r3, [r3, #24]
 8001508:	2b02      	cmp	r3, #2
 800150a:	d14b      	bne.n	80015a4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800150c:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a31      	ldr	r2, [pc, #196]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001512:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb1e 	bl	8000b58 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001520:	f7ff fb1a 	bl	8000b58 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e091      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f0      	bne.n	8001520 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69da      	ldr	r2, [r3, #28]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	431a      	orrs	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	019b      	lsls	r3, r3, #6
 800154e:	431a      	orrs	r2, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	085b      	lsrs	r3, r3, #1
 8001556:	3b01      	subs	r3, #1
 8001558:	041b      	lsls	r3, r3, #16
 800155a:	431a      	orrs	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001560:	061b      	lsls	r3, r3, #24
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001568:	071b      	lsls	r3, r3, #28
 800156a:	491b      	ldr	r1, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a18      	ldr	r2, [pc, #96]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001576:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800157a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157c:	f7ff faec 	bl	8000b58 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001584:	f7ff fae8 	bl	8000b58 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e05f      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0f0      	beq.n	8001584 <HAL_RCC_OscConfig+0x47c>
 80015a2:	e057      	b.n	8001654 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a0b      	ldr	r2, [pc, #44]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80015aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b0:	f7ff fad2 	bl	8000b58 <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b8:	f7ff face 	bl	8000b58 <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e045      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_RCC_OscConfig+0x4d0>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4b0>
 80015d6:	e03d      	b.n	8001654 <HAL_RCC_OscConfig+0x54c>
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <HAL_RCC_OscConfig+0x558>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d030      	beq.n	8001650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d129      	bne.n	8001650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	429a      	cmp	r2, r3
 8001608:	d122      	bne.n	8001650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001610:	4013      	ands	r3, r2
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001616:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001618:	4293      	cmp	r3, r2
 800161a:	d119      	bne.n	8001650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001626:	085b      	lsrs	r3, r3, #1
 8001628:	3b01      	subs	r3, #1
 800162a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800162c:	429a      	cmp	r2, r3
 800162e:	d10f      	bne.n	8001650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800163c:	429a      	cmp	r2, r3
 800163e:	d107      	bne.n	8001650 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800

08001664 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d101      	bne.n	800167c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0d0      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800167c:	4b6a      	ldr	r3, [pc, #424]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 030f 	and.w	r3, r3, #15
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d910      	bls.n	80016ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b67      	ldr	r3, [pc, #412]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f023 020f 	bic.w	r2, r3, #15
 8001692:	4965      	ldr	r1, [pc, #404]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	4313      	orrs	r3, r2
 8001698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800169a:	4b63      	ldr	r3, [pc, #396]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	683a      	ldr	r2, [r7, #0]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0b8      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d020      	beq.n	80016fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0304 	and.w	r3, r3, #4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016c4:	4b59      	ldr	r3, [pc, #356]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a58      	ldr	r2, [pc, #352]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80016ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0308 	and.w	r3, r3, #8
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016dc:	4b53      	ldr	r3, [pc, #332]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	4a52      	ldr	r2, [pc, #328]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80016e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016e8:	4b50      	ldr	r3, [pc, #320]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	494d      	ldr	r1, [pc, #308]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	2b00      	cmp	r3, #0
 8001704:	d040      	beq.n	8001788 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b01      	cmp	r3, #1
 800170c:	d107      	bne.n	800171e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	4b47      	ldr	r3, [pc, #284]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d115      	bne.n	8001746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e07f      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d107      	bne.n	8001736 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e073      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001736:	4b3d      	ldr	r3, [pc, #244]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d101      	bne.n	8001746 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e06b      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001746:	4b39      	ldr	r3, [pc, #228]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f023 0203 	bic.w	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	4936      	ldr	r1, [pc, #216]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001754:	4313      	orrs	r3, r2
 8001756:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001758:	f7ff f9fe 	bl	8000b58 <HAL_GetTick>
 800175c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800175e:	e00a      	b.n	8001776 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001760:	f7ff f9fa 	bl	8000b58 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e053      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 020c 	and.w	r2, r3, #12
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	429a      	cmp	r2, r3
 8001786:	d1eb      	bne.n	8001760 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001788:	4b27      	ldr	r3, [pc, #156]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 030f 	and.w	r3, r3, #15
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d210      	bcs.n	80017b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001796:	4b24      	ldr	r3, [pc, #144]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 020f 	bic.w	r2, r3, #15
 800179e:	4922      	ldr	r1, [pc, #136]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b20      	ldr	r3, [pc, #128]	; (8001828 <HAL_RCC_ClockConfig+0x1c4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e032      	b.n	800181e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d008      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	4916      	ldr	r1, [pc, #88]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	00db      	lsls	r3, r3, #3
 80017f0:	490e      	ldr	r1, [pc, #56]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 f821 	bl	800183c <HAL_RCC_GetSysClockFreq>
 80017fa:	4601      	mov	r1, r0
 80017fc:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_RCC_ClockConfig+0x1c8>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	4a0a      	ldr	r2, [pc, #40]	; (8001830 <HAL_RCC_ClockConfig+0x1cc>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	fa21 f303 	lsr.w	r3, r1, r3
 800180e:	4a09      	ldr	r2, [pc, #36]	; (8001834 <HAL_RCC_ClockConfig+0x1d0>)
 8001810:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_RCC_ClockConfig+0x1d4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff f95a 	bl	8000ad0 <HAL_InitTick>

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00
 800182c:	40023800 	.word	0x40023800
 8001830:	08003708 	.word	0x08003708
 8001834:	20000004 	.word	0x20000004
 8001838:	20000008 	.word	0x20000008

0800183c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800183c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800183e:	b085      	sub	sp, #20
 8001840:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001852:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_GetSysClockFreq+0x158>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 030c 	and.w	r3, r3, #12
 800185a:	2b04      	cmp	r3, #4
 800185c:	d007      	beq.n	800186e <HAL_RCC_GetSysClockFreq+0x32>
 800185e:	2b08      	cmp	r3, #8
 8001860:	d008      	beq.n	8001874 <HAL_RCC_GetSysClockFreq+0x38>
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 808d 	bne.w	8001982 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001868:	4b4b      	ldr	r3, [pc, #300]	; (8001998 <HAL_RCC_GetSysClockFreq+0x15c>)
 800186a:	60bb      	str	r3, [r7, #8]
      break;
 800186c:	e08c      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800186e:	4b4b      	ldr	r3, [pc, #300]	; (800199c <HAL_RCC_GetSysClockFreq+0x160>)
 8001870:	60bb      	str	r3, [r7, #8]
      break;
 8001872:	e089      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001874:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_GetSysClockFreq+0x158>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800187c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800187e:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_RCC_GetSysClockFreq+0x158>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d023      	beq.n	80018d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188a:	4b42      	ldr	r3, [pc, #264]	; (8001994 <HAL_RCC_GetSysClockFreq+0x158>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	099b      	lsrs	r3, r3, #6
 8001890:	f04f 0400 	mov.w	r4, #0
 8001894:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	ea03 0501 	and.w	r5, r3, r1
 80018a0:	ea04 0602 	and.w	r6, r4, r2
 80018a4:	4a3d      	ldr	r2, [pc, #244]	; (800199c <HAL_RCC_GetSysClockFreq+0x160>)
 80018a6:	fb02 f106 	mul.w	r1, r2, r6
 80018aa:	2200      	movs	r2, #0
 80018ac:	fb02 f205 	mul.w	r2, r2, r5
 80018b0:	440a      	add	r2, r1
 80018b2:	493a      	ldr	r1, [pc, #232]	; (800199c <HAL_RCC_GetSysClockFreq+0x160>)
 80018b4:	fba5 0101 	umull	r0, r1, r5, r1
 80018b8:	1853      	adds	r3, r2, r1
 80018ba:	4619      	mov	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f04f 0400 	mov.w	r4, #0
 80018c2:	461a      	mov	r2, r3
 80018c4:	4623      	mov	r3, r4
 80018c6:	f7fe fd13 	bl	80002f0 <__aeabi_uldivmod>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	e049      	b.n	8001966 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018d2:	4b30      	ldr	r3, [pc, #192]	; (8001994 <HAL_RCC_GetSysClockFreq+0x158>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	099b      	lsrs	r3, r3, #6
 80018d8:	f04f 0400 	mov.w	r4, #0
 80018dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	ea03 0501 	and.w	r5, r3, r1
 80018e8:	ea04 0602 	and.w	r6, r4, r2
 80018ec:	4629      	mov	r1, r5
 80018ee:	4632      	mov	r2, r6
 80018f0:	f04f 0300 	mov.w	r3, #0
 80018f4:	f04f 0400 	mov.w	r4, #0
 80018f8:	0154      	lsls	r4, r2, #5
 80018fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018fe:	014b      	lsls	r3, r1, #5
 8001900:	4619      	mov	r1, r3
 8001902:	4622      	mov	r2, r4
 8001904:	1b49      	subs	r1, r1, r5
 8001906:	eb62 0206 	sbc.w	r2, r2, r6
 800190a:	f04f 0300 	mov.w	r3, #0
 800190e:	f04f 0400 	mov.w	r4, #0
 8001912:	0194      	lsls	r4, r2, #6
 8001914:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001918:	018b      	lsls	r3, r1, #6
 800191a:	1a5b      	subs	r3, r3, r1
 800191c:	eb64 0402 	sbc.w	r4, r4, r2
 8001920:	f04f 0100 	mov.w	r1, #0
 8001924:	f04f 0200 	mov.w	r2, #0
 8001928:	00e2      	lsls	r2, r4, #3
 800192a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800192e:	00d9      	lsls	r1, r3, #3
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	195b      	adds	r3, r3, r5
 8001936:	eb44 0406 	adc.w	r4, r4, r6
 800193a:	f04f 0100 	mov.w	r1, #0
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	02a2      	lsls	r2, r4, #10
 8001944:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001948:	0299      	lsls	r1, r3, #10
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	4618      	mov	r0, r3
 8001950:	4621      	mov	r1, r4
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f04f 0400 	mov.w	r4, #0
 8001958:	461a      	mov	r2, r3
 800195a:	4623      	mov	r3, r4
 800195c:	f7fe fcc8 	bl	80002f0 <__aeabi_uldivmod>
 8001960:	4603      	mov	r3, r0
 8001962:	460c      	mov	r4, r1
 8001964:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_GetSysClockFreq+0x158>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	0c1b      	lsrs	r3, r3, #16
 800196c:	f003 0303 	and.w	r3, r3, #3
 8001970:	3301      	adds	r3, #1
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001976:	68fa      	ldr	r2, [r7, #12]
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	60bb      	str	r3, [r7, #8]
      break;
 8001980:	e002      	b.n	8001988 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001984:	60bb      	str	r3, [r7, #8]
      break;
 8001986:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001988:	68bb      	ldr	r3, [r7, #8]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3714      	adds	r7, #20
 800198e:	46bd      	mov	sp, r7
 8001990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001992:	bf00      	nop
 8001994:	40023800 	.word	0x40023800
 8001998:	00f42400 	.word	0x00f42400
 800199c:	017d7840 	.word	0x017d7840

080019a0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a4:	4b03      	ldr	r3, [pc, #12]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80019a6:	681b      	ldr	r3, [r3, #0]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000004 	.word	0x20000004

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff0 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019c0:	4601      	mov	r1, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	0a9b      	lsrs	r3, r3, #10
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4a03      	ldr	r2, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5cd3      	ldrb	r3, [r2, r3]
 80019d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	08003718 	.word	0x08003718

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffdc 	bl	80019a0 <HAL_RCC_GetHCLKFreq>
 80019e8:	4601      	mov	r1, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0b5b      	lsrs	r3, r3, #13
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	08003718 	.word	0x08003718

08001a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b088      	sub	sp, #32
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d012      	beq.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a30:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a68      	ldr	r2, [pc, #416]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a3a:	6093      	str	r3, [r2, #8]
 8001a3c:	4b66      	ldr	r3, [pc, #408]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a44:	4964      	ldr	r1, [pc, #400]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001a52:	2301      	movs	r3, #1
 8001a54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d017      	beq.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001a62:	4b5d      	ldr	r3, [pc, #372]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a70:	4959      	ldr	r1, [pc, #356]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a80:	d101      	bne.n	8001a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001a82:	2301      	movs	r3, #1
 8001a84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d017      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	494a      	ldr	r1, [pc, #296]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001abc:	d101      	bne.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 808b 	beq.w	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001aec:	4b3a      	ldr	r3, [pc, #232]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	4a39      	ldr	r2, [pc, #228]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af6:	6413      	str	r3, [r2, #64]	; 0x40
 8001af8:	4b37      	ldr	r3, [pc, #220]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b04:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a34      	ldr	r2, [pc, #208]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b10:	f7ff f822 	bl	8000b58 <HAL_GetTick>
 8001b14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b18:	f7ff f81e 	bl	8000b58 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e38d      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b2a:	4b2c      	ldr	r3, [pc, #176]	; (8001bdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b36:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d035      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d02e      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b62:	4a1d      	ldr	r2, [pc, #116]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b6a:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001b76:	4a18      	ldr	r2, [pc, #96]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d114      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7fe ffe6 	bl	8000b58 <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7fe ffe2 	bl	8000b58 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e34f      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0ee      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001bbe:	d111      	bne.n	8001be4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001bcc:	4b04      	ldr	r3, [pc, #16]	; (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001bce:	400b      	ands	r3, r1
 8001bd0:	4901      	ldr	r1, [pc, #4]	; (8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	0ffffcff 	.word	0x0ffffcff
 8001be4:	4bb3      	ldr	r3, [pc, #716]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4ab2      	ldr	r2, [pc, #712]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001bee:	6093      	str	r3, [r2, #8]
 8001bf0:	4bb0      	ldr	r3, [pc, #704]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfc:	49ad      	ldr	r1, [pc, #692]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d010      	beq.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c0e:	4ba9      	ldr	r3, [pc, #676]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c14:	4aa7      	ldr	r2, [pc, #668]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1e:	4ba5      	ldr	r3, [pc, #660]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c28:	49a2      	ldr	r1, [pc, #648]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00a      	beq.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c3c:	4b9d      	ldr	r3, [pc, #628]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001c4a:	499a      	ldr	r1, [pc, #616]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d00a      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c5e:	4b95      	ldr	r3, [pc, #596]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001c6c:	4991      	ldr	r1, [pc, #580]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00a      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c80:	4b8c      	ldr	r3, [pc, #560]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001c8e:	4989      	ldr	r1, [pc, #548]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d00a      	beq.n	8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001ca2:	4b84      	ldr	r3, [pc, #528]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb0:	4980      	ldr	r1, [pc, #512]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d00a      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cc4:	4b7b      	ldr	r3, [pc, #492]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd2:	4978      	ldr	r1, [pc, #480]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00a      	beq.n	8001cfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce6:	4b73      	ldr	r3, [pc, #460]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cec:	f023 020c 	bic.w	r2, r3, #12
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf4:	496f      	ldr	r1, [pc, #444]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00a      	beq.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d08:	4b6a      	ldr	r3, [pc, #424]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d16:	4967      	ldr	r1, [pc, #412]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00a      	beq.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d2a:	4b62      	ldr	r3, [pc, #392]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d38:	495e      	ldr	r1, [pc, #376]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d00a      	beq.n	8001d62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d4c:	4b59      	ldr	r3, [pc, #356]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	4956      	ldr	r1, [pc, #344]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00a      	beq.n	8001d84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d6e:	4b51      	ldr	r3, [pc, #324]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	494d      	ldr	r1, [pc, #308]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d00a      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d90:	4b48      	ldr	r3, [pc, #288]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	4945      	ldr	r1, [pc, #276]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00a      	beq.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001db2:	4b40      	ldr	r3, [pc, #256]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	493c      	ldr	r1, [pc, #240]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dd4:	4b37      	ldr	r3, [pc, #220]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001de2:	4934      	ldr	r1, [pc, #208]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d011      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001df6:	4b2f      	ldr	r3, [pc, #188]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e04:	492b      	ldr	r1, [pc, #172]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e14:	d101      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e16:	2301      	movs	r3, #1
 8001e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00a      	beq.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e36:	4b1f      	ldr	r3, [pc, #124]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e44:	491b      	ldr	r1, [pc, #108]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e46:	4313      	orrs	r3, r2
 8001e48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d00b      	beq.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001e58:	4b16      	ldr	r3, [pc, #88]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e68:	4912      	ldr	r1, [pc, #72]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00b      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001e7c:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e8c:	4909      	ldr	r1, [pc, #36]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d00f      	beq.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001ea0:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ea6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eb0:	e002      	b.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	4985      	ldr	r1, [pc, #532]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d00b      	beq.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001ecc:	4b80      	ldr	r3, [pc, #512]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001edc:	497c      	ldr	r1, [pc, #496]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ef2:	f040 80d6 	bne.w	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ef6:	4b76      	ldr	r3, [pc, #472]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a75      	ldr	r2, [pc, #468]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001efc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f02:	f7fe fe29 	bl	8000b58 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f0a:	f7fe fe25 	bl	8000b58 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e194      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f1c:	4b6c      	ldr	r3, [pc, #432]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d021      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11d      	bne.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001f3c:	4b64      	ldr	r3, [pc, #400]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f42:	0c1b      	lsrs	r3, r3, #16
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001f4a:	4b61      	ldr	r3, [pc, #388]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f50:	0e1b      	lsrs	r3, r3, #24
 8001f52:	f003 030f 	and.w	r3, r3, #15
 8001f56:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	019a      	lsls	r2, r3, #6
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	431a      	orrs	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	061b      	lsls	r3, r3, #24
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	071b      	lsls	r3, r3, #28
 8001f70:	4957      	ldr	r1, [pc, #348]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d004      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f8c:	d00a      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d02e      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa2:	d129      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001faa:	0c1b      	lsrs	r3, r3, #16
 8001fac:	f003 0303 	and.w	r3, r3, #3
 8001fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fb2:	4b47      	ldr	r3, [pc, #284]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb8:	0f1b      	lsrs	r3, r3, #28
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	019a      	lsls	r2, r3, #6
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	041b      	lsls	r3, r3, #16
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	061b      	lsls	r3, r3, #24
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	071b      	lsls	r3, r3, #28
 8001fd8:	493d      	ldr	r1, [pc, #244]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001fe0:	4b3b      	ldr	r3, [pc, #236]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001fe6:	f023 021f 	bic.w	r2, r3, #31
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	4937      	ldr	r1, [pc, #220]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002004:	4b32      	ldr	r3, [pc, #200]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002006:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800200a:	0e1b      	lsrs	r3, r3, #24
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002012:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002014:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002018:	0f1b      	lsrs	r3, r3, #28
 800201a:	f003 0307 	and.w	r3, r3, #7
 800201e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	019a      	lsls	r2, r3, #6
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	041b      	lsls	r3, r3, #16
 800202c:	431a      	orrs	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	431a      	orrs	r2, r3
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	071b      	lsls	r3, r3, #28
 8002038:	4925      	ldr	r1, [pc, #148]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800203a:	4313      	orrs	r3, r2
 800203c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d011      	beq.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	019a      	lsls	r2, r3, #6
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	691b      	ldr	r3, [r3, #16]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	061b      	lsls	r3, r3, #24
 8002060:	431a      	orrs	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	071b      	lsls	r3, r3, #28
 8002068:	4919      	ldr	r1, [pc, #100]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a16      	ldr	r2, [pc, #88]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002076:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800207a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800207c:	f7fe fd6c 	bl	8000b58 <HAL_GetTick>
 8002080:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002082:	e008      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002084:	f7fe fd68 	bl	8000b58 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	; 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e0d7      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002096:	4b0e      	ldr	r3, [pc, #56]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d0f0      	beq.n	8002084 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	f040 80cd 	bne.w	8002244 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80020aa:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a08      	ldr	r2, [pc, #32]	; (80020d0 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80020b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b6:	f7fe fd4f 	bl	8000b58 <HAL_GetTick>
 80020ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020bc:	e00a      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020be:	f7fe fd4b 	bl	8000b58 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	2b64      	cmp	r3, #100	; 0x64
 80020ca:	d903      	bls.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020cc:	2303      	movs	r3, #3
 80020ce:	e0ba      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80020d0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80020d4:	4b5e      	ldr	r3, [pc, #376]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80020dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80020e0:	d0ed      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d02e      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	2b00      	cmp	r3, #0
 8002108:	d12a      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800210a:	4b51      	ldr	r3, [pc, #324]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800210c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002118:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800211e:	0f1b      	lsrs	r3, r3, #28
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	019a      	lsls	r2, r3, #6
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	061b      	lsls	r3, r3, #24
 8002138:	431a      	orrs	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	071b      	lsls	r3, r3, #28
 800213e:	4944      	ldr	r1, [pc, #272]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002140:	4313      	orrs	r3, r2
 8002142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800214c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	021b      	lsls	r3, r3, #8
 8002158:	493d      	ldr	r1, [pc, #244]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800215a:	4313      	orrs	r3, r2
 800215c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d022      	beq.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002174:	d11d      	bne.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002176:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217c:	0e1b      	lsrs	r3, r3, #24
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002184:	4b32      	ldr	r3, [pc, #200]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800218a:	0f1b      	lsrs	r3, r3, #28
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	019a      	lsls	r2, r3, #6
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a1b      	ldr	r3, [r3, #32]
 800219c:	041b      	lsls	r3, r3, #16
 800219e:	431a      	orrs	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	431a      	orrs	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	071b      	lsls	r3, r3, #28
 80021aa:	4929      	ldr	r1, [pc, #164]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d028      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021be:	4b24      	ldr	r3, [pc, #144]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c4:	0e1b      	lsrs	r3, r3, #24
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	0c1b      	lsrs	r3, r3, #16
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	019a      	lsls	r2, r3, #6
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	041b      	lsls	r3, r3, #16
 80021e4:	431a      	orrs	r2, r3
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	061b      	lsls	r3, r3, #24
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	071b      	lsls	r3, r3, #28
 80021f2:	4917      	ldr	r1, [pc, #92]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80021fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002200:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	4911      	ldr	r1, [pc, #68]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800220a:	4313      	orrs	r3, r2
 800220c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002210:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800221c:	f7fe fc9c 	bl	8000b58 <HAL_GetTick>
 8002220:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002224:	f7fe fc98 	bl	8000b58 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b64      	cmp	r3, #100	; 0x64
 8002230:	d901      	bls.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e007      	b.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002236:	4b06      	ldr	r3, [pc, #24]	; (8002250 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800223e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002242:	d1ef      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3720      	adds	r7, #32
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e040      	b.n	80022e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800226a:	2b00      	cmp	r3, #0
 800226c:	d106      	bne.n	800227c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7fe fb40 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2224      	movs	r2, #36	; 0x24
 8002280:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0201 	bic.w	r2, r2, #1
 8002290:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f98a 	bl	80025ac <UART_SetConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e022      	b.n	80022e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d002      	beq.n	80022b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fc28 	bl	8002b00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	689a      	ldr	r2, [r3, #8]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80022ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f042 0201 	orr.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 fcaf 	bl	8002c44 <UART_CheckIdleState>
 80022e6:	4603      	mov	r3, r0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	; 0x28
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	603b      	str	r3, [r7, #0]
 80022fc:	4613      	mov	r3, r2
 80022fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002304:	2b20      	cmp	r3, #32
 8002306:	d17f      	bne.n	8002408 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_UART_Transmit+0x24>
 800230e:	88fb      	ldrh	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e078      	b.n	800240a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <HAL_UART_Transmit+0x36>
 8002322:	2302      	movs	r3, #2
 8002324:	e071      	b.n	800240a <HAL_UART_Transmit+0x11a>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	2201      	movs	r2, #1
 800232a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2200      	movs	r2, #0
 8002332:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2221      	movs	r2, #33	; 0x21
 8002338:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800233a:	f7fe fc0d 	bl	8000b58 <HAL_GetTick>
 800233e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	88fa      	ldrh	r2, [r7, #6]
 8002344:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	88fa      	ldrh	r2, [r7, #6]
 800234c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002358:	d108      	bne.n	800236c <HAL_UART_Transmit+0x7c>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	61bb      	str	r3, [r7, #24]
 800236a:	e003      	b.n	8002374 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002370:	2300      	movs	r3, #0
 8002372:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800237c:	e02c      	b.n	80023d8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	2200      	movs	r2, #0
 8002386:	2180      	movs	r1, #128	; 0x80
 8002388:	68f8      	ldr	r0, [r7, #12]
 800238a:	f000 fca0 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e038      	b.n	800240a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	3302      	adds	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	e007      	b.n	80023c6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	781a      	ldrb	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	3301      	adds	r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023cc:	b29b      	uxth	r3, r3
 80023ce:	3b01      	subs	r3, #1
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80023de:	b29b      	uxth	r3, r3
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1cc      	bne.n	800237e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	2200      	movs	r2, #0
 80023ec:	2140      	movs	r1, #64	; 0x40
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fc6d 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e005      	b.n	800240a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	4618      	mov	r0, r3
 800240c:	3720      	adds	r7, #32
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b08a      	sub	sp, #40	; 0x28
 8002416:	af02      	add	r7, sp, #8
 8002418:	60f8      	str	r0, [r7, #12]
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	603b      	str	r3, [r7, #0]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002426:	2b20      	cmp	r3, #32
 8002428:	f040 80ba 	bne.w	80025a0 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d002      	beq.n	8002438 <HAL_UART_Receive+0x26>
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0b2      	b.n	80025a2 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002442:	2b01      	cmp	r3, #1
 8002444:	d101      	bne.n	800244a <HAL_UART_Receive+0x38>
 8002446:	2302      	movs	r3, #2
 8002448:	e0ab      	b.n	80025a2 <HAL_UART_Receive+0x190>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2200      	movs	r2, #0
 8002456:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2222      	movs	r2, #34	; 0x22
 800245c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800245e:	f7fe fb7b 	bl	8000b58 <HAL_GetTick>
 8002462:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	88fa      	ldrh	r2, [r7, #6]
 8002468:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	88fa      	ldrh	r2, [r7, #6]
 8002470:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d10e      	bne.n	800249c <HAL_UART_Receive+0x8a>
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_UART_Receive+0x80>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f240 12ff 	movw	r2, #511	; 0x1ff
 800248c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002490:	e02d      	b.n	80024ee <HAL_UART_Receive+0xdc>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	22ff      	movs	r2, #255	; 0xff
 8002496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800249a:	e028      	b.n	80024ee <HAL_UART_Receive+0xdc>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10d      	bne.n	80024c0 <HAL_UART_Receive+0xae>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <HAL_UART_Receive+0xa4>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	22ff      	movs	r2, #255	; 0xff
 80024b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024b4:	e01b      	b.n	80024ee <HAL_UART_Receive+0xdc>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	227f      	movs	r2, #127	; 0x7f
 80024ba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024be:	e016      	b.n	80024ee <HAL_UART_Receive+0xdc>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024c8:	d10d      	bne.n	80024e6 <HAL_UART_Receive+0xd4>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d104      	bne.n	80024dc <HAL_UART_Receive+0xca>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	227f      	movs	r2, #127	; 0x7f
 80024d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024da:	e008      	b.n	80024ee <HAL_UART_Receive+0xdc>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	223f      	movs	r2, #63	; 0x3f
 80024e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80024e4:	e003      	b.n	80024ee <HAL_UART_Receive+0xdc>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80024f4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024fe:	d108      	bne.n	8002512 <HAL_UART_Receive+0x100>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	e003      	b.n	800251a <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002522:	e032      	b.n	800258a <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	2200      	movs	r2, #0
 800252c:	2120      	movs	r1, #32
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fbcd 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e031      	b.n	80025a2 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10c      	bne.n	800255e <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	b29a      	uxth	r2, r3
 800254c:	8a7b      	ldrh	r3, [r7, #18]
 800254e:	4013      	ands	r3, r2
 8002550:	b29a      	uxth	r2, r3
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	3302      	adds	r3, #2
 800255a:	61bb      	str	r3, [r7, #24]
 800255c:	e00c      	b.n	8002578 <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	b2da      	uxtb	r2, r3
 8002566:	8a7b      	ldrh	r3, [r7, #18]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	4013      	ands	r3, r2
 800256c:	b2da      	uxtb	r2, r3
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	3301      	adds	r3, #1
 8002576:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002590:	b29b      	uxth	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1c6      	bne.n	8002524 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800259c:	2300      	movs	r3, #0
 800259e:	e000      	b.n	80025a2 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 80025a0:	2302      	movs	r3, #2
  }
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3720      	adds	r7, #32
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025b8:	2300      	movs	r3, #0
 80025ba:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689a      	ldr	r2, [r3, #8]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	431a      	orrs	r2, r3
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	4bb1      	ldr	r3, [pc, #708]	; (80028a0 <UART_SetConfig+0x2f4>)
 80025dc:	4013      	ands	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6812      	ldr	r2, [r2, #0]
 80025e2:	6939      	ldr	r1, [r7, #16]
 80025e4:	430b      	orrs	r3, r1
 80025e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68da      	ldr	r2, [r3, #12]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	430a      	orrs	r2, r1
 8002620:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a9f      	ldr	r2, [pc, #636]	; (80028a4 <UART_SetConfig+0x2f8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d121      	bne.n	8002670 <UART_SetConfig+0xc4>
 800262c:	4b9e      	ldr	r3, [pc, #632]	; (80028a8 <UART_SetConfig+0x2fc>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b03      	cmp	r3, #3
 8002638:	d816      	bhi.n	8002668 <UART_SetConfig+0xbc>
 800263a:	a201      	add	r2, pc, #4	; (adr r2, 8002640 <UART_SetConfig+0x94>)
 800263c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002640:	08002651 	.word	0x08002651
 8002644:	0800265d 	.word	0x0800265d
 8002648:	08002657 	.word	0x08002657
 800264c:	08002663 	.word	0x08002663
 8002650:	2301      	movs	r3, #1
 8002652:	77fb      	strb	r3, [r7, #31]
 8002654:	e151      	b.n	80028fa <UART_SetConfig+0x34e>
 8002656:	2302      	movs	r3, #2
 8002658:	77fb      	strb	r3, [r7, #31]
 800265a:	e14e      	b.n	80028fa <UART_SetConfig+0x34e>
 800265c:	2304      	movs	r3, #4
 800265e:	77fb      	strb	r3, [r7, #31]
 8002660:	e14b      	b.n	80028fa <UART_SetConfig+0x34e>
 8002662:	2308      	movs	r3, #8
 8002664:	77fb      	strb	r3, [r7, #31]
 8002666:	e148      	b.n	80028fa <UART_SetConfig+0x34e>
 8002668:	2310      	movs	r3, #16
 800266a:	77fb      	strb	r3, [r7, #31]
 800266c:	bf00      	nop
 800266e:	e144      	b.n	80028fa <UART_SetConfig+0x34e>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a8d      	ldr	r2, [pc, #564]	; (80028ac <UART_SetConfig+0x300>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d134      	bne.n	80026e4 <UART_SetConfig+0x138>
 800267a:	4b8b      	ldr	r3, [pc, #556]	; (80028a8 <UART_SetConfig+0x2fc>)
 800267c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b0c      	cmp	r3, #12
 8002686:	d829      	bhi.n	80026dc <UART_SetConfig+0x130>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <UART_SetConfig+0xe4>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026c5 	.word	0x080026c5
 8002694:	080026dd 	.word	0x080026dd
 8002698:	080026dd 	.word	0x080026dd
 800269c:	080026dd 	.word	0x080026dd
 80026a0:	080026d1 	.word	0x080026d1
 80026a4:	080026dd 	.word	0x080026dd
 80026a8:	080026dd 	.word	0x080026dd
 80026ac:	080026dd 	.word	0x080026dd
 80026b0:	080026cb 	.word	0x080026cb
 80026b4:	080026dd 	.word	0x080026dd
 80026b8:	080026dd 	.word	0x080026dd
 80026bc:	080026dd 	.word	0x080026dd
 80026c0:	080026d7 	.word	0x080026d7
 80026c4:	2300      	movs	r3, #0
 80026c6:	77fb      	strb	r3, [r7, #31]
 80026c8:	e117      	b.n	80028fa <UART_SetConfig+0x34e>
 80026ca:	2302      	movs	r3, #2
 80026cc:	77fb      	strb	r3, [r7, #31]
 80026ce:	e114      	b.n	80028fa <UART_SetConfig+0x34e>
 80026d0:	2304      	movs	r3, #4
 80026d2:	77fb      	strb	r3, [r7, #31]
 80026d4:	e111      	b.n	80028fa <UART_SetConfig+0x34e>
 80026d6:	2308      	movs	r3, #8
 80026d8:	77fb      	strb	r3, [r7, #31]
 80026da:	e10e      	b.n	80028fa <UART_SetConfig+0x34e>
 80026dc:	2310      	movs	r3, #16
 80026de:	77fb      	strb	r3, [r7, #31]
 80026e0:	bf00      	nop
 80026e2:	e10a      	b.n	80028fa <UART_SetConfig+0x34e>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a71      	ldr	r2, [pc, #452]	; (80028b0 <UART_SetConfig+0x304>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d120      	bne.n	8002730 <UART_SetConfig+0x184>
 80026ee:	4b6e      	ldr	r3, [pc, #440]	; (80028a8 <UART_SetConfig+0x2fc>)
 80026f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80026f8:	2b10      	cmp	r3, #16
 80026fa:	d00f      	beq.n	800271c <UART_SetConfig+0x170>
 80026fc:	2b10      	cmp	r3, #16
 80026fe:	d802      	bhi.n	8002706 <UART_SetConfig+0x15a>
 8002700:	2b00      	cmp	r3, #0
 8002702:	d005      	beq.n	8002710 <UART_SetConfig+0x164>
 8002704:	e010      	b.n	8002728 <UART_SetConfig+0x17c>
 8002706:	2b20      	cmp	r3, #32
 8002708:	d005      	beq.n	8002716 <UART_SetConfig+0x16a>
 800270a:	2b30      	cmp	r3, #48	; 0x30
 800270c:	d009      	beq.n	8002722 <UART_SetConfig+0x176>
 800270e:	e00b      	b.n	8002728 <UART_SetConfig+0x17c>
 8002710:	2300      	movs	r3, #0
 8002712:	77fb      	strb	r3, [r7, #31]
 8002714:	e0f1      	b.n	80028fa <UART_SetConfig+0x34e>
 8002716:	2302      	movs	r3, #2
 8002718:	77fb      	strb	r3, [r7, #31]
 800271a:	e0ee      	b.n	80028fa <UART_SetConfig+0x34e>
 800271c:	2304      	movs	r3, #4
 800271e:	77fb      	strb	r3, [r7, #31]
 8002720:	e0eb      	b.n	80028fa <UART_SetConfig+0x34e>
 8002722:	2308      	movs	r3, #8
 8002724:	77fb      	strb	r3, [r7, #31]
 8002726:	e0e8      	b.n	80028fa <UART_SetConfig+0x34e>
 8002728:	2310      	movs	r3, #16
 800272a:	77fb      	strb	r3, [r7, #31]
 800272c:	bf00      	nop
 800272e:	e0e4      	b.n	80028fa <UART_SetConfig+0x34e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a5f      	ldr	r2, [pc, #380]	; (80028b4 <UART_SetConfig+0x308>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d120      	bne.n	800277c <UART_SetConfig+0x1d0>
 800273a:	4b5b      	ldr	r3, [pc, #364]	; (80028a8 <UART_SetConfig+0x2fc>)
 800273c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002740:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d00f      	beq.n	8002768 <UART_SetConfig+0x1bc>
 8002748:	2b40      	cmp	r3, #64	; 0x40
 800274a:	d802      	bhi.n	8002752 <UART_SetConfig+0x1a6>
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <UART_SetConfig+0x1b0>
 8002750:	e010      	b.n	8002774 <UART_SetConfig+0x1c8>
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	d005      	beq.n	8002762 <UART_SetConfig+0x1b6>
 8002756:	2bc0      	cmp	r3, #192	; 0xc0
 8002758:	d009      	beq.n	800276e <UART_SetConfig+0x1c2>
 800275a:	e00b      	b.n	8002774 <UART_SetConfig+0x1c8>
 800275c:	2300      	movs	r3, #0
 800275e:	77fb      	strb	r3, [r7, #31]
 8002760:	e0cb      	b.n	80028fa <UART_SetConfig+0x34e>
 8002762:	2302      	movs	r3, #2
 8002764:	77fb      	strb	r3, [r7, #31]
 8002766:	e0c8      	b.n	80028fa <UART_SetConfig+0x34e>
 8002768:	2304      	movs	r3, #4
 800276a:	77fb      	strb	r3, [r7, #31]
 800276c:	e0c5      	b.n	80028fa <UART_SetConfig+0x34e>
 800276e:	2308      	movs	r3, #8
 8002770:	77fb      	strb	r3, [r7, #31]
 8002772:	e0c2      	b.n	80028fa <UART_SetConfig+0x34e>
 8002774:	2310      	movs	r3, #16
 8002776:	77fb      	strb	r3, [r7, #31]
 8002778:	bf00      	nop
 800277a:	e0be      	b.n	80028fa <UART_SetConfig+0x34e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a4d      	ldr	r2, [pc, #308]	; (80028b8 <UART_SetConfig+0x30c>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d124      	bne.n	80027d0 <UART_SetConfig+0x224>
 8002786:	4b48      	ldr	r3, [pc, #288]	; (80028a8 <UART_SetConfig+0x2fc>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002790:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002794:	d012      	beq.n	80027bc <UART_SetConfig+0x210>
 8002796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800279a:	d802      	bhi.n	80027a2 <UART_SetConfig+0x1f6>
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <UART_SetConfig+0x204>
 80027a0:	e012      	b.n	80027c8 <UART_SetConfig+0x21c>
 80027a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a6:	d006      	beq.n	80027b6 <UART_SetConfig+0x20a>
 80027a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027ac:	d009      	beq.n	80027c2 <UART_SetConfig+0x216>
 80027ae:	e00b      	b.n	80027c8 <UART_SetConfig+0x21c>
 80027b0:	2300      	movs	r3, #0
 80027b2:	77fb      	strb	r3, [r7, #31]
 80027b4:	e0a1      	b.n	80028fa <UART_SetConfig+0x34e>
 80027b6:	2302      	movs	r3, #2
 80027b8:	77fb      	strb	r3, [r7, #31]
 80027ba:	e09e      	b.n	80028fa <UART_SetConfig+0x34e>
 80027bc:	2304      	movs	r3, #4
 80027be:	77fb      	strb	r3, [r7, #31]
 80027c0:	e09b      	b.n	80028fa <UART_SetConfig+0x34e>
 80027c2:	2308      	movs	r3, #8
 80027c4:	77fb      	strb	r3, [r7, #31]
 80027c6:	e098      	b.n	80028fa <UART_SetConfig+0x34e>
 80027c8:	2310      	movs	r3, #16
 80027ca:	77fb      	strb	r3, [r7, #31]
 80027cc:	bf00      	nop
 80027ce:	e094      	b.n	80028fa <UART_SetConfig+0x34e>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a39      	ldr	r2, [pc, #228]	; (80028bc <UART_SetConfig+0x310>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d124      	bne.n	8002824 <UART_SetConfig+0x278>
 80027da:	4b33      	ldr	r3, [pc, #204]	; (80028a8 <UART_SetConfig+0x2fc>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80027e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027e8:	d012      	beq.n	8002810 <UART_SetConfig+0x264>
 80027ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ee:	d802      	bhi.n	80027f6 <UART_SetConfig+0x24a>
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d007      	beq.n	8002804 <UART_SetConfig+0x258>
 80027f4:	e012      	b.n	800281c <UART_SetConfig+0x270>
 80027f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fa:	d006      	beq.n	800280a <UART_SetConfig+0x25e>
 80027fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002800:	d009      	beq.n	8002816 <UART_SetConfig+0x26a>
 8002802:	e00b      	b.n	800281c <UART_SetConfig+0x270>
 8002804:	2301      	movs	r3, #1
 8002806:	77fb      	strb	r3, [r7, #31]
 8002808:	e077      	b.n	80028fa <UART_SetConfig+0x34e>
 800280a:	2302      	movs	r3, #2
 800280c:	77fb      	strb	r3, [r7, #31]
 800280e:	e074      	b.n	80028fa <UART_SetConfig+0x34e>
 8002810:	2304      	movs	r3, #4
 8002812:	77fb      	strb	r3, [r7, #31]
 8002814:	e071      	b.n	80028fa <UART_SetConfig+0x34e>
 8002816:	2308      	movs	r3, #8
 8002818:	77fb      	strb	r3, [r7, #31]
 800281a:	e06e      	b.n	80028fa <UART_SetConfig+0x34e>
 800281c:	2310      	movs	r3, #16
 800281e:	77fb      	strb	r3, [r7, #31]
 8002820:	bf00      	nop
 8002822:	e06a      	b.n	80028fa <UART_SetConfig+0x34e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a25      	ldr	r2, [pc, #148]	; (80028c0 <UART_SetConfig+0x314>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d124      	bne.n	8002878 <UART_SetConfig+0x2cc>
 800282e:	4b1e      	ldr	r3, [pc, #120]	; (80028a8 <UART_SetConfig+0x2fc>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283c:	d012      	beq.n	8002864 <UART_SetConfig+0x2b8>
 800283e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002842:	d802      	bhi.n	800284a <UART_SetConfig+0x29e>
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <UART_SetConfig+0x2ac>
 8002848:	e012      	b.n	8002870 <UART_SetConfig+0x2c4>
 800284a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800284e:	d006      	beq.n	800285e <UART_SetConfig+0x2b2>
 8002850:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002854:	d009      	beq.n	800286a <UART_SetConfig+0x2be>
 8002856:	e00b      	b.n	8002870 <UART_SetConfig+0x2c4>
 8002858:	2300      	movs	r3, #0
 800285a:	77fb      	strb	r3, [r7, #31]
 800285c:	e04d      	b.n	80028fa <UART_SetConfig+0x34e>
 800285e:	2302      	movs	r3, #2
 8002860:	77fb      	strb	r3, [r7, #31]
 8002862:	e04a      	b.n	80028fa <UART_SetConfig+0x34e>
 8002864:	2304      	movs	r3, #4
 8002866:	77fb      	strb	r3, [r7, #31]
 8002868:	e047      	b.n	80028fa <UART_SetConfig+0x34e>
 800286a:	2308      	movs	r3, #8
 800286c:	77fb      	strb	r3, [r7, #31]
 800286e:	e044      	b.n	80028fa <UART_SetConfig+0x34e>
 8002870:	2310      	movs	r3, #16
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	bf00      	nop
 8002876:	e040      	b.n	80028fa <UART_SetConfig+0x34e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a11      	ldr	r2, [pc, #68]	; (80028c4 <UART_SetConfig+0x318>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d139      	bne.n	80028f6 <UART_SetConfig+0x34a>
 8002882:	4b09      	ldr	r3, [pc, #36]	; (80028a8 <UART_SetConfig+0x2fc>)
 8002884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800288c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002890:	d027      	beq.n	80028e2 <UART_SetConfig+0x336>
 8002892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002896:	d817      	bhi.n	80028c8 <UART_SetConfig+0x31c>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d01c      	beq.n	80028d6 <UART_SetConfig+0x32a>
 800289c:	e027      	b.n	80028ee <UART_SetConfig+0x342>
 800289e:	bf00      	nop
 80028a0:	efff69f3 	.word	0xefff69f3
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40004400 	.word	0x40004400
 80028b0:	40004800 	.word	0x40004800
 80028b4:	40004c00 	.word	0x40004c00
 80028b8:	40005000 	.word	0x40005000
 80028bc:	40011400 	.word	0x40011400
 80028c0:	40007800 	.word	0x40007800
 80028c4:	40007c00 	.word	0x40007c00
 80028c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028cc:	d006      	beq.n	80028dc <UART_SetConfig+0x330>
 80028ce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028d2:	d009      	beq.n	80028e8 <UART_SetConfig+0x33c>
 80028d4:	e00b      	b.n	80028ee <UART_SetConfig+0x342>
 80028d6:	2300      	movs	r3, #0
 80028d8:	77fb      	strb	r3, [r7, #31]
 80028da:	e00e      	b.n	80028fa <UART_SetConfig+0x34e>
 80028dc:	2302      	movs	r3, #2
 80028de:	77fb      	strb	r3, [r7, #31]
 80028e0:	e00b      	b.n	80028fa <UART_SetConfig+0x34e>
 80028e2:	2304      	movs	r3, #4
 80028e4:	77fb      	strb	r3, [r7, #31]
 80028e6:	e008      	b.n	80028fa <UART_SetConfig+0x34e>
 80028e8:	2308      	movs	r3, #8
 80028ea:	77fb      	strb	r3, [r7, #31]
 80028ec:	e005      	b.n	80028fa <UART_SetConfig+0x34e>
 80028ee:	2310      	movs	r3, #16
 80028f0:	77fb      	strb	r3, [r7, #31]
 80028f2:	bf00      	nop
 80028f4:	e001      	b.n	80028fa <UART_SetConfig+0x34e>
 80028f6:	2310      	movs	r3, #16
 80028f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002902:	d17f      	bne.n	8002a04 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8002904:	7ffb      	ldrb	r3, [r7, #31]
 8002906:	2b08      	cmp	r3, #8
 8002908:	d85c      	bhi.n	80029c4 <UART_SetConfig+0x418>
 800290a:	a201      	add	r2, pc, #4	; (adr r2, 8002910 <UART_SetConfig+0x364>)
 800290c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002910:	08002935 	.word	0x08002935
 8002914:	08002955 	.word	0x08002955
 8002918:	08002975 	.word	0x08002975
 800291c:	080029c5 	.word	0x080029c5
 8002920:	0800298d 	.word	0x0800298d
 8002924:	080029c5 	.word	0x080029c5
 8002928:	080029c5 	.word	0x080029c5
 800292c:	080029c5 	.word	0x080029c5
 8002930:	080029ad 	.word	0x080029ad
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002934:	f7ff f840 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8002938:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	005a      	lsls	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	085b      	lsrs	r3, r3, #1
 8002944:	441a      	add	r2, r3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	fbb2 f3f3 	udiv	r3, r2, r3
 800294e:	b29b      	uxth	r3, r3
 8002950:	61bb      	str	r3, [r7, #24]
        break;
 8002952:	e03a      	b.n	80029ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002954:	f7ff f844 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002958:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	005a      	lsls	r2, r3, #1
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	441a      	add	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	b29b      	uxth	r3, r3
 8002970:	61bb      	str	r3, [r7, #24]
        break;
 8002972:	e02a      	b.n	80029ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	085a      	lsrs	r2, r3, #1
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <UART_SetConfig+0x54c>)
 800297c:	4413      	add	r3, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6852      	ldr	r2, [r2, #4]
 8002982:	fbb3 f3f2 	udiv	r3, r3, r2
 8002986:	b29b      	uxth	r3, r3
 8002988:	61bb      	str	r3, [r7, #24]
        break;
 800298a:	e01e      	b.n	80029ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298c:	f7fe ff56 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8002990:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	005a      	lsls	r2, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	085b      	lsrs	r3, r3, #1
 800299c:	441a      	add	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	61bb      	str	r3, [r7, #24]
        break;
 80029aa:	e00e      	b.n	80029ca <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	61bb      	str	r3, [r7, #24]
        break;
 80029c2:	e002      	b.n	80029ca <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	75fb      	strb	r3, [r7, #23]
        break;
 80029c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	2b0f      	cmp	r3, #15
 80029ce:	d916      	bls.n	80029fe <UART_SetConfig+0x452>
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d6:	d212      	bcs.n	80029fe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f023 030f 	bic.w	r3, r3, #15
 80029e0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	897a      	ldrh	r2, [r7, #10]
 80029fa:	60da      	str	r2, [r3, #12]
 80029fc:	e070      	b.n	8002ae0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	75fb      	strb	r3, [r7, #23]
 8002a02:	e06d      	b.n	8002ae0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8002a04:	7ffb      	ldrb	r3, [r7, #31]
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d859      	bhi.n	8002abe <UART_SetConfig+0x512>
 8002a0a:	a201      	add	r2, pc, #4	; (adr r2, 8002a10 <UART_SetConfig+0x464>)
 8002a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a10:	08002a35 	.word	0x08002a35
 8002a14:	08002a53 	.word	0x08002a53
 8002a18:	08002a71 	.word	0x08002a71
 8002a1c:	08002abf 	.word	0x08002abf
 8002a20:	08002a89 	.word	0x08002a89
 8002a24:	08002abf 	.word	0x08002abf
 8002a28:	08002abf 	.word	0x08002abf
 8002a2c:	08002abf 	.word	0x08002abf
 8002a30:	08002aa7 	.word	0x08002aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a34:	f7fe ffc0 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 8002a38:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	085a      	lsrs	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	441a      	add	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	61bb      	str	r3, [r7, #24]
        break;
 8002a50:	e038      	b.n	8002ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a52:	f7fe ffc5 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 8002a56:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	085a      	lsrs	r2, r3, #1
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	441a      	add	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	61bb      	str	r3, [r7, #24]
        break;
 8002a6e:	e029      	b.n	8002ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	085a      	lsrs	r2, r3, #1
 8002a76:	4b21      	ldr	r3, [pc, #132]	; (8002afc <UART_SetConfig+0x550>)
 8002a78:	4413      	add	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6852      	ldr	r2, [r2, #4]
 8002a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	61bb      	str	r3, [r7, #24]
        break;
 8002a86:	e01d      	b.n	8002ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a88:	f7fe fed8 	bl	800183c <HAL_RCC_GetSysClockFreq>
 8002a8c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	085a      	lsrs	r2, r3, #1
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	441a      	add	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	61bb      	str	r3, [r7, #24]
        break;
 8002aa4:	e00e      	b.n	8002ac4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	085b      	lsrs	r3, r3, #1
 8002aac:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	61bb      	str	r3, [r7, #24]
        break;
 8002abc:	e002      	b.n	8002ac4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
        break;
 8002ac2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	2b0f      	cmp	r3, #15
 8002ac8:	d908      	bls.n	8002adc <UART_SetConfig+0x530>
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad0:	d204      	bcs.n	8002adc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	e001      	b.n	8002ae0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	01e84800 	.word	0x01e84800
 8002afc:	00f42400 	.word	0x00f42400

08002b00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00a      	beq.n	8002b2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d00a      	beq.n	8002b4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00a      	beq.n	8002b6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00a      	beq.n	8002b90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	f003 0310 	and.w	r3, r3, #16
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	430a      	orrs	r2, r1
 8002bb0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	f003 0320 	and.w	r3, r3, #32
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01a      	beq.n	8002c16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	430a      	orrs	r2, r1
 8002bf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bfe:	d10a      	bne.n	8002c16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00a      	beq.n	8002c38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	605a      	str	r2, [r3, #4]
  }
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002c52:	f7fd ff81 	bl	8000b58 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0308 	and.w	r3, r3, #8
 8002c62:	2b08      	cmp	r3, #8
 8002c64:	d10e      	bne.n	8002c84 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c66:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 f82a 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d001      	beq.n	8002c84 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e020      	b.n	8002cc6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d10e      	bne.n	8002cb0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f814 	bl	8002cce <UART_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e00a      	b.n	8002cc6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2220      	movs	r2, #32
 8002cba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	603b      	str	r3, [r7, #0]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cde:	e05d      	b.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ce6:	d059      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ce8:	f7fd ff36 	bl	8000b58 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d302      	bcc.n	8002cfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d11b      	bne.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d0c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0201 	bic.w	r2, r2, #1
 8002d1c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2220      	movs	r2, #32
 8002d22:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2220      	movs	r2, #32
 8002d28:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e042      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d02b      	beq.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d52:	d123      	bne.n	8002d9c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d5c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d6c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 0201 	bic.w	r2, r2, #1
 8002d7c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2220      	movs	r2, #32
 8002d82:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e00f      	b.n	8002dbc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	69da      	ldr	r2, [r3, #28]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	4013      	ands	r3, r2
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	bf0c      	ite	eq
 8002dac:	2301      	moveq	r3, #1
 8002dae:	2300      	movne	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	461a      	mov	r2, r3
 8002db4:	79fb      	ldrb	r3, [r7, #7]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d092      	beq.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3710      	adds	r7, #16
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <__errno>:
 8002dc4:	4b01      	ldr	r3, [pc, #4]	; (8002dcc <__errno+0x8>)
 8002dc6:	6818      	ldr	r0, [r3, #0]
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	20000010 	.word	0x20000010

08002dd0 <__libc_init_array>:
 8002dd0:	b570      	push	{r4, r5, r6, lr}
 8002dd2:	4e0d      	ldr	r6, [pc, #52]	; (8002e08 <__libc_init_array+0x38>)
 8002dd4:	4c0d      	ldr	r4, [pc, #52]	; (8002e0c <__libc_init_array+0x3c>)
 8002dd6:	1ba4      	subs	r4, r4, r6
 8002dd8:	10a4      	asrs	r4, r4, #2
 8002dda:	2500      	movs	r5, #0
 8002ddc:	42a5      	cmp	r5, r4
 8002dde:	d109      	bne.n	8002df4 <__libc_init_array+0x24>
 8002de0:	4e0b      	ldr	r6, [pc, #44]	; (8002e10 <__libc_init_array+0x40>)
 8002de2:	4c0c      	ldr	r4, [pc, #48]	; (8002e14 <__libc_init_array+0x44>)
 8002de4:	f000 fc26 	bl	8003634 <_init>
 8002de8:	1ba4      	subs	r4, r4, r6
 8002dea:	10a4      	asrs	r4, r4, #2
 8002dec:	2500      	movs	r5, #0
 8002dee:	42a5      	cmp	r5, r4
 8002df0:	d105      	bne.n	8002dfe <__libc_init_array+0x2e>
 8002df2:	bd70      	pop	{r4, r5, r6, pc}
 8002df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002df8:	4798      	blx	r3
 8002dfa:	3501      	adds	r5, #1
 8002dfc:	e7ee      	b.n	8002ddc <__libc_init_array+0xc>
 8002dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e02:	4798      	blx	r3
 8002e04:	3501      	adds	r5, #1
 8002e06:	e7f2      	b.n	8002dee <__libc_init_array+0x1e>
 8002e08:	0800375c 	.word	0x0800375c
 8002e0c:	0800375c 	.word	0x0800375c
 8002e10:	0800375c 	.word	0x0800375c
 8002e14:	08003760 	.word	0x08003760

08002e18 <memset>:
 8002e18:	4402      	add	r2, r0
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d100      	bne.n	8002e22 <memset+0xa>
 8002e20:	4770      	bx	lr
 8002e22:	f803 1b01 	strb.w	r1, [r3], #1
 8002e26:	e7f9      	b.n	8002e1c <memset+0x4>

08002e28 <siprintf>:
 8002e28:	b40e      	push	{r1, r2, r3}
 8002e2a:	b500      	push	{lr}
 8002e2c:	b09c      	sub	sp, #112	; 0x70
 8002e2e:	ab1d      	add	r3, sp, #116	; 0x74
 8002e30:	9002      	str	r0, [sp, #8]
 8002e32:	9006      	str	r0, [sp, #24]
 8002e34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002e38:	4809      	ldr	r0, [pc, #36]	; (8002e60 <siprintf+0x38>)
 8002e3a:	9107      	str	r1, [sp, #28]
 8002e3c:	9104      	str	r1, [sp, #16]
 8002e3e:	4909      	ldr	r1, [pc, #36]	; (8002e64 <siprintf+0x3c>)
 8002e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8002e44:	9105      	str	r1, [sp, #20]
 8002e46:	6800      	ldr	r0, [r0, #0]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	a902      	add	r1, sp, #8
 8002e4c:	f000 f866 	bl	8002f1c <_svfiprintf_r>
 8002e50:	9b02      	ldr	r3, [sp, #8]
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
 8002e56:	b01c      	add	sp, #112	; 0x70
 8002e58:	f85d eb04 	ldr.w	lr, [sp], #4
 8002e5c:	b003      	add	sp, #12
 8002e5e:	4770      	bx	lr
 8002e60:	20000010 	.word	0x20000010
 8002e64:	ffff0208 	.word	0xffff0208

08002e68 <__ssputs_r>:
 8002e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e6c:	688e      	ldr	r6, [r1, #8]
 8002e6e:	429e      	cmp	r6, r3
 8002e70:	4682      	mov	sl, r0
 8002e72:	460c      	mov	r4, r1
 8002e74:	4690      	mov	r8, r2
 8002e76:	4699      	mov	r9, r3
 8002e78:	d837      	bhi.n	8002eea <__ssputs_r+0x82>
 8002e7a:	898a      	ldrh	r2, [r1, #12]
 8002e7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002e80:	d031      	beq.n	8002ee6 <__ssputs_r+0x7e>
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	6909      	ldr	r1, [r1, #16]
 8002e86:	1a6f      	subs	r7, r5, r1
 8002e88:	6965      	ldr	r5, [r4, #20]
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e90:	fb95 f5f3 	sdiv	r5, r5, r3
 8002e94:	f109 0301 	add.w	r3, r9, #1
 8002e98:	443b      	add	r3, r7
 8002e9a:	429d      	cmp	r5, r3
 8002e9c:	bf38      	it	cc
 8002e9e:	461d      	movcc	r5, r3
 8002ea0:	0553      	lsls	r3, r2, #21
 8002ea2:	d530      	bpl.n	8002f06 <__ssputs_r+0x9e>
 8002ea4:	4629      	mov	r1, r5
 8002ea6:	f000 fb2b 	bl	8003500 <_malloc_r>
 8002eaa:	4606      	mov	r6, r0
 8002eac:	b950      	cbnz	r0, 8002ec4 <__ssputs_r+0x5c>
 8002eae:	230c      	movs	r3, #12
 8002eb0:	f8ca 3000 	str.w	r3, [sl]
 8002eb4:	89a3      	ldrh	r3, [r4, #12]
 8002eb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eba:	81a3      	strh	r3, [r4, #12]
 8002ebc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ec4:	463a      	mov	r2, r7
 8002ec6:	6921      	ldr	r1, [r4, #16]
 8002ec8:	f000 faa8 	bl	800341c <memcpy>
 8002ecc:	89a3      	ldrh	r3, [r4, #12]
 8002ece:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed6:	81a3      	strh	r3, [r4, #12]
 8002ed8:	6126      	str	r6, [r4, #16]
 8002eda:	6165      	str	r5, [r4, #20]
 8002edc:	443e      	add	r6, r7
 8002ede:	1bed      	subs	r5, r5, r7
 8002ee0:	6026      	str	r6, [r4, #0]
 8002ee2:	60a5      	str	r5, [r4, #8]
 8002ee4:	464e      	mov	r6, r9
 8002ee6:	454e      	cmp	r6, r9
 8002ee8:	d900      	bls.n	8002eec <__ssputs_r+0x84>
 8002eea:	464e      	mov	r6, r9
 8002eec:	4632      	mov	r2, r6
 8002eee:	4641      	mov	r1, r8
 8002ef0:	6820      	ldr	r0, [r4, #0]
 8002ef2:	f000 fa9e 	bl	8003432 <memmove>
 8002ef6:	68a3      	ldr	r3, [r4, #8]
 8002ef8:	1b9b      	subs	r3, r3, r6
 8002efa:	60a3      	str	r3, [r4, #8]
 8002efc:	6823      	ldr	r3, [r4, #0]
 8002efe:	441e      	add	r6, r3
 8002f00:	6026      	str	r6, [r4, #0]
 8002f02:	2000      	movs	r0, #0
 8002f04:	e7dc      	b.n	8002ec0 <__ssputs_r+0x58>
 8002f06:	462a      	mov	r2, r5
 8002f08:	f000 fb54 	bl	80035b4 <_realloc_r>
 8002f0c:	4606      	mov	r6, r0
 8002f0e:	2800      	cmp	r0, #0
 8002f10:	d1e2      	bne.n	8002ed8 <__ssputs_r+0x70>
 8002f12:	6921      	ldr	r1, [r4, #16]
 8002f14:	4650      	mov	r0, sl
 8002f16:	f000 faa5 	bl	8003464 <_free_r>
 8002f1a:	e7c8      	b.n	8002eae <__ssputs_r+0x46>

08002f1c <_svfiprintf_r>:
 8002f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f20:	461d      	mov	r5, r3
 8002f22:	898b      	ldrh	r3, [r1, #12]
 8002f24:	061f      	lsls	r7, r3, #24
 8002f26:	b09d      	sub	sp, #116	; 0x74
 8002f28:	4680      	mov	r8, r0
 8002f2a:	460c      	mov	r4, r1
 8002f2c:	4616      	mov	r6, r2
 8002f2e:	d50f      	bpl.n	8002f50 <_svfiprintf_r+0x34>
 8002f30:	690b      	ldr	r3, [r1, #16]
 8002f32:	b96b      	cbnz	r3, 8002f50 <_svfiprintf_r+0x34>
 8002f34:	2140      	movs	r1, #64	; 0x40
 8002f36:	f000 fae3 	bl	8003500 <_malloc_r>
 8002f3a:	6020      	str	r0, [r4, #0]
 8002f3c:	6120      	str	r0, [r4, #16]
 8002f3e:	b928      	cbnz	r0, 8002f4c <_svfiprintf_r+0x30>
 8002f40:	230c      	movs	r3, #12
 8002f42:	f8c8 3000 	str.w	r3, [r8]
 8002f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f4a:	e0c8      	b.n	80030de <_svfiprintf_r+0x1c2>
 8002f4c:	2340      	movs	r3, #64	; 0x40
 8002f4e:	6163      	str	r3, [r4, #20]
 8002f50:	2300      	movs	r3, #0
 8002f52:	9309      	str	r3, [sp, #36]	; 0x24
 8002f54:	2320      	movs	r3, #32
 8002f56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002f5a:	2330      	movs	r3, #48	; 0x30
 8002f5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002f60:	9503      	str	r5, [sp, #12]
 8002f62:	f04f 0b01 	mov.w	fp, #1
 8002f66:	4637      	mov	r7, r6
 8002f68:	463d      	mov	r5, r7
 8002f6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002f6e:	b10b      	cbz	r3, 8002f74 <_svfiprintf_r+0x58>
 8002f70:	2b25      	cmp	r3, #37	; 0x25
 8002f72:	d13e      	bne.n	8002ff2 <_svfiprintf_r+0xd6>
 8002f74:	ebb7 0a06 	subs.w	sl, r7, r6
 8002f78:	d00b      	beq.n	8002f92 <_svfiprintf_r+0x76>
 8002f7a:	4653      	mov	r3, sl
 8002f7c:	4632      	mov	r2, r6
 8002f7e:	4621      	mov	r1, r4
 8002f80:	4640      	mov	r0, r8
 8002f82:	f7ff ff71 	bl	8002e68 <__ssputs_r>
 8002f86:	3001      	adds	r0, #1
 8002f88:	f000 80a4 	beq.w	80030d4 <_svfiprintf_r+0x1b8>
 8002f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f8e:	4453      	add	r3, sl
 8002f90:	9309      	str	r3, [sp, #36]	; 0x24
 8002f92:	783b      	ldrb	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 809d 	beq.w	80030d4 <_svfiprintf_r+0x1b8>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002fa0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002fa4:	9304      	str	r3, [sp, #16]
 8002fa6:	9307      	str	r3, [sp, #28]
 8002fa8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002fac:	931a      	str	r3, [sp, #104]	; 0x68
 8002fae:	462f      	mov	r7, r5
 8002fb0:	2205      	movs	r2, #5
 8002fb2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002fb6:	4850      	ldr	r0, [pc, #320]	; (80030f8 <_svfiprintf_r+0x1dc>)
 8002fb8:	f7fd f94a 	bl	8000250 <memchr>
 8002fbc:	9b04      	ldr	r3, [sp, #16]
 8002fbe:	b9d0      	cbnz	r0, 8002ff6 <_svfiprintf_r+0xda>
 8002fc0:	06d9      	lsls	r1, r3, #27
 8002fc2:	bf44      	itt	mi
 8002fc4:	2220      	movmi	r2, #32
 8002fc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fca:	071a      	lsls	r2, r3, #28
 8002fcc:	bf44      	itt	mi
 8002fce:	222b      	movmi	r2, #43	; 0x2b
 8002fd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002fd4:	782a      	ldrb	r2, [r5, #0]
 8002fd6:	2a2a      	cmp	r2, #42	; 0x2a
 8002fd8:	d015      	beq.n	8003006 <_svfiprintf_r+0xea>
 8002fda:	9a07      	ldr	r2, [sp, #28]
 8002fdc:	462f      	mov	r7, r5
 8002fde:	2000      	movs	r0, #0
 8002fe0:	250a      	movs	r5, #10
 8002fe2:	4639      	mov	r1, r7
 8002fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002fe8:	3b30      	subs	r3, #48	; 0x30
 8002fea:	2b09      	cmp	r3, #9
 8002fec:	d94d      	bls.n	800308a <_svfiprintf_r+0x16e>
 8002fee:	b1b8      	cbz	r0, 8003020 <_svfiprintf_r+0x104>
 8002ff0:	e00f      	b.n	8003012 <_svfiprintf_r+0xf6>
 8002ff2:	462f      	mov	r7, r5
 8002ff4:	e7b8      	b.n	8002f68 <_svfiprintf_r+0x4c>
 8002ff6:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <_svfiprintf_r+0x1dc>)
 8002ff8:	1a80      	subs	r0, r0, r2
 8002ffa:	fa0b f000 	lsl.w	r0, fp, r0
 8002ffe:	4318      	orrs	r0, r3
 8003000:	9004      	str	r0, [sp, #16]
 8003002:	463d      	mov	r5, r7
 8003004:	e7d3      	b.n	8002fae <_svfiprintf_r+0x92>
 8003006:	9a03      	ldr	r2, [sp, #12]
 8003008:	1d11      	adds	r1, r2, #4
 800300a:	6812      	ldr	r2, [r2, #0]
 800300c:	9103      	str	r1, [sp, #12]
 800300e:	2a00      	cmp	r2, #0
 8003010:	db01      	blt.n	8003016 <_svfiprintf_r+0xfa>
 8003012:	9207      	str	r2, [sp, #28]
 8003014:	e004      	b.n	8003020 <_svfiprintf_r+0x104>
 8003016:	4252      	negs	r2, r2
 8003018:	f043 0302 	orr.w	r3, r3, #2
 800301c:	9207      	str	r2, [sp, #28]
 800301e:	9304      	str	r3, [sp, #16]
 8003020:	783b      	ldrb	r3, [r7, #0]
 8003022:	2b2e      	cmp	r3, #46	; 0x2e
 8003024:	d10c      	bne.n	8003040 <_svfiprintf_r+0x124>
 8003026:	787b      	ldrb	r3, [r7, #1]
 8003028:	2b2a      	cmp	r3, #42	; 0x2a
 800302a:	d133      	bne.n	8003094 <_svfiprintf_r+0x178>
 800302c:	9b03      	ldr	r3, [sp, #12]
 800302e:	1d1a      	adds	r2, r3, #4
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	9203      	str	r2, [sp, #12]
 8003034:	2b00      	cmp	r3, #0
 8003036:	bfb8      	it	lt
 8003038:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800303c:	3702      	adds	r7, #2
 800303e:	9305      	str	r3, [sp, #20]
 8003040:	4d2e      	ldr	r5, [pc, #184]	; (80030fc <_svfiprintf_r+0x1e0>)
 8003042:	7839      	ldrb	r1, [r7, #0]
 8003044:	2203      	movs	r2, #3
 8003046:	4628      	mov	r0, r5
 8003048:	f7fd f902 	bl	8000250 <memchr>
 800304c:	b138      	cbz	r0, 800305e <_svfiprintf_r+0x142>
 800304e:	2340      	movs	r3, #64	; 0x40
 8003050:	1b40      	subs	r0, r0, r5
 8003052:	fa03 f000 	lsl.w	r0, r3, r0
 8003056:	9b04      	ldr	r3, [sp, #16]
 8003058:	4303      	orrs	r3, r0
 800305a:	3701      	adds	r7, #1
 800305c:	9304      	str	r3, [sp, #16]
 800305e:	7839      	ldrb	r1, [r7, #0]
 8003060:	4827      	ldr	r0, [pc, #156]	; (8003100 <_svfiprintf_r+0x1e4>)
 8003062:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003066:	2206      	movs	r2, #6
 8003068:	1c7e      	adds	r6, r7, #1
 800306a:	f7fd f8f1 	bl	8000250 <memchr>
 800306e:	2800      	cmp	r0, #0
 8003070:	d038      	beq.n	80030e4 <_svfiprintf_r+0x1c8>
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <_svfiprintf_r+0x1e8>)
 8003074:	bb13      	cbnz	r3, 80030bc <_svfiprintf_r+0x1a0>
 8003076:	9b03      	ldr	r3, [sp, #12]
 8003078:	3307      	adds	r3, #7
 800307a:	f023 0307 	bic.w	r3, r3, #7
 800307e:	3308      	adds	r3, #8
 8003080:	9303      	str	r3, [sp, #12]
 8003082:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003084:	444b      	add	r3, r9
 8003086:	9309      	str	r3, [sp, #36]	; 0x24
 8003088:	e76d      	b.n	8002f66 <_svfiprintf_r+0x4a>
 800308a:	fb05 3202 	mla	r2, r5, r2, r3
 800308e:	2001      	movs	r0, #1
 8003090:	460f      	mov	r7, r1
 8003092:	e7a6      	b.n	8002fe2 <_svfiprintf_r+0xc6>
 8003094:	2300      	movs	r3, #0
 8003096:	3701      	adds	r7, #1
 8003098:	9305      	str	r3, [sp, #20]
 800309a:	4619      	mov	r1, r3
 800309c:	250a      	movs	r5, #10
 800309e:	4638      	mov	r0, r7
 80030a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80030a4:	3a30      	subs	r2, #48	; 0x30
 80030a6:	2a09      	cmp	r2, #9
 80030a8:	d903      	bls.n	80030b2 <_svfiprintf_r+0x196>
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d0c8      	beq.n	8003040 <_svfiprintf_r+0x124>
 80030ae:	9105      	str	r1, [sp, #20]
 80030b0:	e7c6      	b.n	8003040 <_svfiprintf_r+0x124>
 80030b2:	fb05 2101 	mla	r1, r5, r1, r2
 80030b6:	2301      	movs	r3, #1
 80030b8:	4607      	mov	r7, r0
 80030ba:	e7f0      	b.n	800309e <_svfiprintf_r+0x182>
 80030bc:	ab03      	add	r3, sp, #12
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	4622      	mov	r2, r4
 80030c2:	4b11      	ldr	r3, [pc, #68]	; (8003108 <_svfiprintf_r+0x1ec>)
 80030c4:	a904      	add	r1, sp, #16
 80030c6:	4640      	mov	r0, r8
 80030c8:	f3af 8000 	nop.w
 80030cc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80030d0:	4681      	mov	r9, r0
 80030d2:	d1d6      	bne.n	8003082 <_svfiprintf_r+0x166>
 80030d4:	89a3      	ldrh	r3, [r4, #12]
 80030d6:	065b      	lsls	r3, r3, #25
 80030d8:	f53f af35 	bmi.w	8002f46 <_svfiprintf_r+0x2a>
 80030dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80030de:	b01d      	add	sp, #116	; 0x74
 80030e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030e4:	ab03      	add	r3, sp, #12
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	4622      	mov	r2, r4
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <_svfiprintf_r+0x1ec>)
 80030ec:	a904      	add	r1, sp, #16
 80030ee:	4640      	mov	r0, r8
 80030f0:	f000 f882 	bl	80031f8 <_printf_i>
 80030f4:	e7ea      	b.n	80030cc <_svfiprintf_r+0x1b0>
 80030f6:	bf00      	nop
 80030f8:	08003720 	.word	0x08003720
 80030fc:	08003726 	.word	0x08003726
 8003100:	0800372a 	.word	0x0800372a
 8003104:	00000000 	.word	0x00000000
 8003108:	08002e69 	.word	0x08002e69

0800310c <_printf_common>:
 800310c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003110:	4691      	mov	r9, r2
 8003112:	461f      	mov	r7, r3
 8003114:	688a      	ldr	r2, [r1, #8]
 8003116:	690b      	ldr	r3, [r1, #16]
 8003118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800311c:	4293      	cmp	r3, r2
 800311e:	bfb8      	it	lt
 8003120:	4613      	movlt	r3, r2
 8003122:	f8c9 3000 	str.w	r3, [r9]
 8003126:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800312a:	4606      	mov	r6, r0
 800312c:	460c      	mov	r4, r1
 800312e:	b112      	cbz	r2, 8003136 <_printf_common+0x2a>
 8003130:	3301      	adds	r3, #1
 8003132:	f8c9 3000 	str.w	r3, [r9]
 8003136:	6823      	ldr	r3, [r4, #0]
 8003138:	0699      	lsls	r1, r3, #26
 800313a:	bf42      	ittt	mi
 800313c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003140:	3302      	addmi	r3, #2
 8003142:	f8c9 3000 	strmi.w	r3, [r9]
 8003146:	6825      	ldr	r5, [r4, #0]
 8003148:	f015 0506 	ands.w	r5, r5, #6
 800314c:	d107      	bne.n	800315e <_printf_common+0x52>
 800314e:	f104 0a19 	add.w	sl, r4, #25
 8003152:	68e3      	ldr	r3, [r4, #12]
 8003154:	f8d9 2000 	ldr.w	r2, [r9]
 8003158:	1a9b      	subs	r3, r3, r2
 800315a:	42ab      	cmp	r3, r5
 800315c:	dc28      	bgt.n	80031b0 <_printf_common+0xa4>
 800315e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003162:	6822      	ldr	r2, [r4, #0]
 8003164:	3300      	adds	r3, #0
 8003166:	bf18      	it	ne
 8003168:	2301      	movne	r3, #1
 800316a:	0692      	lsls	r2, r2, #26
 800316c:	d42d      	bmi.n	80031ca <_printf_common+0xbe>
 800316e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003172:	4639      	mov	r1, r7
 8003174:	4630      	mov	r0, r6
 8003176:	47c0      	blx	r8
 8003178:	3001      	adds	r0, #1
 800317a:	d020      	beq.n	80031be <_printf_common+0xb2>
 800317c:	6823      	ldr	r3, [r4, #0]
 800317e:	68e5      	ldr	r5, [r4, #12]
 8003180:	f8d9 2000 	ldr.w	r2, [r9]
 8003184:	f003 0306 	and.w	r3, r3, #6
 8003188:	2b04      	cmp	r3, #4
 800318a:	bf08      	it	eq
 800318c:	1aad      	subeq	r5, r5, r2
 800318e:	68a3      	ldr	r3, [r4, #8]
 8003190:	6922      	ldr	r2, [r4, #16]
 8003192:	bf0c      	ite	eq
 8003194:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003198:	2500      	movne	r5, #0
 800319a:	4293      	cmp	r3, r2
 800319c:	bfc4      	itt	gt
 800319e:	1a9b      	subgt	r3, r3, r2
 80031a0:	18ed      	addgt	r5, r5, r3
 80031a2:	f04f 0900 	mov.w	r9, #0
 80031a6:	341a      	adds	r4, #26
 80031a8:	454d      	cmp	r5, r9
 80031aa:	d11a      	bne.n	80031e2 <_printf_common+0xd6>
 80031ac:	2000      	movs	r0, #0
 80031ae:	e008      	b.n	80031c2 <_printf_common+0xb6>
 80031b0:	2301      	movs	r3, #1
 80031b2:	4652      	mov	r2, sl
 80031b4:	4639      	mov	r1, r7
 80031b6:	4630      	mov	r0, r6
 80031b8:	47c0      	blx	r8
 80031ba:	3001      	adds	r0, #1
 80031bc:	d103      	bne.n	80031c6 <_printf_common+0xba>
 80031be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031c6:	3501      	adds	r5, #1
 80031c8:	e7c3      	b.n	8003152 <_printf_common+0x46>
 80031ca:	18e1      	adds	r1, r4, r3
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	2030      	movs	r0, #48	; 0x30
 80031d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80031d4:	4422      	add	r2, r4
 80031d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80031da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80031de:	3302      	adds	r3, #2
 80031e0:	e7c5      	b.n	800316e <_printf_common+0x62>
 80031e2:	2301      	movs	r3, #1
 80031e4:	4622      	mov	r2, r4
 80031e6:	4639      	mov	r1, r7
 80031e8:	4630      	mov	r0, r6
 80031ea:	47c0      	blx	r8
 80031ec:	3001      	adds	r0, #1
 80031ee:	d0e6      	beq.n	80031be <_printf_common+0xb2>
 80031f0:	f109 0901 	add.w	r9, r9, #1
 80031f4:	e7d8      	b.n	80031a8 <_printf_common+0x9c>
	...

080031f8 <_printf_i>:
 80031f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80031fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003200:	460c      	mov	r4, r1
 8003202:	7e09      	ldrb	r1, [r1, #24]
 8003204:	b085      	sub	sp, #20
 8003206:	296e      	cmp	r1, #110	; 0x6e
 8003208:	4617      	mov	r7, r2
 800320a:	4606      	mov	r6, r0
 800320c:	4698      	mov	r8, r3
 800320e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003210:	f000 80b3 	beq.w	800337a <_printf_i+0x182>
 8003214:	d822      	bhi.n	800325c <_printf_i+0x64>
 8003216:	2963      	cmp	r1, #99	; 0x63
 8003218:	d036      	beq.n	8003288 <_printf_i+0x90>
 800321a:	d80a      	bhi.n	8003232 <_printf_i+0x3a>
 800321c:	2900      	cmp	r1, #0
 800321e:	f000 80b9 	beq.w	8003394 <_printf_i+0x19c>
 8003222:	2958      	cmp	r1, #88	; 0x58
 8003224:	f000 8083 	beq.w	800332e <_printf_i+0x136>
 8003228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800322c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003230:	e032      	b.n	8003298 <_printf_i+0xa0>
 8003232:	2964      	cmp	r1, #100	; 0x64
 8003234:	d001      	beq.n	800323a <_printf_i+0x42>
 8003236:	2969      	cmp	r1, #105	; 0x69
 8003238:	d1f6      	bne.n	8003228 <_printf_i+0x30>
 800323a:	6820      	ldr	r0, [r4, #0]
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	0605      	lsls	r5, r0, #24
 8003240:	f103 0104 	add.w	r1, r3, #4
 8003244:	d52a      	bpl.n	800329c <_printf_i+0xa4>
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6011      	str	r1, [r2, #0]
 800324a:	2b00      	cmp	r3, #0
 800324c:	da03      	bge.n	8003256 <_printf_i+0x5e>
 800324e:	222d      	movs	r2, #45	; 0x2d
 8003250:	425b      	negs	r3, r3
 8003252:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003256:	486f      	ldr	r0, [pc, #444]	; (8003414 <_printf_i+0x21c>)
 8003258:	220a      	movs	r2, #10
 800325a:	e039      	b.n	80032d0 <_printf_i+0xd8>
 800325c:	2973      	cmp	r1, #115	; 0x73
 800325e:	f000 809d 	beq.w	800339c <_printf_i+0x1a4>
 8003262:	d808      	bhi.n	8003276 <_printf_i+0x7e>
 8003264:	296f      	cmp	r1, #111	; 0x6f
 8003266:	d020      	beq.n	80032aa <_printf_i+0xb2>
 8003268:	2970      	cmp	r1, #112	; 0x70
 800326a:	d1dd      	bne.n	8003228 <_printf_i+0x30>
 800326c:	6823      	ldr	r3, [r4, #0]
 800326e:	f043 0320 	orr.w	r3, r3, #32
 8003272:	6023      	str	r3, [r4, #0]
 8003274:	e003      	b.n	800327e <_printf_i+0x86>
 8003276:	2975      	cmp	r1, #117	; 0x75
 8003278:	d017      	beq.n	80032aa <_printf_i+0xb2>
 800327a:	2978      	cmp	r1, #120	; 0x78
 800327c:	d1d4      	bne.n	8003228 <_printf_i+0x30>
 800327e:	2378      	movs	r3, #120	; 0x78
 8003280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003284:	4864      	ldr	r0, [pc, #400]	; (8003418 <_printf_i+0x220>)
 8003286:	e055      	b.n	8003334 <_printf_i+0x13c>
 8003288:	6813      	ldr	r3, [r2, #0]
 800328a:	1d19      	adds	r1, r3, #4
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6011      	str	r1, [r2, #0]
 8003290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003294:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003298:	2301      	movs	r3, #1
 800329a:	e08c      	b.n	80033b6 <_printf_i+0x1be>
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6011      	str	r1, [r2, #0]
 80032a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80032a4:	bf18      	it	ne
 80032a6:	b21b      	sxthne	r3, r3
 80032a8:	e7cf      	b.n	800324a <_printf_i+0x52>
 80032aa:	6813      	ldr	r3, [r2, #0]
 80032ac:	6825      	ldr	r5, [r4, #0]
 80032ae:	1d18      	adds	r0, r3, #4
 80032b0:	6010      	str	r0, [r2, #0]
 80032b2:	0628      	lsls	r0, r5, #24
 80032b4:	d501      	bpl.n	80032ba <_printf_i+0xc2>
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	e002      	b.n	80032c0 <_printf_i+0xc8>
 80032ba:	0668      	lsls	r0, r5, #25
 80032bc:	d5fb      	bpl.n	80032b6 <_printf_i+0xbe>
 80032be:	881b      	ldrh	r3, [r3, #0]
 80032c0:	4854      	ldr	r0, [pc, #336]	; (8003414 <_printf_i+0x21c>)
 80032c2:	296f      	cmp	r1, #111	; 0x6f
 80032c4:	bf14      	ite	ne
 80032c6:	220a      	movne	r2, #10
 80032c8:	2208      	moveq	r2, #8
 80032ca:	2100      	movs	r1, #0
 80032cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80032d0:	6865      	ldr	r5, [r4, #4]
 80032d2:	60a5      	str	r5, [r4, #8]
 80032d4:	2d00      	cmp	r5, #0
 80032d6:	f2c0 8095 	blt.w	8003404 <_printf_i+0x20c>
 80032da:	6821      	ldr	r1, [r4, #0]
 80032dc:	f021 0104 	bic.w	r1, r1, #4
 80032e0:	6021      	str	r1, [r4, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d13d      	bne.n	8003362 <_printf_i+0x16a>
 80032e6:	2d00      	cmp	r5, #0
 80032e8:	f040 808e 	bne.w	8003408 <_printf_i+0x210>
 80032ec:	4665      	mov	r5, ip
 80032ee:	2a08      	cmp	r2, #8
 80032f0:	d10b      	bne.n	800330a <_printf_i+0x112>
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	07db      	lsls	r3, r3, #31
 80032f6:	d508      	bpl.n	800330a <_printf_i+0x112>
 80032f8:	6923      	ldr	r3, [r4, #16]
 80032fa:	6862      	ldr	r2, [r4, #4]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	bfde      	ittt	le
 8003300:	2330      	movle	r3, #48	; 0x30
 8003302:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003306:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800330a:	ebac 0305 	sub.w	r3, ip, r5
 800330e:	6123      	str	r3, [r4, #16]
 8003310:	f8cd 8000 	str.w	r8, [sp]
 8003314:	463b      	mov	r3, r7
 8003316:	aa03      	add	r2, sp, #12
 8003318:	4621      	mov	r1, r4
 800331a:	4630      	mov	r0, r6
 800331c:	f7ff fef6 	bl	800310c <_printf_common>
 8003320:	3001      	adds	r0, #1
 8003322:	d14d      	bne.n	80033c0 <_printf_i+0x1c8>
 8003324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003328:	b005      	add	sp, #20
 800332a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800332e:	4839      	ldr	r0, [pc, #228]	; (8003414 <_printf_i+0x21c>)
 8003330:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003334:	6813      	ldr	r3, [r2, #0]
 8003336:	6821      	ldr	r1, [r4, #0]
 8003338:	1d1d      	adds	r5, r3, #4
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6015      	str	r5, [r2, #0]
 800333e:	060a      	lsls	r2, r1, #24
 8003340:	d50b      	bpl.n	800335a <_printf_i+0x162>
 8003342:	07ca      	lsls	r2, r1, #31
 8003344:	bf44      	itt	mi
 8003346:	f041 0120 	orrmi.w	r1, r1, #32
 800334a:	6021      	strmi	r1, [r4, #0]
 800334c:	b91b      	cbnz	r3, 8003356 <_printf_i+0x15e>
 800334e:	6822      	ldr	r2, [r4, #0]
 8003350:	f022 0220 	bic.w	r2, r2, #32
 8003354:	6022      	str	r2, [r4, #0]
 8003356:	2210      	movs	r2, #16
 8003358:	e7b7      	b.n	80032ca <_printf_i+0xd2>
 800335a:	064d      	lsls	r5, r1, #25
 800335c:	bf48      	it	mi
 800335e:	b29b      	uxthmi	r3, r3
 8003360:	e7ef      	b.n	8003342 <_printf_i+0x14a>
 8003362:	4665      	mov	r5, ip
 8003364:	fbb3 f1f2 	udiv	r1, r3, r2
 8003368:	fb02 3311 	mls	r3, r2, r1, r3
 800336c:	5cc3      	ldrb	r3, [r0, r3]
 800336e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003372:	460b      	mov	r3, r1
 8003374:	2900      	cmp	r1, #0
 8003376:	d1f5      	bne.n	8003364 <_printf_i+0x16c>
 8003378:	e7b9      	b.n	80032ee <_printf_i+0xf6>
 800337a:	6813      	ldr	r3, [r2, #0]
 800337c:	6825      	ldr	r5, [r4, #0]
 800337e:	6961      	ldr	r1, [r4, #20]
 8003380:	1d18      	adds	r0, r3, #4
 8003382:	6010      	str	r0, [r2, #0]
 8003384:	0628      	lsls	r0, r5, #24
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	d501      	bpl.n	800338e <_printf_i+0x196>
 800338a:	6019      	str	r1, [r3, #0]
 800338c:	e002      	b.n	8003394 <_printf_i+0x19c>
 800338e:	066a      	lsls	r2, r5, #25
 8003390:	d5fb      	bpl.n	800338a <_printf_i+0x192>
 8003392:	8019      	strh	r1, [r3, #0]
 8003394:	2300      	movs	r3, #0
 8003396:	6123      	str	r3, [r4, #16]
 8003398:	4665      	mov	r5, ip
 800339a:	e7b9      	b.n	8003310 <_printf_i+0x118>
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	1d19      	adds	r1, r3, #4
 80033a0:	6011      	str	r1, [r2, #0]
 80033a2:	681d      	ldr	r5, [r3, #0]
 80033a4:	6862      	ldr	r2, [r4, #4]
 80033a6:	2100      	movs	r1, #0
 80033a8:	4628      	mov	r0, r5
 80033aa:	f7fc ff51 	bl	8000250 <memchr>
 80033ae:	b108      	cbz	r0, 80033b4 <_printf_i+0x1bc>
 80033b0:	1b40      	subs	r0, r0, r5
 80033b2:	6060      	str	r0, [r4, #4]
 80033b4:	6863      	ldr	r3, [r4, #4]
 80033b6:	6123      	str	r3, [r4, #16]
 80033b8:	2300      	movs	r3, #0
 80033ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80033be:	e7a7      	b.n	8003310 <_printf_i+0x118>
 80033c0:	6923      	ldr	r3, [r4, #16]
 80033c2:	462a      	mov	r2, r5
 80033c4:	4639      	mov	r1, r7
 80033c6:	4630      	mov	r0, r6
 80033c8:	47c0      	blx	r8
 80033ca:	3001      	adds	r0, #1
 80033cc:	d0aa      	beq.n	8003324 <_printf_i+0x12c>
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	079b      	lsls	r3, r3, #30
 80033d2:	d413      	bmi.n	80033fc <_printf_i+0x204>
 80033d4:	68e0      	ldr	r0, [r4, #12]
 80033d6:	9b03      	ldr	r3, [sp, #12]
 80033d8:	4298      	cmp	r0, r3
 80033da:	bfb8      	it	lt
 80033dc:	4618      	movlt	r0, r3
 80033de:	e7a3      	b.n	8003328 <_printf_i+0x130>
 80033e0:	2301      	movs	r3, #1
 80033e2:	464a      	mov	r2, r9
 80033e4:	4639      	mov	r1, r7
 80033e6:	4630      	mov	r0, r6
 80033e8:	47c0      	blx	r8
 80033ea:	3001      	adds	r0, #1
 80033ec:	d09a      	beq.n	8003324 <_printf_i+0x12c>
 80033ee:	3501      	adds	r5, #1
 80033f0:	68e3      	ldr	r3, [r4, #12]
 80033f2:	9a03      	ldr	r2, [sp, #12]
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	42ab      	cmp	r3, r5
 80033f8:	dcf2      	bgt.n	80033e0 <_printf_i+0x1e8>
 80033fa:	e7eb      	b.n	80033d4 <_printf_i+0x1dc>
 80033fc:	2500      	movs	r5, #0
 80033fe:	f104 0919 	add.w	r9, r4, #25
 8003402:	e7f5      	b.n	80033f0 <_printf_i+0x1f8>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ac      	bne.n	8003362 <_printf_i+0x16a>
 8003408:	7803      	ldrb	r3, [r0, #0]
 800340a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800340e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003412:	e76c      	b.n	80032ee <_printf_i+0xf6>
 8003414:	08003731 	.word	0x08003731
 8003418:	08003742 	.word	0x08003742

0800341c <memcpy>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e43      	subs	r3, r0, #1
 8003420:	440a      	add	r2, r1
 8003422:	4291      	cmp	r1, r2
 8003424:	d100      	bne.n	8003428 <memcpy+0xc>
 8003426:	bd10      	pop	{r4, pc}
 8003428:	f811 4b01 	ldrb.w	r4, [r1], #1
 800342c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003430:	e7f7      	b.n	8003422 <memcpy+0x6>

08003432 <memmove>:
 8003432:	4288      	cmp	r0, r1
 8003434:	b510      	push	{r4, lr}
 8003436:	eb01 0302 	add.w	r3, r1, r2
 800343a:	d807      	bhi.n	800344c <memmove+0x1a>
 800343c:	1e42      	subs	r2, r0, #1
 800343e:	4299      	cmp	r1, r3
 8003440:	d00a      	beq.n	8003458 <memmove+0x26>
 8003442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003446:	f802 4f01 	strb.w	r4, [r2, #1]!
 800344a:	e7f8      	b.n	800343e <memmove+0xc>
 800344c:	4283      	cmp	r3, r0
 800344e:	d9f5      	bls.n	800343c <memmove+0xa>
 8003450:	1881      	adds	r1, r0, r2
 8003452:	1ad2      	subs	r2, r2, r3
 8003454:	42d3      	cmn	r3, r2
 8003456:	d100      	bne.n	800345a <memmove+0x28>
 8003458:	bd10      	pop	{r4, pc}
 800345a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800345e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003462:	e7f7      	b.n	8003454 <memmove+0x22>

08003464 <_free_r>:
 8003464:	b538      	push	{r3, r4, r5, lr}
 8003466:	4605      	mov	r5, r0
 8003468:	2900      	cmp	r1, #0
 800346a:	d045      	beq.n	80034f8 <_free_r+0x94>
 800346c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003470:	1f0c      	subs	r4, r1, #4
 8003472:	2b00      	cmp	r3, #0
 8003474:	bfb8      	it	lt
 8003476:	18e4      	addlt	r4, r4, r3
 8003478:	f000 f8d2 	bl	8003620 <__malloc_lock>
 800347c:	4a1f      	ldr	r2, [pc, #124]	; (80034fc <_free_r+0x98>)
 800347e:	6813      	ldr	r3, [r2, #0]
 8003480:	4610      	mov	r0, r2
 8003482:	b933      	cbnz	r3, 8003492 <_free_r+0x2e>
 8003484:	6063      	str	r3, [r4, #4]
 8003486:	6014      	str	r4, [r2, #0]
 8003488:	4628      	mov	r0, r5
 800348a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800348e:	f000 b8c8 	b.w	8003622 <__malloc_unlock>
 8003492:	42a3      	cmp	r3, r4
 8003494:	d90c      	bls.n	80034b0 <_free_r+0x4c>
 8003496:	6821      	ldr	r1, [r4, #0]
 8003498:	1862      	adds	r2, r4, r1
 800349a:	4293      	cmp	r3, r2
 800349c:	bf04      	itt	eq
 800349e:	681a      	ldreq	r2, [r3, #0]
 80034a0:	685b      	ldreq	r3, [r3, #4]
 80034a2:	6063      	str	r3, [r4, #4]
 80034a4:	bf04      	itt	eq
 80034a6:	1852      	addeq	r2, r2, r1
 80034a8:	6022      	streq	r2, [r4, #0]
 80034aa:	6004      	str	r4, [r0, #0]
 80034ac:	e7ec      	b.n	8003488 <_free_r+0x24>
 80034ae:	4613      	mov	r3, r2
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	b10a      	cbz	r2, 80034b8 <_free_r+0x54>
 80034b4:	42a2      	cmp	r2, r4
 80034b6:	d9fa      	bls.n	80034ae <_free_r+0x4a>
 80034b8:	6819      	ldr	r1, [r3, #0]
 80034ba:	1858      	adds	r0, r3, r1
 80034bc:	42a0      	cmp	r0, r4
 80034be:	d10b      	bne.n	80034d8 <_free_r+0x74>
 80034c0:	6820      	ldr	r0, [r4, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	1858      	adds	r0, r3, r1
 80034c6:	4282      	cmp	r2, r0
 80034c8:	6019      	str	r1, [r3, #0]
 80034ca:	d1dd      	bne.n	8003488 <_free_r+0x24>
 80034cc:	6810      	ldr	r0, [r2, #0]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	4401      	add	r1, r0
 80034d4:	6019      	str	r1, [r3, #0]
 80034d6:	e7d7      	b.n	8003488 <_free_r+0x24>
 80034d8:	d902      	bls.n	80034e0 <_free_r+0x7c>
 80034da:	230c      	movs	r3, #12
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	e7d3      	b.n	8003488 <_free_r+0x24>
 80034e0:	6820      	ldr	r0, [r4, #0]
 80034e2:	1821      	adds	r1, r4, r0
 80034e4:	428a      	cmp	r2, r1
 80034e6:	bf04      	itt	eq
 80034e8:	6811      	ldreq	r1, [r2, #0]
 80034ea:	6852      	ldreq	r2, [r2, #4]
 80034ec:	6062      	str	r2, [r4, #4]
 80034ee:	bf04      	itt	eq
 80034f0:	1809      	addeq	r1, r1, r0
 80034f2:	6021      	streq	r1, [r4, #0]
 80034f4:	605c      	str	r4, [r3, #4]
 80034f6:	e7c7      	b.n	8003488 <_free_r+0x24>
 80034f8:	bd38      	pop	{r3, r4, r5, pc}
 80034fa:	bf00      	nop
 80034fc:	20000094 	.word	0x20000094

08003500 <_malloc_r>:
 8003500:	b570      	push	{r4, r5, r6, lr}
 8003502:	1ccd      	adds	r5, r1, #3
 8003504:	f025 0503 	bic.w	r5, r5, #3
 8003508:	3508      	adds	r5, #8
 800350a:	2d0c      	cmp	r5, #12
 800350c:	bf38      	it	cc
 800350e:	250c      	movcc	r5, #12
 8003510:	2d00      	cmp	r5, #0
 8003512:	4606      	mov	r6, r0
 8003514:	db01      	blt.n	800351a <_malloc_r+0x1a>
 8003516:	42a9      	cmp	r1, r5
 8003518:	d903      	bls.n	8003522 <_malloc_r+0x22>
 800351a:	230c      	movs	r3, #12
 800351c:	6033      	str	r3, [r6, #0]
 800351e:	2000      	movs	r0, #0
 8003520:	bd70      	pop	{r4, r5, r6, pc}
 8003522:	f000 f87d 	bl	8003620 <__malloc_lock>
 8003526:	4a21      	ldr	r2, [pc, #132]	; (80035ac <_malloc_r+0xac>)
 8003528:	6814      	ldr	r4, [r2, #0]
 800352a:	4621      	mov	r1, r4
 800352c:	b991      	cbnz	r1, 8003554 <_malloc_r+0x54>
 800352e:	4c20      	ldr	r4, [pc, #128]	; (80035b0 <_malloc_r+0xb0>)
 8003530:	6823      	ldr	r3, [r4, #0]
 8003532:	b91b      	cbnz	r3, 800353c <_malloc_r+0x3c>
 8003534:	4630      	mov	r0, r6
 8003536:	f000 f863 	bl	8003600 <_sbrk_r>
 800353a:	6020      	str	r0, [r4, #0]
 800353c:	4629      	mov	r1, r5
 800353e:	4630      	mov	r0, r6
 8003540:	f000 f85e 	bl	8003600 <_sbrk_r>
 8003544:	1c43      	adds	r3, r0, #1
 8003546:	d124      	bne.n	8003592 <_malloc_r+0x92>
 8003548:	230c      	movs	r3, #12
 800354a:	6033      	str	r3, [r6, #0]
 800354c:	4630      	mov	r0, r6
 800354e:	f000 f868 	bl	8003622 <__malloc_unlock>
 8003552:	e7e4      	b.n	800351e <_malloc_r+0x1e>
 8003554:	680b      	ldr	r3, [r1, #0]
 8003556:	1b5b      	subs	r3, r3, r5
 8003558:	d418      	bmi.n	800358c <_malloc_r+0x8c>
 800355a:	2b0b      	cmp	r3, #11
 800355c:	d90f      	bls.n	800357e <_malloc_r+0x7e>
 800355e:	600b      	str	r3, [r1, #0]
 8003560:	50cd      	str	r5, [r1, r3]
 8003562:	18cc      	adds	r4, r1, r3
 8003564:	4630      	mov	r0, r6
 8003566:	f000 f85c 	bl	8003622 <__malloc_unlock>
 800356a:	f104 000b 	add.w	r0, r4, #11
 800356e:	1d23      	adds	r3, r4, #4
 8003570:	f020 0007 	bic.w	r0, r0, #7
 8003574:	1ac3      	subs	r3, r0, r3
 8003576:	d0d3      	beq.n	8003520 <_malloc_r+0x20>
 8003578:	425a      	negs	r2, r3
 800357a:	50e2      	str	r2, [r4, r3]
 800357c:	e7d0      	b.n	8003520 <_malloc_r+0x20>
 800357e:	428c      	cmp	r4, r1
 8003580:	684b      	ldr	r3, [r1, #4]
 8003582:	bf16      	itet	ne
 8003584:	6063      	strne	r3, [r4, #4]
 8003586:	6013      	streq	r3, [r2, #0]
 8003588:	460c      	movne	r4, r1
 800358a:	e7eb      	b.n	8003564 <_malloc_r+0x64>
 800358c:	460c      	mov	r4, r1
 800358e:	6849      	ldr	r1, [r1, #4]
 8003590:	e7cc      	b.n	800352c <_malloc_r+0x2c>
 8003592:	1cc4      	adds	r4, r0, #3
 8003594:	f024 0403 	bic.w	r4, r4, #3
 8003598:	42a0      	cmp	r0, r4
 800359a:	d005      	beq.n	80035a8 <_malloc_r+0xa8>
 800359c:	1a21      	subs	r1, r4, r0
 800359e:	4630      	mov	r0, r6
 80035a0:	f000 f82e 	bl	8003600 <_sbrk_r>
 80035a4:	3001      	adds	r0, #1
 80035a6:	d0cf      	beq.n	8003548 <_malloc_r+0x48>
 80035a8:	6025      	str	r5, [r4, #0]
 80035aa:	e7db      	b.n	8003564 <_malloc_r+0x64>
 80035ac:	20000094 	.word	0x20000094
 80035b0:	20000098 	.word	0x20000098

080035b4 <_realloc_r>:
 80035b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035b6:	4607      	mov	r7, r0
 80035b8:	4614      	mov	r4, r2
 80035ba:	460e      	mov	r6, r1
 80035bc:	b921      	cbnz	r1, 80035c8 <_realloc_r+0x14>
 80035be:	4611      	mov	r1, r2
 80035c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80035c4:	f7ff bf9c 	b.w	8003500 <_malloc_r>
 80035c8:	b922      	cbnz	r2, 80035d4 <_realloc_r+0x20>
 80035ca:	f7ff ff4b 	bl	8003464 <_free_r>
 80035ce:	4625      	mov	r5, r4
 80035d0:	4628      	mov	r0, r5
 80035d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035d4:	f000 f826 	bl	8003624 <_malloc_usable_size_r>
 80035d8:	42a0      	cmp	r0, r4
 80035da:	d20f      	bcs.n	80035fc <_realloc_r+0x48>
 80035dc:	4621      	mov	r1, r4
 80035de:	4638      	mov	r0, r7
 80035e0:	f7ff ff8e 	bl	8003500 <_malloc_r>
 80035e4:	4605      	mov	r5, r0
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d0f2      	beq.n	80035d0 <_realloc_r+0x1c>
 80035ea:	4631      	mov	r1, r6
 80035ec:	4622      	mov	r2, r4
 80035ee:	f7ff ff15 	bl	800341c <memcpy>
 80035f2:	4631      	mov	r1, r6
 80035f4:	4638      	mov	r0, r7
 80035f6:	f7ff ff35 	bl	8003464 <_free_r>
 80035fa:	e7e9      	b.n	80035d0 <_realloc_r+0x1c>
 80035fc:	4635      	mov	r5, r6
 80035fe:	e7e7      	b.n	80035d0 <_realloc_r+0x1c>

08003600 <_sbrk_r>:
 8003600:	b538      	push	{r3, r4, r5, lr}
 8003602:	4c06      	ldr	r4, [pc, #24]	; (800361c <_sbrk_r+0x1c>)
 8003604:	2300      	movs	r3, #0
 8003606:	4605      	mov	r5, r0
 8003608:	4608      	mov	r0, r1
 800360a:	6023      	str	r3, [r4, #0]
 800360c:	f7fd f9e8 	bl	80009e0 <_sbrk>
 8003610:	1c43      	adds	r3, r0, #1
 8003612:	d102      	bne.n	800361a <_sbrk_r+0x1a>
 8003614:	6823      	ldr	r3, [r4, #0]
 8003616:	b103      	cbz	r3, 800361a <_sbrk_r+0x1a>
 8003618:	602b      	str	r3, [r5, #0]
 800361a:	bd38      	pop	{r3, r4, r5, pc}
 800361c:	20000124 	.word	0x20000124

08003620 <__malloc_lock>:
 8003620:	4770      	bx	lr

08003622 <__malloc_unlock>:
 8003622:	4770      	bx	lr

08003624 <_malloc_usable_size_r>:
 8003624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003628:	1f18      	subs	r0, r3, #4
 800362a:	2b00      	cmp	r3, #0
 800362c:	bfbc      	itt	lt
 800362e:	580b      	ldrlt	r3, [r1, r0]
 8003630:	18c0      	addlt	r0, r0, r3
 8003632:	4770      	bx	lr

08003634 <_init>:
 8003634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003636:	bf00      	nop
 8003638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800363a:	bc08      	pop	{r3}
 800363c:	469e      	mov	lr, r3
 800363e:	4770      	bx	lr

08003640 <_fini>:
 8003640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003642:	bf00      	nop
 8003644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003646:	bc08      	pop	{r3}
 8003648:	469e      	mov	lr, r3
 800364a:	4770      	bx	lr
