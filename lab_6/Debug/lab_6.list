
lab_6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  0800403c  0800403c  0001403c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040a0  080040a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080040a0  080040a0  000140a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040a8  080040a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040a8  080040a8  000140a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080040b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08004120  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004120  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cfd4  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b98  00000000  00000000  0002d072  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c90  00000000  00000000  0002ec10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  0002f8a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027a98  00000000  00000000  00030448  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a4b3  00000000  00000000  00057ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f9d35  00000000  00000000  00062393  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015c0c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003790  00000000  00000000  0015c144  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000070 	.word	0x20000070
 800021c:	00000000 	.word	0x00000000
 8000220:	08004024 	.word	0x08004024

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000074 	.word	0x20000074
 800023c:	08004024 	.word	0x08004024

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb78 	bl	8000cea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f855 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f9b5 	bl	800096c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000602:	f000 f8e1 	bl	80007c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000606:	f000 f933 	bl	8000870 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 800060a:	f000 f97f 	bl	800090c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 800060e:	4821      	ldr	r0, [pc, #132]	; (8000694 <main+0xa4>)
 8000610:	f001 ffc8 	bl	80025a4 <HAL_TIM_Base_Start_IT>
  int n=2;
 8000614:	2302      	movs	r3, #2
 8000616:	617b      	str	r3, [r7, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(n==1){
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d109      	bne.n	8000632 <main+0x42>
		  displayNumber(count);
 800061e:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <main+0xa8>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f9da 	bl	80009dc <displayNumber>
		  HAL_Delay(400);
 8000628:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800062c:	f000 fbba 	bl	8000da4 <HAL_Delay>
 8000630:	e7f2      	b.n	8000618 <main+0x28>
	  }
	  else if(n==2){
 8000632:	697b      	ldr	r3, [r7, #20]
 8000634:	2b02      	cmp	r3, #2
 8000636:	d1ef      	bne.n	8000618 <main+0x28>

		  //temporal increment
		  if(count>1000){
 8000638:	4b17      	ldr	r3, [pc, #92]	; (8000698 <main+0xa8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000640:	d907      	bls.n	8000652 <main+0x62>
			  sec++;
 8000642:	4b16      	ldr	r3, [pc, #88]	; (800069c <main+0xac>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	4a14      	ldr	r2, [pc, #80]	; (800069c <main+0xac>)
 800064a:	6013      	str	r3, [r2, #0]
			  count = 0;
 800064c:	4b12      	ldr	r3, [pc, #72]	; (8000698 <main+0xa8>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
		  }

		  //time control
		  if(sec == 60){
 8000652:	4b12      	ldr	r3, [pc, #72]	; (800069c <main+0xac>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	2b3c      	cmp	r3, #60	; 0x3c
 8000658:	d107      	bne.n	800066a <main+0x7a>
			  min++;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <main+0xb0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	3301      	adds	r3, #1
 8000660:	4a0f      	ldr	r2, [pc, #60]	; (80006a0 <main+0xb0>)
 8000662:	6013      	str	r3, [r2, #0]
			  sec=0;
 8000664:	4b0d      	ldr	r3, [pc, #52]	; (800069c <main+0xac>)
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
		  }

		  if(min==60){
 800066a:	4b0d      	ldr	r3, [pc, #52]	; (80006a0 <main+0xb0>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	2b3c      	cmp	r3, #60	; 0x3c
 8000670:	d102      	bne.n	8000678 <main+0x88>
			  min=0;
 8000672:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <main+0xb0>)
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
		  }

		  //render clock
		  sprintf(time_str,"  %02d:%02d\r",min,sec);
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <main+0xb0>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b07      	ldr	r3, [pc, #28]	; (800069c <main+0xac>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4638      	mov	r0, r7
 8000682:	4908      	ldr	r1, [pc, #32]	; (80006a4 <main+0xb4>)
 8000684:	f003 f8c8 	bl	8003818 <siprintf>
		  send_str(time_str);
 8000688:	463b      	mov	r3, r7
 800068a:	4618      	mov	r0, r3
 800068c:	f000 f986 	bl	800099c <send_str>
	  if(n==1){
 8000690:	e7c2      	b.n	8000618 <main+0x28>
 8000692:	bf00      	nop
 8000694:	20000120 	.word	0x20000120
 8000698:	20000160 	.word	0x20000160
 800069c:	20000090 	.word	0x20000090
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	0800403c 	.word	0x0800403c

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b0b8      	sub	sp, #224	; 0xe0
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006b2:	2234      	movs	r2, #52	; 0x34
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 f8a6 	bl	8003808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2290      	movs	r2, #144	; 0x90
 80006d2:	2100      	movs	r1, #0
 80006d4:	4618      	mov	r0, r3
 80006d6:	f003 f897 	bl	8003808 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <SystemClock_Config+0x118>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <SystemClock_Config+0x118>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <SystemClock_Config+0x118>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f2:	4b34      	ldr	r3, [pc, #208]	; (80007c4 <SystemClock_Config+0x11c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4a33      	ldr	r2, [pc, #204]	; (80007c4 <SystemClock_Config+0x11c>)
 80006f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fc:	6013      	str	r3, [r2, #0]
 80006fe:	4b31      	ldr	r3, [pc, #196]	; (80007c4 <SystemClock_Config+0x11c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2310      	movs	r3, #16
 8000718:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000722:	2300      	movs	r3, #0
 8000724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000728:	2308      	movs	r3, #8
 800072a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800072e:	23d8      	movs	r3, #216	; 0xd8
 8000730:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800073a:	2302      	movs	r3, #2
 800073c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000740:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fe5b 	bl	8001400 <HAL_RCC_OscConfig>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000750:	f000 f95a 	bl	8000a08 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000754:	f000 fe04 	bl	8001360 <HAL_PWREx_EnableOverDrive>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800075e:	f000 f953 	bl	8000a08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000768:	2302      	movs	r3, #2
 800076a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000774:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000778:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800077c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000780:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000784:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000788:	2107      	movs	r1, #7
 800078a:	4618      	mov	r0, r3
 800078c:	f001 f8e6 	bl	800195c <HAL_RCC_ClockConfig>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000796:	f000 f937 	bl	8000a08 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800079a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 faa9 	bl	8001d00 <HAL_RCCEx_PeriphCLKConfig>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80007b4:	f000 f928 	bl	8000a08 <Error_Handler>
  }
}
 80007b8:	bf00      	nop
 80007ba:	37e0      	adds	r7, #224	; 0xe0
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40007000 	.word	0x40007000

080007c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	1d3b      	adds	r3, r7, #4
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007e6:	4b20      	ldr	r3, [pc, #128]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <MX_TIM1_Init+0xa4>)
 80007ea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007ee:	22d7      	movs	r2, #215	; 0xd7
 80007f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f2:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <MX_TIM1_Init+0xa0>)
 80007fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000800:	4b19      	ldr	r3, [pc, #100]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000806:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000808:	2200      	movs	r2, #0
 800080a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_TIM1_Init+0xa0>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000812:	4815      	ldr	r0, [pc, #84]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000814:	f001 fe9a 	bl	800254c <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 f8f3 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0310 	add.w	r3, r7, #16
 800082c:	4619      	mov	r1, r3
 800082e:	480e      	ldr	r0, [pc, #56]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000830:	f002 f802 	bl	8002838 <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800083a:	f000 f8e5 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <MX_TIM1_Init+0xa0>)
 8000850:	f002 fa18 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800085a:	f000 f8d5 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	3720      	adds	r7, #32
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000120 	.word	0x20000120
 800086c:	40010000 	.word	0x40010000

08000870 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b088      	sub	sp, #32
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000876:	f107 0310 	add.w	r3, r7, #16
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_TIM2_Init+0x98>)
 8000890:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000894:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 8000896:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_TIM2_Init+0x98>)
 8000898:	22d7      	movs	r2, #215	; 0xd7
 800089a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b1a      	ldr	r3, [pc, #104]	; (8000908 <MX_TIM2_Init+0x98>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 400-1;
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_TIM2_Init+0x98>)
 80008a4:	f240 128f 	movw	r2, #399	; 0x18f
 80008a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008aa:	4b17      	ldr	r3, [pc, #92]	; (8000908 <MX_TIM2_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_TIM2_Init+0x98>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b6:	4814      	ldr	r0, [pc, #80]	; (8000908 <MX_TIM2_Init+0x98>)
 80008b8:	f001 fe48 	bl	800254c <HAL_TIM_Base_Init>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008c2:	f000 f8a1 	bl	8000a08 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	480d      	ldr	r0, [pc, #52]	; (8000908 <MX_TIM2_Init+0x98>)
 80008d4:	f001 ffb0 	bl	8002838 <HAL_TIM_ConfigClockSource>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008de:	f000 f893 	bl	8000a08 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e2:	2300      	movs	r3, #0
 80008e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4619      	mov	r1, r3
 80008ee:	4806      	ldr	r0, [pc, #24]	; (8000908 <MX_TIM2_Init+0x98>)
 80008f0:	f002 f9c8 	bl	8002c84 <HAL_TIMEx_MasterConfigSynchronization>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80008fa:	f000 f885 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	3720      	adds	r7, #32
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000168 	.word	0x20000168

0800090c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000912:	4a15      	ldr	r2, [pc, #84]	; (8000968 <MX_USART3_UART_Init+0x5c>)
 8000914:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000918:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800091c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000932:	220c      	movs	r2, #12
 8000934:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART3_UART_Init+0x58>)
 800094a:	2200      	movs	r2, #0
 800094c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART3_UART_Init+0x58>)
 8000950:	f002 fa44 	bl	8002ddc <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095a:	f000 f855 	bl	8000a08 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	200000a0 	.word	0x200000a0
 8000968:	40004800 	.word	0x40004800

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_GPIO_Init+0x2c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <MX_GPIO_Init+0x2c>)
 8000978:	f043 0308 	orr.w	r3, r3, #8
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_GPIO_Init+0x2c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800

0800099c <send_str>:

/* USER CODE BEGIN 4 */
void send_str(char* str) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET);
 80009a4:	bf00      	nop
 80009a6:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <send_str+0x3c>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	69db      	ldr	r3, [r3, #28]
 80009ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009b0:	2b40      	cmp	r3, #64	; 0x40
 80009b2:	d1f8      	bne.n	80009a6 <send_str+0xa>
	HAL_UART_Transmit(&huart3,(uint8_t*) str, strlen(str), 1000);
 80009b4:	6878      	ldr	r0, [r7, #4]
 80009b6:	f7ff fc43 	bl	8000240 <strlen>
 80009ba:	4603      	mov	r3, r0
 80009bc:	b29a      	uxth	r2, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	4804      	ldr	r0, [pc, #16]	; (80009d8 <send_str+0x3c>)
 80009c6:	f002 fa57 	bl	8002e78 <HAL_UART_Transmit>
	HAL_Delay(100);
 80009ca:	2064      	movs	r0, #100	; 0x64
 80009cc:	f000 f9ea 	bl	8000da4 <HAL_Delay>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	200000a0 	.word	0x200000a0

080009dc <displayNumber>:

void displayNumber(uint32_t num){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b088      	sub	sp, #32
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	char str[20];
	sprintf(str, "%d\r\n", num);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	4906      	ldr	r1, [pc, #24]	; (8000a04 <displayNumber+0x28>)
 80009ec:	4618      	mov	r0, r3
 80009ee:	f002 ff13 	bl	8003818 <siprintf>
	send_str(str);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff ffd0 	bl	800099c <send_str>
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	0800404c 	.word	0x0800404c

08000a08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <HAL_MspInit+0x44>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a0e      	ldr	r2, [pc, #56]	; (8000a5c <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b0c      	ldr	r3, [pc, #48]	; (8000a5c <HAL_MspInit+0x44>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <HAL_MspInit+0x44>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	4a08      	ldr	r2, [pc, #32]	; (8000a5c <HAL_MspInit+0x44>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a40:	6453      	str	r3, [r2, #68]	; 0x44
 8000a42:	4b06      	ldr	r3, [pc, #24]	; (8000a5c <HAL_MspInit+0x44>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a4e:	2005      	movs	r0, #5
 8000a50:	f000 fa9a 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}
 8000a5c:	40023800 	.word	0x40023800

08000a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <HAL_TIM_Base_MspInit+0x78>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d114      	bne.n	8000a9c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a72:	4b1a      	ldr	r3, [pc, #104]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7e:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	2019      	movs	r0, #25
 8000a90:	f000 fa85 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000a94:	2019      	movs	r0, #25
 8000a96:	f000 fa9e 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000a9a:	e018      	b.n	8000ace <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aa4:	d113      	bne.n	8000ace <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000aa6:	4b0d      	ldr	r3, [pc, #52]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_TIM_Base_MspInit+0x7c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2102      	movs	r1, #2
 8000ac2:	201c      	movs	r0, #28
 8000ac4:	f000 fa6b 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ac8:	201c      	movs	r0, #28
 8000aca:	f000 fa84 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
}
 8000ace:	bf00      	nop
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40010000 	.word	0x40010000
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a17      	ldr	r2, [pc, #92]	; (8000b5c <HAL_UART_MspInit+0x7c>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d128      	bne.n	8000b54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a10      	ldr	r2, [pc, #64]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <HAL_UART_MspInit+0x80>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b44:	2307      	movs	r3, #7
 8000b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <HAL_UART_MspInit+0x84>)
 8000b50:	f000 fa5c 	bl	800100c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020c00 	.word	0x40020c00

08000b68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr

08000b76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b7a:	e7fe      	b.n	8000b7a <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <MemManage_Handler+0x4>

08000b82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b82:	b480      	push	{r7}
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b86:	e7fe      	b.n	8000b86 <BusFault_Handler+0x4>

08000b88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <UsageFault_Handler+0x4>

08000b8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bbc:	f000 f8d2 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  count++;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000bd0:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000bd4:	f001 fd10 	bl	80025f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	20000160 	.word	0x20000160
 8000be0:	20000120 	.word	0x20000120

08000be4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  isDisplay = 1;
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <TIM2_IRQHandler+0x14>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bee:	4803      	ldr	r0, [pc, #12]	; (8000bfc <TIM2_IRQHandler+0x18>)
 8000bf0:	f001 fd02 	bl	80025f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000164 	.word	0x20000164
 8000bfc:	20000168 	.word	0x20000168

08000c00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <_sbrk+0x5c>)
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <_sbrk+0x60>)
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c14:	4b13      	ldr	r3, [pc, #76]	; (8000c64 <_sbrk+0x64>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d102      	bne.n	8000c22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c1c:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <_sbrk+0x64>)
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <_sbrk+0x68>)
 8000c20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	693a      	ldr	r2, [r7, #16]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d207      	bcs.n	8000c40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c30:	f002 fdc0 	bl	80037b4 <__errno>
 8000c34:	4602      	mov	r2, r0
 8000c36:	230c      	movs	r3, #12
 8000c38:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c3e:	e009      	b.n	8000c54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <_sbrk+0x64>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c46:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <_sbrk+0x64>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <_sbrk+0x64>)
 8000c50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c52:	68fb      	ldr	r3, [r7, #12]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20080000 	.word	0x20080000
 8000c60:	00000400 	.word	0x00000400
 8000c64:	20000094 	.word	0x20000094
 8000c68:	200001b0 	.word	0x200001b0

08000c6c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <SystemInit+0x28>)
 8000c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c76:	4a07      	ldr	r2, [pc, #28]	; (8000c94 <SystemInit+0x28>)
 8000c78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SystemInit+0x28>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c86:	609a      	str	r2, [r3, #8]
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000c9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000c9e:	e003      	b.n	8000ca8 <LoopCopyDataInit>

08000ca0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ca2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ca4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ca6:	3104      	adds	r1, #4

08000ca8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000cac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000cae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000cb0:	d3f6      	bcc.n	8000ca0 <CopyDataInit>
  ldr  r2, =_sbss
 8000cb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000cb4:	e002      	b.n	8000cbc <LoopFillZerobss>

08000cb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000cb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000cb8:	f842 3b04 	str.w	r3, [r2], #4

08000cbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000cbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000cc0:	d3f9      	bcc.n	8000cb6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cc2:	f7ff ffd3 	bl	8000c6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f002 fd7b 	bl	80037c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fc91 	bl	80005f0 <main>
  bx  lr    
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000cd4:	080040b0 	.word	0x080040b0
  ldr  r0, =_sdata
 8000cd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000cdc:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000ce0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000ce4:	200001b0 	.word	0x200001b0

08000ce8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC_IRQHandler>

08000cea <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cee:	2003      	movs	r0, #3
 8000cf0:	f000 f94a 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f000 f805 	bl	8000d04 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000cfa:	f7ff fe8d 	bl	8000a18 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d0c:	4b12      	ldr	r3, [pc, #72]	; (8000d58 <HAL_InitTick+0x54>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <HAL_InitTick+0x58>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f965 	bl	8000ff2 <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d40:	f000 f92d 	bl	8000f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x5c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	200001a8 	.word	0x200001a8

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200001a8 	.word	0x200001a8

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <HAL_Delay+0x40>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000008 	.word	0x20000008

08000de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b085      	sub	sp, #20
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	f003 0307 	and.w	r3, r3, #7
 8000df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e04:	4013      	ands	r3, r2
 8000e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <__NVIC_SetPriorityGrouping+0x44>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <__NVIC_SetPriorityGrouping+0x40>)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	60d3      	str	r3, [r2, #12]
}
 8000e1c:	bf00      	nop
 8000e1e:	3714      	adds	r7, #20
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	e000ed00 	.word	0xe000ed00
 8000e2c:	05fa0000 	.word	0x05fa0000

08000e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e34:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <__NVIC_GetPriorityGrouping+0x18>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	0a1b      	lsrs	r3, r3, #8
 8000e3a:	f003 0307 	and.w	r3, r3, #7
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	db0b      	blt.n	8000e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f003 021f 	and.w	r2, r3, #31
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <__NVIC_EnableIRQ+0x38>)
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	095b      	lsrs	r3, r3, #5
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	e000e100 	.word	0xe000e100

08000e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	6039      	str	r1, [r7, #0]
 8000e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	db0a      	blt.n	8000eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <__NVIC_SetPriority+0x4c>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	0112      	lsls	r2, r2, #4
 8000ea8:	b2d2      	uxtb	r2, r2
 8000eaa:	440b      	add	r3, r1
 8000eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb0:	e00a      	b.n	8000ec8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2da      	uxtb	r2, r3
 8000eb6:	4908      	ldr	r1, [pc, #32]	; (8000ed8 <__NVIC_SetPriority+0x50>)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	3b04      	subs	r3, #4
 8000ec0:	0112      	lsls	r2, r2, #4
 8000ec2:	b2d2      	uxtb	r2, r2
 8000ec4:	440b      	add	r3, r1
 8000ec6:	761a      	strb	r2, [r3, #24]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	e000e100 	.word	0xe000e100
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	f1c3 0307 	rsb	r3, r3, #7
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf28      	it	cs
 8000efa:	2304      	movcs	r3, #4
 8000efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	3304      	adds	r3, #4
 8000f02:	2b06      	cmp	r3, #6
 8000f04:	d902      	bls.n	8000f0c <NVIC_EncodePriority+0x30>
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3b03      	subs	r3, #3
 8000f0a:	e000      	b.n	8000f0e <NVIC_EncodePriority+0x32>
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f14:	69bb      	ldr	r3, [r7, #24]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	43da      	mvns	r2, r3
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	401a      	ands	r2, r3
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f2e:	43d9      	mvns	r1, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f34:	4313      	orrs	r3, r2
         );
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3724      	adds	r7, #36	; 0x24
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
	...

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f54:	d301      	bcc.n	8000f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00f      	b.n	8000f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <SysTick_Config+0x40>)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f62:	210f      	movs	r1, #15
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f68:	f7ff ff8e 	bl	8000e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <SysTick_Config+0x40>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f72:	4b04      	ldr	r3, [pc, #16]	; (8000f84 <SysTick_Config+0x40>)
 8000f74:	2207      	movs	r2, #7
 8000f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f78:	2300      	movs	r3, #0
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	e000e010 	.word	0xe000e010

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff29 	bl	8000de8 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff3e 	bl	8000e30 <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ff8e 	bl	8000edc <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff5d 	bl	8000e88 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff31 	bl	8000e4c <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ffa2 	bl	8000f44 <SysTick_Config>
 8001000:	4603      	mov	r3, r0
}
 8001002:	4618      	mov	r0, r3
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
	...

0800100c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	; 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
 800102a:	e175      	b.n	8001318 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800102c:	2201      	movs	r2, #1
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4013      	ands	r3, r2
 800103e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	429a      	cmp	r2, r3
 8001046:	f040 8164 	bne.w	8001312 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d00b      	beq.n	800106a <HAL_GPIO_Init+0x5e>
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b02      	cmp	r3, #2
 8001058:	d007      	beq.n	800106a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800105e:	2b11      	cmp	r3, #17
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b12      	cmp	r3, #18
 8001068:	d130      	bne.n	80010cc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001070:	69fb      	ldr	r3, [r7, #28]
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	2203      	movs	r2, #3
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	68da      	ldr	r2, [r3, #12]
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a0:	2201      	movs	r2, #1
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	43db      	mvns	r3, r3
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	4013      	ands	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	091b      	lsrs	r3, r3, #4
 80010b6:	f003 0201 	and.w	r2, r3, #1
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	2203      	movs	r2, #3
 80010d8:	fa02 f303 	lsl.w	r3, r2, r3
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	2b02      	cmp	r3, #2
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x100>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b12      	cmp	r3, #18
 800110a:	d123      	bne.n	8001154 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	08da      	lsrs	r2, r3, #3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3208      	adds	r2, #8
 8001114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	220f      	movs	r2, #15
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	691a      	ldr	r2, [r3, #16]
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	69ba      	ldr	r2, [r7, #24]
 8001142:	4313      	orrs	r3, r2
 8001144:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	69b9      	ldr	r1, [r7, #24]
 8001150:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	2203      	movs	r2, #3
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0203 	and.w	r2, r3, #3
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	2b00      	cmp	r3, #0
 8001192:	f000 80be 	beq.w	8001312 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001196:	4b65      	ldr	r3, [pc, #404]	; (800132c <HAL_GPIO_Init+0x320>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a64      	ldr	r2, [pc, #400]	; (800132c <HAL_GPIO_Init+0x320>)
 800119c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b62      	ldr	r3, [pc, #392]	; (800132c <HAL_GPIO_Init+0x320>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011ae:	4a60      	ldr	r2, [pc, #384]	; (8001330 <HAL_GPIO_Init+0x324>)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011bc:	69fb      	ldr	r3, [r7, #28]
 80011be:	f003 0303 	and.w	r3, r3, #3
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	220f      	movs	r2, #15
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4013      	ands	r3, r2
 80011d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a57      	ldr	r2, [pc, #348]	; (8001334 <HAL_GPIO_Init+0x328>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d037      	beq.n	800124a <HAL_GPIO_Init+0x23e>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a56      	ldr	r2, [pc, #344]	; (8001338 <HAL_GPIO_Init+0x32c>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d031      	beq.n	8001246 <HAL_GPIO_Init+0x23a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a55      	ldr	r2, [pc, #340]	; (800133c <HAL_GPIO_Init+0x330>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d02b      	beq.n	8001242 <HAL_GPIO_Init+0x236>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a54      	ldr	r2, [pc, #336]	; (8001340 <HAL_GPIO_Init+0x334>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d025      	beq.n	800123e <HAL_GPIO_Init+0x232>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a53      	ldr	r2, [pc, #332]	; (8001344 <HAL_GPIO_Init+0x338>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d01f      	beq.n	800123a <HAL_GPIO_Init+0x22e>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a52      	ldr	r2, [pc, #328]	; (8001348 <HAL_GPIO_Init+0x33c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d019      	beq.n	8001236 <HAL_GPIO_Init+0x22a>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a51      	ldr	r2, [pc, #324]	; (800134c <HAL_GPIO_Init+0x340>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0x226>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a50      	ldr	r2, [pc, #320]	; (8001350 <HAL_GPIO_Init+0x344>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d00d      	beq.n	800122e <HAL_GPIO_Init+0x222>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4f      	ldr	r2, [pc, #316]	; (8001354 <HAL_GPIO_Init+0x348>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d007      	beq.n	800122a <HAL_GPIO_Init+0x21e>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4e      	ldr	r2, [pc, #312]	; (8001358 <HAL_GPIO_Init+0x34c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d101      	bne.n	8001226 <HAL_GPIO_Init+0x21a>
 8001222:	2309      	movs	r3, #9
 8001224:	e012      	b.n	800124c <HAL_GPIO_Init+0x240>
 8001226:	230a      	movs	r3, #10
 8001228:	e010      	b.n	800124c <HAL_GPIO_Init+0x240>
 800122a:	2308      	movs	r3, #8
 800122c:	e00e      	b.n	800124c <HAL_GPIO_Init+0x240>
 800122e:	2307      	movs	r3, #7
 8001230:	e00c      	b.n	800124c <HAL_GPIO_Init+0x240>
 8001232:	2306      	movs	r3, #6
 8001234:	e00a      	b.n	800124c <HAL_GPIO_Init+0x240>
 8001236:	2305      	movs	r3, #5
 8001238:	e008      	b.n	800124c <HAL_GPIO_Init+0x240>
 800123a:	2304      	movs	r3, #4
 800123c:	e006      	b.n	800124c <HAL_GPIO_Init+0x240>
 800123e:	2303      	movs	r3, #3
 8001240:	e004      	b.n	800124c <HAL_GPIO_Init+0x240>
 8001242:	2302      	movs	r3, #2
 8001244:	e002      	b.n	800124c <HAL_GPIO_Init+0x240>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <HAL_GPIO_Init+0x240>
 800124a:	2300      	movs	r3, #0
 800124c:	69fa      	ldr	r2, [r7, #28]
 800124e:	f002 0203 	and.w	r2, r2, #3
 8001252:	0092      	lsls	r2, r2, #2
 8001254:	4093      	lsls	r3, r2
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800125c:	4934      	ldr	r1, [pc, #208]	; (8001330 <HAL_GPIO_Init+0x324>)
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	089b      	lsrs	r3, r3, #2
 8001262:	3302      	adds	r3, #2
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800126a:	4b3c      	ldr	r3, [pc, #240]	; (800135c <HAL_GPIO_Init+0x350>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	43db      	mvns	r3, r3
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800128e:	4a33      	ldr	r2, [pc, #204]	; (800135c <HAL_GPIO_Init+0x350>)
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001294:	4b31      	ldr	r3, [pc, #196]	; (800135c <HAL_GPIO_Init+0x350>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	43db      	mvns	r3, r3
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4013      	ands	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d003      	beq.n	80012b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b8:	4a28      	ldr	r2, [pc, #160]	; (800135c <HAL_GPIO_Init+0x350>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012be:	4b27      	ldr	r3, [pc, #156]	; (800135c <HAL_GPIO_Init+0x350>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <HAL_GPIO_Init+0x350>)
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	; (800135c <HAL_GPIO_Init+0x350>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d003      	beq.n	800130c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001304:	69ba      	ldr	r2, [r7, #24]
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <HAL_GPIO_Init+0x350>)
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3301      	adds	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	2b0f      	cmp	r3, #15
 800131c:	f67f ae86 	bls.w	800102c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	; 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40023800 	.word	0x40023800
 8001330:	40013800 	.word	0x40013800
 8001334:	40020000 	.word	0x40020000
 8001338:	40020400 	.word	0x40020400
 800133c:	40020800 	.word	0x40020800
 8001340:	40020c00 	.word	0x40020c00
 8001344:	40021000 	.word	0x40021000
 8001348:	40021400 	.word	0x40021400
 800134c:	40021800 	.word	0x40021800
 8001350:	40021c00 	.word	0x40021c00
 8001354:	40022000 	.word	0x40022000
 8001358:	40022400 	.word	0x40022400
 800135c:	40013c00 	.word	0x40013c00

08001360 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b23      	ldr	r3, [pc, #140]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a22      	ldr	r2, [pc, #136]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b20      	ldr	r3, [pc, #128]	; (80013f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8001388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800138c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800138e:	f7ff fcfd 	bl	8000d8c <HAL_GetTick>
 8001392:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001394:	e009      	b.n	80013aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001396:	f7ff fcf9 	bl	8000d8c <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013a4:	d901      	bls.n	80013aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e022      	b.n	80013f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b6:	d1ee      	bne.n	8001396 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80013b8:	4b10      	ldr	r3, [pc, #64]	; (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0f      	ldr	r2, [pc, #60]	; (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff fce2 	bl	8000d8c <HAL_GetTick>
 80013c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013ca:	e009      	b.n	80013e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80013cc:	f7ff fcde 	bl	8000d8c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013da:	d901      	bls.n	80013e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e007      	b.n	80013f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013ec:	d1ee      	bne.n	80013cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40023800 	.word	0x40023800
 80013fc:	40007000 	.word	0x40007000

08001400 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001408:	2300      	movs	r3, #0
 800140a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e29b      	b.n	800194e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0301 	and.w	r3, r3, #1
 800141e:	2b00      	cmp	r3, #0
 8001420:	f000 8087 	beq.w	8001532 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001424:	4b96      	ldr	r3, [pc, #600]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	f003 030c 	and.w	r3, r3, #12
 800142c:	2b04      	cmp	r3, #4
 800142e:	d00c      	beq.n	800144a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001430:	4b93      	ldr	r3, [pc, #588]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b08      	cmp	r3, #8
 800143a:	d112      	bne.n	8001462 <HAL_RCC_OscConfig+0x62>
 800143c:	4b90      	ldr	r3, [pc, #576]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001448:	d10b      	bne.n	8001462 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144a:	4b8d      	ldr	r3, [pc, #564]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d06c      	beq.n	8001530 <HAL_RCC_OscConfig+0x130>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d168      	bne.n	8001530 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e275      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800146a:	d106      	bne.n	800147a <HAL_RCC_OscConfig+0x7a>
 800146c:	4b84      	ldr	r3, [pc, #528]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a83      	ldr	r2, [pc, #524]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001472:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001476:	6013      	str	r3, [r2, #0]
 8001478:	e02e      	b.n	80014d8 <HAL_RCC_OscConfig+0xd8>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10c      	bne.n	800149c <HAL_RCC_OscConfig+0x9c>
 8001482:	4b7f      	ldr	r3, [pc, #508]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a7e      	ldr	r2, [pc, #504]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001488:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b7c      	ldr	r3, [pc, #496]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7b      	ldr	r2, [pc, #492]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001494:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xd8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0xc0>
 80014a6:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a75      	ldr	r2, [pc, #468]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b73      	ldr	r3, [pc, #460]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a72      	ldr	r2, [pc, #456]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xd8>
 80014c0:	4b6f      	ldr	r3, [pc, #444]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a6e      	ldr	r2, [pc, #440]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b6c      	ldr	r3, [pc, #432]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6b      	ldr	r2, [pc, #428]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014e0:	f7ff fc54 	bl	8000d8c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fc50 	bl	8000d8c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	; 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e229      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b61      	ldr	r3, [pc, #388]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xe8>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001508:	f7ff fc40 	bl	8000d8c <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fc3c 	bl	8000d8c <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	; 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e215      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b57      	ldr	r3, [pc, #348]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x110>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d069      	beq.n	8001612 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800153e:	4b50      	ldr	r3, [pc, #320]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b4d      	ldr	r3, [pc, #308]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x190>
 8001556:	4b4a      	ldr	r3, [pc, #296]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b47      	ldr	r3, [pc, #284]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x17a>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1e9      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	493d      	ldr	r1, [pc, #244]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e040      	b.n	8001612 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d023      	beq.n	80015e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b39      	ldr	r3, [pc, #228]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a38      	ldr	r2, [pc, #224]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015a4:	f7ff fbf2 	bl	8000d8c <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fbee 	bl	8000d8c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e1c7      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ca:	4b2d      	ldr	r3, [pc, #180]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	4929      	ldr	r1, [pc, #164]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	600b      	str	r3, [r1, #0]
 80015de:	e018      	b.n	8001612 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e0:	4b27      	ldr	r3, [pc, #156]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a26      	ldr	r2, [pc, #152]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fbce 	bl	8000d8c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fbca 	bl	8000d8c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e1a3      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1e      	ldr	r3, [pc, #120]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d038      	beq.n	8001690 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800162a:	4a15      	ldr	r2, [pc, #84]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001632:	f7ff fbab 	bl	8000d8c <HAL_GetTick>
 8001636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff fba7 	bl	8000d8c <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e180      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800164e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_RCC_OscConfig+0x23a>
 8001658:	e01a      	b.n	8001690 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 800165c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800165e:	4a08      	ldr	r2, [pc, #32]	; (8001680 <HAL_RCC_OscConfig+0x280>)
 8001660:	f023 0301 	bic.w	r3, r3, #1
 8001664:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001666:	f7ff fb91 	bl	8000d8c <HAL_GetTick>
 800166a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800166c:	e00a      	b.n	8001684 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff fb8d 	bl	8000d8c <HAL_GetTick>
 8001672:	4602      	mov	r2, r0
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d903      	bls.n	8001684 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e166      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
 8001680:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001684:	4b92      	ldr	r3, [pc, #584]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001686:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1ee      	bne.n	800166e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80a4 	beq.w	80017e6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10d      	bne.n	80016c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	4a88      	ldr	r2, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80016b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016b4:	6413      	str	r3, [r2, #64]	; 0x40
 80016b6:	4b86      	ldr	r3, [pc, #536]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c2:	2301      	movs	r3, #1
 80016c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c6:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <HAL_RCC_OscConfig+0x4d4>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80016d2:	4b80      	ldr	r3, [pc, #512]	; (80018d4 <HAL_RCC_OscConfig+0x4d4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a7f      	ldr	r2, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x4d4>)
 80016d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb55 	bl	8000d8c <HAL_GetTick>
 80016e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fb51 	bl	8000d8c <HAL_GetTick>
 80016ea:	4602      	mov	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b64      	cmp	r3, #100	; 0x64
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e12a      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f8:	4b76      	ldr	r3, [pc, #472]	; (80018d4 <HAL_RCC_OscConfig+0x4d4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x31a>
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800170e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001710:	4a6f      	ldr	r2, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	f043 0301 	orr.w	r3, r3, #1
 8001716:	6713      	str	r3, [r2, #112]	; 0x70
 8001718:	e02d      	b.n	8001776 <HAL_RCC_OscConfig+0x376>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x33c>
 8001722:	4b6b      	ldr	r3, [pc, #428]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001726:	4a6a      	ldr	r2, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001728:	f023 0301 	bic.w	r3, r3, #1
 800172c:	6713      	str	r3, [r2, #112]	; 0x70
 800172e:	4b68      	ldr	r3, [pc, #416]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001730:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001732:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	f023 0304 	bic.w	r3, r3, #4
 8001738:	6713      	str	r3, [r2, #112]	; 0x70
 800173a:	e01c      	b.n	8001776 <HAL_RCC_OscConfig+0x376>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	2b05      	cmp	r3, #5
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x35e>
 8001744:	4b62      	ldr	r3, [pc, #392]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001748:	4a61      	ldr	r2, [pc, #388]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	6713      	str	r3, [r2, #112]	; 0x70
 8001750:	4b5f      	ldr	r3, [pc, #380]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001754:	4a5e      	ldr	r2, [pc, #376]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001756:	f043 0301 	orr.w	r3, r3, #1
 800175a:	6713      	str	r3, [r2, #112]	; 0x70
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0x376>
 800175e:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001762:	4a5b      	ldr	r2, [pc, #364]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6713      	str	r3, [r2, #112]	; 0x70
 800176a:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800176c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800176e:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001770:	f023 0304 	bic.w	r3, r3, #4
 8001774:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d015      	beq.n	80017aa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff fb05 	bl	8000d8c <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001784:	e00a      	b.n	800179c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001786:	f7ff fb01 	bl	8000d8c <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	f241 3288 	movw	r2, #5000	; 0x1388
 8001794:	4293      	cmp	r3, r2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e0d8      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179c:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800179e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0ee      	beq.n	8001786 <HAL_RCC_OscConfig+0x386>
 80017a8:	e014      	b.n	80017d4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017aa:	f7ff faef 	bl	8000d8c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b0:	e00a      	b.n	80017c8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b2:	f7ff faeb 	bl	8000d8c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e0c2      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017c8:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80017ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ee      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017d4:	7dfb      	ldrb	r3, [r7, #23]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d105      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a3c      	ldr	r2, [pc, #240]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80017e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	699b      	ldr	r3, [r3, #24]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	f000 80ae 	beq.w	800194c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f0:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 030c 	and.w	r3, r3, #12
 80017f8:	2b08      	cmp	r3, #8
 80017fa:	d06d      	beq.n	80018d8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	2b02      	cmp	r3, #2
 8001802:	d14b      	bne.n	800189c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a31      	ldr	r2, [pc, #196]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800180a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fabc 	bl	8000d8c <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001818:	f7ff fab8 	bl	8000d8c <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e091      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182a:	4b29      	ldr	r3, [pc, #164]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1f0      	bne.n	8001818 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69da      	ldr	r2, [r3, #28]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	431a      	orrs	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	019b      	lsls	r3, r3, #6
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184c:	085b      	lsrs	r3, r3, #1
 800184e:	3b01      	subs	r3, #1
 8001850:	041b      	lsls	r3, r3, #16
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001858:	061b      	lsls	r3, r3, #24
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	071b      	lsls	r3, r3, #28
 8001862:	491b      	ldr	r1, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800186e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001872:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001874:	f7ff fa8a 	bl	8000d8c <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fa86 	bl	8000d8c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e05f      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x47c>
 800189a:	e057      	b.n	800194c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80018a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fa70 	bl	8000d8c <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff fa6c 	bl	8000d8c <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e045      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c2:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_OscConfig+0x4d0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x4b0>
 80018ce:	e03d      	b.n	800194c <HAL_RCC_OscConfig+0x54c>
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80018d8:	4b1f      	ldr	r3, [pc, #124]	; (8001958 <HAL_RCC_OscConfig+0x558>)
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d030      	beq.n	8001948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d129      	bne.n	8001948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d122      	bne.n	8001948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800190e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001910:	4293      	cmp	r3, r2
 8001912:	d119      	bne.n	8001948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	3b01      	subs	r3, #1
 8001922:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d10f      	bne.n	8001948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001932:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001934:	429a      	cmp	r2, r3
 8001936:	d107      	bne.n	8001948 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001944:	429a      	cmp	r2, r3
 8001946:	d001      	beq.n	800194c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40023800 	.word	0x40023800

0800195c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e0d0      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 030f 	and.w	r3, r3, #15
 800197c:	683a      	ldr	r2, [r7, #0]
 800197e:	429a      	cmp	r2, r3
 8001980:	d910      	bls.n	80019a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001982:	4b67      	ldr	r3, [pc, #412]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 020f 	bic.w	r2, r3, #15
 800198a:	4965      	ldr	r1, [pc, #404]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	4313      	orrs	r3, r2
 8001990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	683a      	ldr	r2, [r7, #0]
 800199c:	429a      	cmp	r2, r3
 800199e:	d001      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e0b8      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d020      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d005      	beq.n	80019c8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 80019c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0308 	and.w	r3, r3, #8
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d005      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019d4:	4b53      	ldr	r3, [pc, #332]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	4a52      	ldr	r2, [pc, #328]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 80019da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019e0:	4b50      	ldr	r3, [pc, #320]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 80019e2:	689b      	ldr	r3, [r3, #8]
 80019e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	494d      	ldr	r1, [pc, #308]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d040      	beq.n	8001a80 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b47      	ldr	r3, [pc, #284]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d115      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e07f      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1e:	4b41      	ldr	r3, [pc, #260]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d109      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e073      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0302 	and.w	r3, r3, #2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e06b      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a3e:	4b39      	ldr	r3, [pc, #228]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f023 0203 	bic.w	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	4936      	ldr	r1, [pc, #216]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a50:	f7ff f99c 	bl	8000d8c <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a58:	f7ff f998 	bl	8000d8c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e053      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 020c 	and.w	r2, r3, #12
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d1eb      	bne.n	8001a58 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a80:	4b27      	ldr	r3, [pc, #156]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d210      	bcs.n	8001ab0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b24      	ldr	r3, [pc, #144]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 020f 	bic.w	r2, r3, #15
 8001a96:	4922      	ldr	r1, [pc, #136]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b20      	ldr	r3, [pc, #128]	; (8001b20 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e032      	b.n	8001b16 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d008      	beq.n	8001ace <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	4916      	ldr	r1, [pc, #88]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0308 	and.w	r3, r3, #8
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d009      	beq.n	8001aee <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ada:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	00db      	lsls	r3, r3, #3
 8001ae8:	490e      	ldr	r1, [pc, #56]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001aea:	4313      	orrs	r3, r2
 8001aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aee:	f000 f821 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8001af2:	4601      	mov	r1, r0
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_ClockConfig+0x1c8>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_RCC_ClockConfig+0x1cc>)
 8001b00:	5cd3      	ldrb	r3, [r2, r3]
 8001b02:	fa21 f303 	lsr.w	r3, r1, r3
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x1d0>)
 8001b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b0a:	4b09      	ldr	r3, [pc, #36]	; (8001b30 <HAL_RCC_ClockConfig+0x1d4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff f8f8 	bl	8000d04 <HAL_InitTick>

  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3710      	adds	r7, #16
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023c00 	.word	0x40023c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08004054 	.word	0x08004054
 8001b2c:	20000000 	.word	0x20000000
 8001b30:	20000004 	.word	0x20000004

08001b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	2300      	movs	r3, #0
 8001b44:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b4a:	4b50      	ldr	r3, [pc, #320]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b04      	cmp	r3, #4
 8001b54:	d007      	beq.n	8001b66 <HAL_RCC_GetSysClockFreq+0x32>
 8001b56:	2b08      	cmp	r3, #8
 8001b58:	d008      	beq.n	8001b6c <HAL_RCC_GetSysClockFreq+0x38>
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 808d 	bne.w	8001c7a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b60:	4b4b      	ldr	r3, [pc, #300]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001b62:	60bb      	str	r3, [r7, #8]
      break;
 8001b64:	e08c      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b66:	4b4b      	ldr	r3, [pc, #300]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b68:	60bb      	str	r3, [r7, #8]
      break;
 8001b6a:	e089      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b6c:	4b47      	ldr	r3, [pc, #284]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b74:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001b76:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d023      	beq.n	8001bca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b82:	4b42      	ldr	r3, [pc, #264]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	f04f 0400 	mov.w	r4, #0
 8001b8c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b90:	f04f 0200 	mov.w	r2, #0
 8001b94:	ea03 0501 	and.w	r5, r3, r1
 8001b98:	ea04 0602 	and.w	r6, r4, r2
 8001b9c:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001b9e:	fb02 f106 	mul.w	r1, r2, r6
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	fb02 f205 	mul.w	r2, r2, r5
 8001ba8:	440a      	add	r2, r1
 8001baa:	493a      	ldr	r1, [pc, #232]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bac:	fba5 0101 	umull	r0, r1, r5, r1
 8001bb0:	1853      	adds	r3, r2, r1
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f04f 0400 	mov.w	r4, #0
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	f7fe fb97 	bl	80002f0 <__aeabi_uldivmod>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	460c      	mov	r4, r1
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	e049      	b.n	8001c5e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bca:	4b30      	ldr	r3, [pc, #192]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	099b      	lsrs	r3, r3, #6
 8001bd0:	f04f 0400 	mov.w	r4, #0
 8001bd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	ea03 0501 	and.w	r5, r3, r1
 8001be0:	ea04 0602 	and.w	r6, r4, r2
 8001be4:	4629      	mov	r1, r5
 8001be6:	4632      	mov	r2, r6
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	f04f 0400 	mov.w	r4, #0
 8001bf0:	0154      	lsls	r4, r2, #5
 8001bf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bf6:	014b      	lsls	r3, r1, #5
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4622      	mov	r2, r4
 8001bfc:	1b49      	subs	r1, r1, r5
 8001bfe:	eb62 0206 	sbc.w	r2, r2, r6
 8001c02:	f04f 0300 	mov.w	r3, #0
 8001c06:	f04f 0400 	mov.w	r4, #0
 8001c0a:	0194      	lsls	r4, r2, #6
 8001c0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001c10:	018b      	lsls	r3, r1, #6
 8001c12:	1a5b      	subs	r3, r3, r1
 8001c14:	eb64 0402 	sbc.w	r4, r4, r2
 8001c18:	f04f 0100 	mov.w	r1, #0
 8001c1c:	f04f 0200 	mov.w	r2, #0
 8001c20:	00e2      	lsls	r2, r4, #3
 8001c22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001c26:	00d9      	lsls	r1, r3, #3
 8001c28:	460b      	mov	r3, r1
 8001c2a:	4614      	mov	r4, r2
 8001c2c:	195b      	adds	r3, r3, r5
 8001c2e:	eb44 0406 	adc.w	r4, r4, r6
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	02a2      	lsls	r2, r4, #10
 8001c3c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001c40:	0299      	lsls	r1, r3, #10
 8001c42:	460b      	mov	r3, r1
 8001c44:	4614      	mov	r4, r2
 8001c46:	4618      	mov	r0, r3
 8001c48:	4621      	mov	r1, r4
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f04f 0400 	mov.w	r4, #0
 8001c50:	461a      	mov	r2, r3
 8001c52:	4623      	mov	r3, r4
 8001c54:	f7fe fb4c 	bl	80002f0 <__aeabi_uldivmod>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <HAL_RCC_GetSysClockFreq+0x158>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c76:	60bb      	str	r3, [r7, #8]
      break;
 8001c78:	e002      	b.n	8001c80 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c7c:	60bb      	str	r3, [r7, #8]
      break;
 8001c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c80:	68bb      	ldr	r3, [r7, #8]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3714      	adds	r7, #20
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40023800 	.word	0x40023800
 8001c90:	00f42400 	.word	0x00f42400
 8001c94:	017d7840 	.word	0x017d7840

08001c98 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c9c:	4b03      	ldr	r3, [pc, #12]	; (8001cac <HAL_RCC_GetHCLKFreq+0x14>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	20000000 	.word	0x20000000

08001cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001cb4:	f7ff fff0 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001cb8:	4601      	mov	r1, r0
 8001cba:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	0a9b      	lsrs	r3, r3, #10
 8001cc0:	f003 0307 	and.w	r3, r3, #7
 8001cc4:	4a03      	ldr	r2, [pc, #12]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	08004064 	.word	0x08004064

08001cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001cdc:	f7ff ffdc 	bl	8001c98 <HAL_RCC_GetHCLKFreq>
 8001ce0:	4601      	mov	r1, r0
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	0b5b      	lsrs	r3, r3, #13
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	4a03      	ldr	r2, [pc, #12]	; (8001cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cee:	5cd3      	ldrb	r3, [r2, r3]
 8001cf0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40023800 	.word	0x40023800
 8001cfc:	08004064 	.word	0x08004064

08001d00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b088      	sub	sp, #32
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0301 	and.w	r3, r3, #1
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d012      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d28:	4b69      	ldr	r3, [pc, #420]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d32:	6093      	str	r3, [r2, #8]
 8001d34:	4b66      	ldr	r3, [pc, #408]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d3c:	4964      	ldr	r1, [pc, #400]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d017      	beq.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d5a:	4b5d      	ldr	r3, [pc, #372]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d68:	4959      	ldr	r1, [pc, #356]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d78:	d101      	bne.n	8001d7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d017      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d96:	4b4e      	ldr	r3, [pc, #312]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d9c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	494a      	ldr	r1, [pc, #296]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db4:	d101      	bne.n	8001dba <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001db6:	2301      	movs	r3, #1
 8001db8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0320 	and.w	r3, r3, #32
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 808b 	beq.w	8001efa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001de4:	4b3a      	ldr	r3, [pc, #232]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	4a39      	ldr	r2, [pc, #228]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dee:	6413      	str	r3, [r2, #64]	; 0x40
 8001df0:	4b37      	ldr	r3, [pc, #220]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dfc:	4b35      	ldr	r3, [pc, #212]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e06:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e08:	f7fe ffc0 	bl	8000d8c <HAL_GetTick>
 8001e0c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e10:	f7fe ffbc 	bl	8000d8c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e38d      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001e22:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e2e:	4b28      	ldr	r3, [pc, #160]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e36:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d035      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d02e      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e4c:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e54:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e56:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e60:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a1a      	ldr	r2, [pc, #104]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e74:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d114      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7fe ff84 	bl	8000d8c <HAL_GetTick>
 8001e84:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e86:	e00a      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7fe ff80 	bl	8000d8c <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e34f      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0ee      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001eb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001eb6:	d111      	bne.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001eb8:	4b05      	ldr	r3, [pc, #20]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec4:	4b04      	ldr	r3, [pc, #16]	; (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001ec6:	400b      	ands	r3, r1
 8001ec8:	4901      	ldr	r1, [pc, #4]	; (8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	608b      	str	r3, [r1, #8]
 8001ece:	e00b      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000
 8001ed8:	0ffffcff 	.word	0x0ffffcff
 8001edc:	4bb3      	ldr	r3, [pc, #716]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	4ab2      	ldr	r2, [pc, #712]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001ee6:	6093      	str	r3, [r2, #8]
 8001ee8:	4bb0      	ldr	r3, [pc, #704]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef4:	49ad      	ldr	r1, [pc, #692]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d010      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f06:	4ba9      	ldr	r3, [pc, #676]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0c:	4aa7      	ldr	r2, [pc, #668]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f16:	4ba5      	ldr	r3, [pc, #660]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f18:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f20:	49a2      	ldr	r1, [pc, #648]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f34:	4b9d      	ldr	r3, [pc, #628]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f42:	499a      	ldr	r1, [pc, #616]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00a      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f56:	4b95      	ldr	r3, [pc, #596]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f64:	4991      	ldr	r1, [pc, #580]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f78:	4b8c      	ldr	r3, [pc, #560]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f86:	4989      	ldr	r1, [pc, #548]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00a      	beq.n	8001fb0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001f9a:	4b84      	ldr	r3, [pc, #528]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	4980      	ldr	r1, [pc, #512]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001faa:	4313      	orrs	r3, r2
 8001fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d00a      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f023 0203 	bic.w	r2, r3, #3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fca:	4978      	ldr	r1, [pc, #480]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001fde:	4b73      	ldr	r3, [pc, #460]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe4:	f023 020c 	bic.w	r2, r3, #12
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fec:	496f      	ldr	r1, [pc, #444]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d00a      	beq.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002000:	4b6a      	ldr	r3, [pc, #424]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002006:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	4967      	ldr	r1, [pc, #412]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002022:	4b62      	ldr	r3, [pc, #392]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002028:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002030:	495e      	ldr	r1, [pc, #376]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002044:	4b59      	ldr	r3, [pc, #356]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002052:	4956      	ldr	r1, [pc, #344]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002066:	4b51      	ldr	r3, [pc, #324]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	494d      	ldr	r1, [pc, #308]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002088:	4b48      	ldr	r3, [pc, #288]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800208a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002096:	4945      	ldr	r1, [pc, #276]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80020aa:	4b40      	ldr	r3, [pc, #256]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b8:	493c      	ldr	r1, [pc, #240]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80020cc:	4b37      	ldr	r3, [pc, #220]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80020da:	4934      	ldr	r1, [pc, #208]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d011      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80020ee:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80020fc:	492b      	ldr	r1, [pc, #172]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002108:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800210c:	d101      	bne.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800210e:	2301      	movs	r3, #1
 8002110:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800211e:	2301      	movs	r3, #1
 8002120:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00a      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800212e:	4b1f      	ldr	r3, [pc, #124]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002134:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213c:	491b      	ldr	r1, [pc, #108]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d00b      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002150:	4b16      	ldr	r3, [pc, #88]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002156:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002160:	4912      	ldr	r1, [pc, #72]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002162:	4313      	orrs	r3, r2
 8002164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002174:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002184:	4909      	ldr	r1, [pc, #36]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d00f      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800219a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800219e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a8:	e002      	b.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	4985      	ldr	r1, [pc, #532]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00b      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80021c4:	4b80      	ldr	r3, [pc, #512]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d4:	497c      	ldr	r1, [pc, #496]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d005      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80021ea:	f040 80d6 	bne.w	800239a <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80021ee:	4b76      	ldr	r3, [pc, #472]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a75      	ldr	r2, [pc, #468]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80021f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021fa:	f7fe fdc7 	bl	8000d8c <HAL_GetTick>
 80021fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002200:	e008      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002202:	f7fe fdc3 	bl	8000d8c <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b64      	cmp	r3, #100	; 0x64
 800220e:	d901      	bls.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e194      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002214:	4b6c      	ldr	r3, [pc, #432]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f0      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d021      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x570>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11d      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002234:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002242:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002244:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002248:	0e1b      	lsrs	r3, r3, #24
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	019a      	lsls	r2, r3, #6
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	431a      	orrs	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	061b      	lsls	r3, r3, #24
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	071b      	lsls	r3, r3, #28
 8002268:	4957      	ldr	r1, [pc, #348]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800226a:	4313      	orrs	r3, r2
 800226c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d004      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x586>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800228e:	2b00      	cmp	r3, #0
 8002290:	d02e      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800229a:	d129      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800229c:	4b4a      	ldr	r3, [pc, #296]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800229e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022a2:	0c1b      	lsrs	r3, r3, #16
 80022a4:	f003 0303 	and.w	r3, r3, #3
 80022a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022b0:	0f1b      	lsrs	r3, r3, #28
 80022b2:	f003 0307 	and.w	r3, r3, #7
 80022b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	019a      	lsls	r2, r3, #6
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	041b      	lsls	r3, r3, #16
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	061b      	lsls	r3, r3, #24
 80022ca:	431a      	orrs	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	071b      	lsls	r3, r3, #28
 80022d0:	493d      	ldr	r1, [pc, #244]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80022d8:	4b3b      	ldr	r3, [pc, #236]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022de:	f023 021f 	bic.w	r2, r3, #31
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	3b01      	subs	r3, #1
 80022e8:	4937      	ldr	r1, [pc, #220]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d01d      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80022fc:	4b32      	ldr	r3, [pc, #200]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80022fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002302:	0e1b      	lsrs	r3, r3, #24
 8002304:	f003 030f 	and.w	r3, r3, #15
 8002308:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800230a:	4b2f      	ldr	r3, [pc, #188]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800230c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002310:	0f1b      	lsrs	r3, r3, #28
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	019a      	lsls	r2, r3, #6
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	431a      	orrs	r2, r3
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	061b      	lsls	r3, r3, #24
 800232a:	431a      	orrs	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	071b      	lsls	r3, r3, #28
 8002330:	4925      	ldr	r1, [pc, #148]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002332:	4313      	orrs	r3, r2
 8002334:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d011      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	019a      	lsls	r2, r3, #6
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	041b      	lsls	r3, r3, #16
 8002350:	431a      	orrs	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	061b      	lsls	r3, r3, #24
 8002358:	431a      	orrs	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	071b      	lsls	r3, r3, #28
 8002360:	4919      	ldr	r1, [pc, #100]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002362:	4313      	orrs	r3, r2
 8002364:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a16      	ldr	r2, [pc, #88]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800236e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002374:	f7fe fd0a 	bl	8000d8c <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800237c:	f7fe fd06 	bl	8000d8c <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e0d7      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800238e:	4b0e      	ldr	r3, [pc, #56]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	2b01      	cmp	r3, #1
 800239e:	f040 80cd 	bne.w	800253c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a08      	ldr	r2, [pc, #32]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ae:	f7fe fced 	bl	8000d8c <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023b4:	e00a      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80023b6:	f7fe fce9 	bl	8000d8c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b64      	cmp	r3, #100	; 0x64
 80023c2:	d903      	bls.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e0ba      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x83e>
 80023c8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d8:	d0ed      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d009      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d02e      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d12a      	bne.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002402:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002416:	0f1b      	lsrs	r3, r3, #28
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	019a      	lsls	r2, r3, #6
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	041b      	lsls	r3, r3, #16
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	061b      	lsls	r3, r3, #24
 8002430:	431a      	orrs	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	071b      	lsls	r3, r3, #28
 8002436:	4944      	ldr	r1, [pc, #272]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800243e:	4b42      	ldr	r3, [pc, #264]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002444:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244c:	3b01      	subs	r3, #1
 800244e:	021b      	lsls	r3, r3, #8
 8002450:	493d      	ldr	r1, [pc, #244]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d022      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246c:	d11d      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002474:	0e1b      	lsrs	r3, r3, #24
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800247c:	4b32      	ldr	r3, [pc, #200]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	0f1b      	lsrs	r3, r3, #28
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	019a      	lsls	r2, r3, #6
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a1b      	ldr	r3, [r3, #32]
 8002494:	041b      	lsls	r3, r3, #16
 8002496:	431a      	orrs	r2, r3
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	071b      	lsls	r3, r3, #28
 80024a2:	4929      	ldr	r1, [pc, #164]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d028      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	0e1b      	lsrs	r3, r3, #24
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80024c4:	4b20      	ldr	r3, [pc, #128]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	019a      	lsls	r2, r3, #6
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	041b      	lsls	r3, r3, #16
 80024dc:	431a      	orrs	r2, r3
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	061b      	lsls	r3, r3, #24
 80024e2:	431a      	orrs	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	69db      	ldr	r3, [r3, #28]
 80024e8:	071b      	lsls	r3, r3, #28
 80024ea:	4917      	ldr	r1, [pc, #92]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80024f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	4911      	ldr	r1, [pc, #68]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002502:	4313      	orrs	r3, r2
 8002504:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002508:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800250e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002512:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002514:	f7fe fc3a 	bl	8000d8c <HAL_GetTick>
 8002518:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800251a:	e008      	b.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800251c:	f7fe fc36 	bl	8000d8c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d901      	bls.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e007      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002536:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253a:	d1ef      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e01d      	b.n	800259a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d106      	bne.n	8002578 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7fe fa74 	bl	8000a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	3304      	adds	r3, #4
 8002588:	4619      	mov	r1, r3
 800258a:	4610      	mov	r0, r2
 800258c:	f000 fa40 	bl	8002a10 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68da      	ldr	r2, [r3, #12]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0201 	orr.w	r2, r2, #1
 80025ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	4b0c      	ldr	r3, [pc, #48]	; (80025f4 <HAL_TIM_Base_Start_IT+0x50>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2b06      	cmp	r3, #6
 80025cc:	d00b      	beq.n	80025e6 <HAL_TIM_Base_Start_IT+0x42>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025d4:	d007      	beq.n	80025e6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	00010007 	.word	0x00010007

080025f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691b      	ldr	r3, [r3, #16]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	2b02      	cmp	r3, #2
 800260c:	d122      	bne.n	8002654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b02      	cmp	r3, #2
 800261a:	d11b      	bne.n	8002654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f06f 0202 	mvn.w	r2, #2
 8002624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 f9ca 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 8002640:	e005      	b.n	800264e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f9bc 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f9cd 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b04      	cmp	r3, #4
 8002660:	d122      	bne.n	80026a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f06f 0204 	mvn.w	r2, #4
 8002678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2202      	movs	r2, #2
 800267e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f000 f9a0 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 8002694:	e005      	b.n	80026a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f992 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f9a3 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b08      	cmp	r3, #8
 80026b4:	d122      	bne.n	80026fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d11b      	bne.n	80026fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f06f 0208 	mvn.w	r2, #8
 80026cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2204      	movs	r2, #4
 80026d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f976 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 80026e8:	e005      	b.n	80026f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f968 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f000 f979 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	2b10      	cmp	r3, #16
 8002708:	d122      	bne.n	8002750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b10      	cmp	r3, #16
 8002716:	d11b      	bne.n	8002750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f06f 0210 	mvn.w	r2, #16
 8002720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2208      	movs	r2, #8
 8002726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	69db      	ldr	r3, [r3, #28]
 800272e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f94c 	bl	80029d4 <HAL_TIM_IC_CaptureCallback>
 800273c:	e005      	b.n	800274a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f93e 	bl	80029c0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f000 f94f 	bl	80029e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b01      	cmp	r3, #1
 800275c:	d10e      	bne.n	800277c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f06f 0201 	mvn.w	r2, #1
 8002774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f918 	bl	80029ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	2b80      	cmp	r3, #128	; 0x80
 8002788:	d10e      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002794:	2b80      	cmp	r3, #128	; 0x80
 8002796:	d107      	bne.n	80027a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fb06 	bl	8002db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b6:	d10e      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c2:	2b80      	cmp	r3, #128	; 0x80
 80027c4:	d107      	bne.n	80027d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 faf9 	bl	8002dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e0:	2b40      	cmp	r3, #64	; 0x40
 80027e2:	d10e      	bne.n	8002802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d107      	bne.n	8002802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f8fd 	bl	80029fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f003 0320 	and.w	r3, r3, #32
 800280c:	2b20      	cmp	r3, #32
 800280e:	d10e      	bne.n	800282e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b20      	cmp	r3, #32
 800281c:	d107      	bne.n	800282e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f06f 0220 	mvn.w	r2, #32
 8002826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002828:	6878      	ldr	r0, [r7, #4]
 800282a:	f000 fab9 	bl	8002da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800282e:	bf00      	nop
 8002830:	3708      	adds	r7, #8
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}
	...

08002838 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_TIM_ConfigClockSource+0x18>
 800284c:	2302      	movs	r3, #2
 800284e:	e0a6      	b.n	800299e <HAL_TIM_ConfigClockSource+0x166>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2202      	movs	r2, #2
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4b4f      	ldr	r3, [pc, #316]	; (80029a8 <HAL_TIM_ConfigClockSource+0x170>)
 800286c:	4013      	ands	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002876:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b40      	cmp	r3, #64	; 0x40
 8002886:	d067      	beq.n	8002958 <HAL_TIM_ConfigClockSource+0x120>
 8002888:	2b40      	cmp	r3, #64	; 0x40
 800288a:	d80b      	bhi.n	80028a4 <HAL_TIM_ConfigClockSource+0x6c>
 800288c:	2b10      	cmp	r3, #16
 800288e:	d073      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
 8002890:	2b10      	cmp	r3, #16
 8002892:	d802      	bhi.n	800289a <HAL_TIM_ConfigClockSource+0x62>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d06f      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002898:	e078      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800289a:	2b20      	cmp	r3, #32
 800289c:	d06c      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
 800289e:	2b30      	cmp	r3, #48	; 0x30
 80028a0:	d06a      	beq.n	8002978 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80028a2:	e073      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028a4:	2b70      	cmp	r3, #112	; 0x70
 80028a6:	d00d      	beq.n	80028c4 <HAL_TIM_ConfigClockSource+0x8c>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d804      	bhi.n	80028b6 <HAL_TIM_ConfigClockSource+0x7e>
 80028ac:	2b50      	cmp	r3, #80	; 0x50
 80028ae:	d033      	beq.n	8002918 <HAL_TIM_ConfigClockSource+0xe0>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d041      	beq.n	8002938 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80028b4:	e06a      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80028b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ba:	d066      	beq.n	800298a <HAL_TIM_ConfigClockSource+0x152>
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028c0:	d017      	beq.n	80028f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80028c2:	e063      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	f000 f9b6 	bl	8002c44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80028e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68fa      	ldr	r2, [r7, #12]
 80028ee:	609a      	str	r2, [r3, #8]
      break;
 80028f0:	e04c      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6818      	ldr	r0, [r3, #0]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	6899      	ldr	r1, [r3, #8]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f000 f99f 	bl	8002c44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002914:	609a      	str	r2, [r3, #8]
      break;
 8002916:	e039      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	461a      	mov	r2, r3
 8002926:	f000 f913 	bl	8002b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2150      	movs	r1, #80	; 0x50
 8002930:	4618      	mov	r0, r3
 8002932:	f000 f96c 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002936:	e029      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	461a      	mov	r2, r3
 8002946:	f000 f932 	bl	8002bae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2160      	movs	r1, #96	; 0x60
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f95c 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002956:	e019      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6818      	ldr	r0, [r3, #0]
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	461a      	mov	r2, r3
 8002966:	f000 f8f3 	bl	8002b50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2140      	movs	r1, #64	; 0x40
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f94c 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002976:	e009      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4619      	mov	r1, r3
 8002982:	4610      	mov	r0, r2
 8002984:	f000 f943 	bl	8002c0e <TIM_ITRx_SetConfig>
      break;
 8002988:	e000      	b.n	800298c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800298a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	fffeff88 	.word	0xfffeff88

080029ac <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a04:	bf00      	nop
 8002a06:	370c      	adds	r7, #12
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	4a40      	ldr	r2, [pc, #256]	; (8002b24 <TIM_Base_SetConfig+0x114>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d013      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a2e:	d00f      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a3d      	ldr	r2, [pc, #244]	; (8002b28 <TIM_Base_SetConfig+0x118>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00b      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a3c      	ldr	r2, [pc, #240]	; (8002b2c <TIM_Base_SetConfig+0x11c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d007      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a3b      	ldr	r2, [pc, #236]	; (8002b30 <TIM_Base_SetConfig+0x120>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d003      	beq.n	8002a50 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a3a      	ldr	r2, [pc, #232]	; (8002b34 <TIM_Base_SetConfig+0x124>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d108      	bne.n	8002a62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <TIM_Base_SetConfig+0x114>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02b      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a70:	d027      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a2c      	ldr	r2, [pc, #176]	; (8002b28 <TIM_Base_SetConfig+0x118>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d023      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a2b      	ldr	r2, [pc, #172]	; (8002b2c <TIM_Base_SetConfig+0x11c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01f      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a2a      	ldr	r2, [pc, #168]	; (8002b30 <TIM_Base_SetConfig+0x120>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d01b      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <TIM_Base_SetConfig+0x124>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d017      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <TIM_Base_SetConfig+0x128>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d013      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a27      	ldr	r2, [pc, #156]	; (8002b3c <TIM_Base_SetConfig+0x12c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00f      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <TIM_Base_SetConfig+0x130>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00b      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <TIM_Base_SetConfig+0x134>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d007      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <TIM_Base_SetConfig+0x138>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d003      	beq.n	8002ac2 <TIM_Base_SetConfig+0xb2>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <TIM_Base_SetConfig+0x13c>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d108      	bne.n	8002ad4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <TIM_Base_SetConfig+0x114>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d003      	beq.n	8002b08 <TIM_Base_SetConfig+0xf8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <TIM_Base_SetConfig+0x124>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d103      	bne.n	8002b10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2201      	movs	r2, #1
 8002b14:	615a      	str	r2, [r3, #20]
}
 8002b16:	bf00      	nop
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	40010000 	.word	0x40010000
 8002b28:	40000400 	.word	0x40000400
 8002b2c:	40000800 	.word	0x40000800
 8002b30:	40000c00 	.word	0x40000c00
 8002b34:	40010400 	.word	0x40010400
 8002b38:	40014000 	.word	0x40014000
 8002b3c:	40014400 	.word	0x40014400
 8002b40:	40014800 	.word	0x40014800
 8002b44:	40001800 	.word	0x40001800
 8002b48:	40001c00 	.word	0x40001c00
 8002b4c:	40002000 	.word	0x40002000

08002b50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b087      	sub	sp, #28
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	f023 0201 	bic.w	r2, r3, #1
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	011b      	lsls	r3, r3, #4
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	f023 030a 	bic.w	r3, r3, #10
 8002b8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	621a      	str	r2, [r3, #32]
}
 8002ba2:	bf00      	nop
 8002ba4:	371c      	adds	r7, #28
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr

08002bae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bae:	b480      	push	{r7}
 8002bb0:	b087      	sub	sp, #28
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0210 	bic.w	r2, r3, #16
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	031b      	lsls	r3, r3, #12
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	621a      	str	r2, [r3, #32]
}
 8002c02:	bf00      	nop
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f043 0307 	orr.w	r3, r3, #7
 8002c30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	609a      	str	r2, [r3, #8]
}
 8002c38:	bf00      	nop
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
 8002c50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	021a      	lsls	r2, r3, #8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	609a      	str	r2, [r3, #8]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e06d      	b.n	8002d78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2202      	movs	r2, #2
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cd6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	68fa      	ldr	r2, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d022      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d01d      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1d      	ldr	r2, [pc, #116]	; (8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d018      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1c      	ldr	r2, [pc, #112]	; (8002d90 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d013      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a15      	ldr	r2, [pc, #84]	; (8002d88 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a16      	ldr	r2, [pc, #88]	; (8002d98 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a15      	ldr	r2, [pc, #84]	; (8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10c      	bne.n	8002d66 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	68ba      	ldr	r2, [r7, #8]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3714      	adds	r7, #20
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010400 	.word	0x40010400
 8002d8c:	40000400 	.word	0x40000400
 8002d90:	40000800 	.word	0x40000800
 8002d94:	40000c00 	.word	0x40000c00
 8002d98:	40014000 	.word	0x40014000
 8002d9c:	40001800 	.word	0x40001800

08002da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002da8:	bf00      	nop
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e040      	b.n	8002e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d106      	bne.n	8002e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7fd fe6e 	bl	8000ae0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2224      	movs	r2, #36	; 0x24
 8002e08:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8be 	bl	8002f9c <UART_SetConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e022      	b.n	8002e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fb5c 	bl	80034f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	685a      	ldr	r2, [r3, #4]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fbe3 	bl	8003634 <UART_CheckIdleState>
 8002e6e:	4603      	mov	r3, r0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3708      	adds	r7, #8
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}

08002e78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	603b      	str	r3, [r7, #0]
 8002e84:	4613      	mov	r3, r2
 8002e86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e8c:	2b20      	cmp	r3, #32
 8002e8e:	d17f      	bne.n	8002f90 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_UART_Transmit+0x24>
 8002e96:	88fb      	ldrh	r3, [r7, #6]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e078      	b.n	8002f92 <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d101      	bne.n	8002eae <HAL_UART_Transmit+0x36>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	e071      	b.n	8002f92 <HAL_UART_Transmit+0x11a>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2221      	movs	r2, #33	; 0x21
 8002ec0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fd ff63 	bl	8000d8c <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	88fa      	ldrh	r2, [r7, #6]
 8002ed4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ee0:	d108      	bne.n	8002ef4 <HAL_UART_Transmit+0x7c>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d104      	bne.n	8002ef4 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	61bb      	str	r3, [r7, #24]
 8002ef2:	e003      	b.n	8002efc <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8002f04:	e02c      	b.n	8002f60 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2180      	movs	r1, #128	; 0x80
 8002f10:	68f8      	ldr	r0, [r7, #12]
 8002f12:	f000 fbd4 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e038      	b.n	8002f92 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	3302      	adds	r3, #2
 8002f3a:	61bb      	str	r3, [r7, #24]
 8002f3c:	e007      	b.n	8002f4e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	781a      	ldrb	r2, [r3, #0]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1cc      	bne.n	8002f06 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	2200      	movs	r2, #0
 8002f74:	2140      	movs	r1, #64	; 0x40
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 fba1 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e005      	b.n	8002f92 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4bb1      	ldr	r3, [pc, #708]	; (8003290 <UART_SetConfig+0x2f4>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6812      	ldr	r2, [r2, #0]
 8002fd2:	6939      	ldr	r1, [r7, #16]
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68da      	ldr	r2, [r3, #12]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	430a      	orrs	r2, r1
 8003010:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a9f      	ldr	r2, [pc, #636]	; (8003294 <UART_SetConfig+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d121      	bne.n	8003060 <UART_SetConfig+0xc4>
 800301c:	4b9e      	ldr	r3, [pc, #632]	; (8003298 <UART_SetConfig+0x2fc>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b03      	cmp	r3, #3
 8003028:	d816      	bhi.n	8003058 <UART_SetConfig+0xbc>
 800302a:	a201      	add	r2, pc, #4	; (adr r2, 8003030 <UART_SetConfig+0x94>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	08003041 	.word	0x08003041
 8003034:	0800304d 	.word	0x0800304d
 8003038:	08003047 	.word	0x08003047
 800303c:	08003053 	.word	0x08003053
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
 8003044:	e151      	b.n	80032ea <UART_SetConfig+0x34e>
 8003046:	2302      	movs	r3, #2
 8003048:	77fb      	strb	r3, [r7, #31]
 800304a:	e14e      	b.n	80032ea <UART_SetConfig+0x34e>
 800304c:	2304      	movs	r3, #4
 800304e:	77fb      	strb	r3, [r7, #31]
 8003050:	e14b      	b.n	80032ea <UART_SetConfig+0x34e>
 8003052:	2308      	movs	r3, #8
 8003054:	77fb      	strb	r3, [r7, #31]
 8003056:	e148      	b.n	80032ea <UART_SetConfig+0x34e>
 8003058:	2310      	movs	r3, #16
 800305a:	77fb      	strb	r3, [r7, #31]
 800305c:	bf00      	nop
 800305e:	e144      	b.n	80032ea <UART_SetConfig+0x34e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a8d      	ldr	r2, [pc, #564]	; (800329c <UART_SetConfig+0x300>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d134      	bne.n	80030d4 <UART_SetConfig+0x138>
 800306a:	4b8b      	ldr	r3, [pc, #556]	; (8003298 <UART_SetConfig+0x2fc>)
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b0c      	cmp	r3, #12
 8003076:	d829      	bhi.n	80030cc <UART_SetConfig+0x130>
 8003078:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0xe4>)
 800307a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307e:	bf00      	nop
 8003080:	080030b5 	.word	0x080030b5
 8003084:	080030cd 	.word	0x080030cd
 8003088:	080030cd 	.word	0x080030cd
 800308c:	080030cd 	.word	0x080030cd
 8003090:	080030c1 	.word	0x080030c1
 8003094:	080030cd 	.word	0x080030cd
 8003098:	080030cd 	.word	0x080030cd
 800309c:	080030cd 	.word	0x080030cd
 80030a0:	080030bb 	.word	0x080030bb
 80030a4:	080030cd 	.word	0x080030cd
 80030a8:	080030cd 	.word	0x080030cd
 80030ac:	080030cd 	.word	0x080030cd
 80030b0:	080030c7 	.word	0x080030c7
 80030b4:	2300      	movs	r3, #0
 80030b6:	77fb      	strb	r3, [r7, #31]
 80030b8:	e117      	b.n	80032ea <UART_SetConfig+0x34e>
 80030ba:	2302      	movs	r3, #2
 80030bc:	77fb      	strb	r3, [r7, #31]
 80030be:	e114      	b.n	80032ea <UART_SetConfig+0x34e>
 80030c0:	2304      	movs	r3, #4
 80030c2:	77fb      	strb	r3, [r7, #31]
 80030c4:	e111      	b.n	80032ea <UART_SetConfig+0x34e>
 80030c6:	2308      	movs	r3, #8
 80030c8:	77fb      	strb	r3, [r7, #31]
 80030ca:	e10e      	b.n	80032ea <UART_SetConfig+0x34e>
 80030cc:	2310      	movs	r3, #16
 80030ce:	77fb      	strb	r3, [r7, #31]
 80030d0:	bf00      	nop
 80030d2:	e10a      	b.n	80032ea <UART_SetConfig+0x34e>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a71      	ldr	r2, [pc, #452]	; (80032a0 <UART_SetConfig+0x304>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d120      	bne.n	8003120 <UART_SetConfig+0x184>
 80030de:	4b6e      	ldr	r3, [pc, #440]	; (8003298 <UART_SetConfig+0x2fc>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030e8:	2b10      	cmp	r3, #16
 80030ea:	d00f      	beq.n	800310c <UART_SetConfig+0x170>
 80030ec:	2b10      	cmp	r3, #16
 80030ee:	d802      	bhi.n	80030f6 <UART_SetConfig+0x15a>
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <UART_SetConfig+0x164>
 80030f4:	e010      	b.n	8003118 <UART_SetConfig+0x17c>
 80030f6:	2b20      	cmp	r3, #32
 80030f8:	d005      	beq.n	8003106 <UART_SetConfig+0x16a>
 80030fa:	2b30      	cmp	r3, #48	; 0x30
 80030fc:	d009      	beq.n	8003112 <UART_SetConfig+0x176>
 80030fe:	e00b      	b.n	8003118 <UART_SetConfig+0x17c>
 8003100:	2300      	movs	r3, #0
 8003102:	77fb      	strb	r3, [r7, #31]
 8003104:	e0f1      	b.n	80032ea <UART_SetConfig+0x34e>
 8003106:	2302      	movs	r3, #2
 8003108:	77fb      	strb	r3, [r7, #31]
 800310a:	e0ee      	b.n	80032ea <UART_SetConfig+0x34e>
 800310c:	2304      	movs	r3, #4
 800310e:	77fb      	strb	r3, [r7, #31]
 8003110:	e0eb      	b.n	80032ea <UART_SetConfig+0x34e>
 8003112:	2308      	movs	r3, #8
 8003114:	77fb      	strb	r3, [r7, #31]
 8003116:	e0e8      	b.n	80032ea <UART_SetConfig+0x34e>
 8003118:	2310      	movs	r3, #16
 800311a:	77fb      	strb	r3, [r7, #31]
 800311c:	bf00      	nop
 800311e:	e0e4      	b.n	80032ea <UART_SetConfig+0x34e>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a5f      	ldr	r2, [pc, #380]	; (80032a4 <UART_SetConfig+0x308>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d120      	bne.n	800316c <UART_SetConfig+0x1d0>
 800312a:	4b5b      	ldr	r3, [pc, #364]	; (8003298 <UART_SetConfig+0x2fc>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d00f      	beq.n	8003158 <UART_SetConfig+0x1bc>
 8003138:	2b40      	cmp	r3, #64	; 0x40
 800313a:	d802      	bhi.n	8003142 <UART_SetConfig+0x1a6>
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <UART_SetConfig+0x1b0>
 8003140:	e010      	b.n	8003164 <UART_SetConfig+0x1c8>
 8003142:	2b80      	cmp	r3, #128	; 0x80
 8003144:	d005      	beq.n	8003152 <UART_SetConfig+0x1b6>
 8003146:	2bc0      	cmp	r3, #192	; 0xc0
 8003148:	d009      	beq.n	800315e <UART_SetConfig+0x1c2>
 800314a:	e00b      	b.n	8003164 <UART_SetConfig+0x1c8>
 800314c:	2300      	movs	r3, #0
 800314e:	77fb      	strb	r3, [r7, #31]
 8003150:	e0cb      	b.n	80032ea <UART_SetConfig+0x34e>
 8003152:	2302      	movs	r3, #2
 8003154:	77fb      	strb	r3, [r7, #31]
 8003156:	e0c8      	b.n	80032ea <UART_SetConfig+0x34e>
 8003158:	2304      	movs	r3, #4
 800315a:	77fb      	strb	r3, [r7, #31]
 800315c:	e0c5      	b.n	80032ea <UART_SetConfig+0x34e>
 800315e:	2308      	movs	r3, #8
 8003160:	77fb      	strb	r3, [r7, #31]
 8003162:	e0c2      	b.n	80032ea <UART_SetConfig+0x34e>
 8003164:	2310      	movs	r3, #16
 8003166:	77fb      	strb	r3, [r7, #31]
 8003168:	bf00      	nop
 800316a:	e0be      	b.n	80032ea <UART_SetConfig+0x34e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4d      	ldr	r2, [pc, #308]	; (80032a8 <UART_SetConfig+0x30c>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d124      	bne.n	80031c0 <UART_SetConfig+0x224>
 8003176:	4b48      	ldr	r3, [pc, #288]	; (8003298 <UART_SetConfig+0x2fc>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003180:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003184:	d012      	beq.n	80031ac <UART_SetConfig+0x210>
 8003186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800318a:	d802      	bhi.n	8003192 <UART_SetConfig+0x1f6>
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <UART_SetConfig+0x204>
 8003190:	e012      	b.n	80031b8 <UART_SetConfig+0x21c>
 8003192:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003196:	d006      	beq.n	80031a6 <UART_SetConfig+0x20a>
 8003198:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800319c:	d009      	beq.n	80031b2 <UART_SetConfig+0x216>
 800319e:	e00b      	b.n	80031b8 <UART_SetConfig+0x21c>
 80031a0:	2300      	movs	r3, #0
 80031a2:	77fb      	strb	r3, [r7, #31]
 80031a4:	e0a1      	b.n	80032ea <UART_SetConfig+0x34e>
 80031a6:	2302      	movs	r3, #2
 80031a8:	77fb      	strb	r3, [r7, #31]
 80031aa:	e09e      	b.n	80032ea <UART_SetConfig+0x34e>
 80031ac:	2304      	movs	r3, #4
 80031ae:	77fb      	strb	r3, [r7, #31]
 80031b0:	e09b      	b.n	80032ea <UART_SetConfig+0x34e>
 80031b2:	2308      	movs	r3, #8
 80031b4:	77fb      	strb	r3, [r7, #31]
 80031b6:	e098      	b.n	80032ea <UART_SetConfig+0x34e>
 80031b8:	2310      	movs	r3, #16
 80031ba:	77fb      	strb	r3, [r7, #31]
 80031bc:	bf00      	nop
 80031be:	e094      	b.n	80032ea <UART_SetConfig+0x34e>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a39      	ldr	r2, [pc, #228]	; (80032ac <UART_SetConfig+0x310>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d124      	bne.n	8003214 <UART_SetConfig+0x278>
 80031ca:	4b33      	ldr	r3, [pc, #204]	; (8003298 <UART_SetConfig+0x2fc>)
 80031cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031d8:	d012      	beq.n	8003200 <UART_SetConfig+0x264>
 80031da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031de:	d802      	bhi.n	80031e6 <UART_SetConfig+0x24a>
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d007      	beq.n	80031f4 <UART_SetConfig+0x258>
 80031e4:	e012      	b.n	800320c <UART_SetConfig+0x270>
 80031e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ea:	d006      	beq.n	80031fa <UART_SetConfig+0x25e>
 80031ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f0:	d009      	beq.n	8003206 <UART_SetConfig+0x26a>
 80031f2:	e00b      	b.n	800320c <UART_SetConfig+0x270>
 80031f4:	2301      	movs	r3, #1
 80031f6:	77fb      	strb	r3, [r7, #31]
 80031f8:	e077      	b.n	80032ea <UART_SetConfig+0x34e>
 80031fa:	2302      	movs	r3, #2
 80031fc:	77fb      	strb	r3, [r7, #31]
 80031fe:	e074      	b.n	80032ea <UART_SetConfig+0x34e>
 8003200:	2304      	movs	r3, #4
 8003202:	77fb      	strb	r3, [r7, #31]
 8003204:	e071      	b.n	80032ea <UART_SetConfig+0x34e>
 8003206:	2308      	movs	r3, #8
 8003208:	77fb      	strb	r3, [r7, #31]
 800320a:	e06e      	b.n	80032ea <UART_SetConfig+0x34e>
 800320c:	2310      	movs	r3, #16
 800320e:	77fb      	strb	r3, [r7, #31]
 8003210:	bf00      	nop
 8003212:	e06a      	b.n	80032ea <UART_SetConfig+0x34e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a25      	ldr	r2, [pc, #148]	; (80032b0 <UART_SetConfig+0x314>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d124      	bne.n	8003268 <UART_SetConfig+0x2cc>
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <UART_SetConfig+0x2fc>)
 8003220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003224:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003228:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322c:	d012      	beq.n	8003254 <UART_SetConfig+0x2b8>
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	d802      	bhi.n	800323a <UART_SetConfig+0x29e>
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <UART_SetConfig+0x2ac>
 8003238:	e012      	b.n	8003260 <UART_SetConfig+0x2c4>
 800323a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323e:	d006      	beq.n	800324e <UART_SetConfig+0x2b2>
 8003240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003244:	d009      	beq.n	800325a <UART_SetConfig+0x2be>
 8003246:	e00b      	b.n	8003260 <UART_SetConfig+0x2c4>
 8003248:	2300      	movs	r3, #0
 800324a:	77fb      	strb	r3, [r7, #31]
 800324c:	e04d      	b.n	80032ea <UART_SetConfig+0x34e>
 800324e:	2302      	movs	r3, #2
 8003250:	77fb      	strb	r3, [r7, #31]
 8003252:	e04a      	b.n	80032ea <UART_SetConfig+0x34e>
 8003254:	2304      	movs	r3, #4
 8003256:	77fb      	strb	r3, [r7, #31]
 8003258:	e047      	b.n	80032ea <UART_SetConfig+0x34e>
 800325a:	2308      	movs	r3, #8
 800325c:	77fb      	strb	r3, [r7, #31]
 800325e:	e044      	b.n	80032ea <UART_SetConfig+0x34e>
 8003260:	2310      	movs	r3, #16
 8003262:	77fb      	strb	r3, [r7, #31]
 8003264:	bf00      	nop
 8003266:	e040      	b.n	80032ea <UART_SetConfig+0x34e>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a11      	ldr	r2, [pc, #68]	; (80032b4 <UART_SetConfig+0x318>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d139      	bne.n	80032e6 <UART_SetConfig+0x34a>
 8003272:	4b09      	ldr	r3, [pc, #36]	; (8003298 <UART_SetConfig+0x2fc>)
 8003274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003278:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800327c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003280:	d027      	beq.n	80032d2 <UART_SetConfig+0x336>
 8003282:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003286:	d817      	bhi.n	80032b8 <UART_SetConfig+0x31c>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01c      	beq.n	80032c6 <UART_SetConfig+0x32a>
 800328c:	e027      	b.n	80032de <UART_SetConfig+0x342>
 800328e:	bf00      	nop
 8003290:	efff69f3 	.word	0xefff69f3
 8003294:	40011000 	.word	0x40011000
 8003298:	40023800 	.word	0x40023800
 800329c:	40004400 	.word	0x40004400
 80032a0:	40004800 	.word	0x40004800
 80032a4:	40004c00 	.word	0x40004c00
 80032a8:	40005000 	.word	0x40005000
 80032ac:	40011400 	.word	0x40011400
 80032b0:	40007800 	.word	0x40007800
 80032b4:	40007c00 	.word	0x40007c00
 80032b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032bc:	d006      	beq.n	80032cc <UART_SetConfig+0x330>
 80032be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80032c2:	d009      	beq.n	80032d8 <UART_SetConfig+0x33c>
 80032c4:	e00b      	b.n	80032de <UART_SetConfig+0x342>
 80032c6:	2300      	movs	r3, #0
 80032c8:	77fb      	strb	r3, [r7, #31]
 80032ca:	e00e      	b.n	80032ea <UART_SetConfig+0x34e>
 80032cc:	2302      	movs	r3, #2
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e00b      	b.n	80032ea <UART_SetConfig+0x34e>
 80032d2:	2304      	movs	r3, #4
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e008      	b.n	80032ea <UART_SetConfig+0x34e>
 80032d8:	2308      	movs	r3, #8
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e005      	b.n	80032ea <UART_SetConfig+0x34e>
 80032de:	2310      	movs	r3, #16
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	bf00      	nop
 80032e4:	e001      	b.n	80032ea <UART_SetConfig+0x34e>
 80032e6:	2310      	movs	r3, #16
 80032e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032f2:	d17f      	bne.n	80033f4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d85c      	bhi.n	80033b4 <UART_SetConfig+0x418>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <UART_SetConfig+0x364>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003325 	.word	0x08003325
 8003304:	08003345 	.word	0x08003345
 8003308:	08003365 	.word	0x08003365
 800330c:	080033b5 	.word	0x080033b5
 8003310:	0800337d 	.word	0x0800337d
 8003314:	080033b5 	.word	0x080033b5
 8003318:	080033b5 	.word	0x080033b5
 800331c:	080033b5 	.word	0x080033b5
 8003320:	0800339d 	.word	0x0800339d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003324:	f7fe fcc4 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8003328:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	005a      	lsls	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	61bb      	str	r3, [r7, #24]
        break;
 8003342:	e03a      	b.n	80033ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003344:	f7fe fcc8 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8003348:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	005a      	lsls	r2, r3, #1
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	085b      	lsrs	r3, r3, #1
 8003354:	441a      	add	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	fbb2 f3f3 	udiv	r3, r2, r3
 800335e:	b29b      	uxth	r3, r3
 8003360:	61bb      	str	r3, [r7, #24]
        break;
 8003362:	e02a      	b.n	80033ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	085a      	lsrs	r2, r3, #1
 800336a:	4b5f      	ldr	r3, [pc, #380]	; (80034e8 <UART_SetConfig+0x54c>)
 800336c:	4413      	add	r3, r2
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	6852      	ldr	r2, [r2, #4]
 8003372:	fbb3 f3f2 	udiv	r3, r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	61bb      	str	r3, [r7, #24]
        break;
 800337a:	e01e      	b.n	80033ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800337c:	f7fe fbda 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 8003380:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	005a      	lsls	r2, r3, #1
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	441a      	add	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	b29b      	uxth	r3, r3
 8003398:	61bb      	str	r3, [r7, #24]
        break;
 800339a:	e00e      	b.n	80033ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	085b      	lsrs	r3, r3, #1
 80033a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	61bb      	str	r3, [r7, #24]
        break;
 80033b2:	e002      	b.n	80033ba <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	75fb      	strb	r3, [r7, #23]
        break;
 80033b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d916      	bls.n	80033ee <UART_SetConfig+0x452>
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033c6:	d212      	bcs.n	80033ee <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	f023 030f 	bic.w	r3, r3, #15
 80033d0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	085b      	lsrs	r3, r3, #1
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	b29a      	uxth	r2, r3
 80033de:	897b      	ldrh	r3, [r7, #10]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	897a      	ldrh	r2, [r7, #10]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	e070      	b.n	80034d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	75fb      	strb	r3, [r7, #23]
 80033f2:	e06d      	b.n	80034d0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d859      	bhi.n	80034ae <UART_SetConfig+0x512>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <UART_SetConfig+0x464>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003425 	.word	0x08003425
 8003404:	08003443 	.word	0x08003443
 8003408:	08003461 	.word	0x08003461
 800340c:	080034af 	.word	0x080034af
 8003410:	08003479 	.word	0x08003479
 8003414:	080034af 	.word	0x080034af
 8003418:	080034af 	.word	0x080034af
 800341c:	080034af 	.word	0x080034af
 8003420:	08003497 	.word	0x08003497
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7fe fc44 	bl	8001cb0 <HAL_RCC_GetPCLK1Freq>
 8003428:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	085a      	lsrs	r2, r3, #1
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	441a      	add	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	b29b      	uxth	r3, r3
 800343e:	61bb      	str	r3, [r7, #24]
        break;
 8003440:	e038      	b.n	80034b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003442:	f7fe fc49 	bl	8001cd8 <HAL_RCC_GetPCLK2Freq>
 8003446:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	085a      	lsrs	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	fbb2 f3f3 	udiv	r3, r2, r3
 800345a:	b29b      	uxth	r3, r3
 800345c:	61bb      	str	r3, [r7, #24]
        break;
 800345e:	e029      	b.n	80034b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	085a      	lsrs	r2, r3, #1
 8003466:	4b21      	ldr	r3, [pc, #132]	; (80034ec <UART_SetConfig+0x550>)
 8003468:	4413      	add	r3, r2
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6852      	ldr	r2, [r2, #4]
 800346e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003472:	b29b      	uxth	r3, r3
 8003474:	61bb      	str	r3, [r7, #24]
        break;
 8003476:	e01d      	b.n	80034b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003478:	f7fe fb5c 	bl	8001b34 <HAL_RCC_GetSysClockFreq>
 800347c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	085a      	lsrs	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	441a      	add	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	b29b      	uxth	r3, r3
 8003492:	61bb      	str	r3, [r7, #24]
        break;
 8003494:	e00e      	b.n	80034b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	085b      	lsrs	r3, r3, #1
 800349c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	61bb      	str	r3, [r7, #24]
        break;
 80034ac:	e002      	b.n	80034b4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	75fb      	strb	r3, [r7, #23]
        break;
 80034b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	d908      	bls.n	80034cc <UART_SetConfig+0x530>
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c0:	d204      	bcs.n	80034cc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	60da      	str	r2, [r3, #12]
 80034ca:	e001      	b.n	80034d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80034dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	01e84800 	.word	0x01e84800
 80034ec:	00f42400 	.word	0x00f42400

080034f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00a      	beq.n	800351a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00a      	beq.n	800353c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	f003 0304 	and.w	r3, r3, #4
 8003544:	2b00      	cmp	r3, #0
 8003546:	d00a      	beq.n	800355e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00a      	beq.n	8003580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01a      	beq.n	8003606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035ee:	d10a      	bne.n	8003606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af02      	add	r7, sp, #8
 800363a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003642:	f7fd fba3 	bl	8000d8c <HAL_GetTick>
 8003646:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b08      	cmp	r3, #8
 8003654:	d10e      	bne.n	8003674 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003656:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f82a 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e020      	b.n	80036b6 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b04      	cmp	r3, #4
 8003680:	d10e      	bne.n	80036a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003682:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 f814 	bl	80036be <UART_WaitOnFlagUntilTimeout>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e00a      	b.n	80036b6 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2220      	movs	r2, #32
 80036a4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2220      	movs	r2, #32
 80036aa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b084      	sub	sp, #16
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	603b      	str	r3, [r7, #0]
 80036ca:	4613      	mov	r3, r2
 80036cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ce:	e05d      	b.n	800378c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036d6:	d059      	beq.n	800378c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d8:	f7fd fb58 	bl	8000d8c <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d302      	bcc.n	80036ee <UART_WaitOnFlagUntilTimeout+0x30>
 80036e8:	69bb      	ldr	r3, [r7, #24]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d11b      	bne.n	8003726 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036fc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2220      	movs	r2, #32
 8003718:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e042      	b.n	80037ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0304 	and.w	r3, r3, #4
 8003730:	2b00      	cmp	r3, #0
 8003732:	d02b      	beq.n	800378c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800373e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003742:	d123      	bne.n	800378c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800374c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800375c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0201 	bic.w	r2, r2, #1
 800376c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e00f      	b.n	80037ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4013      	ands	r3, r2
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	429a      	cmp	r2, r3
 800379a:	bf0c      	ite	eq
 800379c:	2301      	moveq	r3, #1
 800379e:	2300      	movne	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	79fb      	ldrb	r3, [r7, #7]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d092      	beq.n	80036d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3710      	adds	r7, #16
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <__errno>:
 80037b4:	4b01      	ldr	r3, [pc, #4]	; (80037bc <__errno+0x8>)
 80037b6:	6818      	ldr	r0, [r3, #0]
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	2000000c 	.word	0x2000000c

080037c0 <__libc_init_array>:
 80037c0:	b570      	push	{r4, r5, r6, lr}
 80037c2:	4e0d      	ldr	r6, [pc, #52]	; (80037f8 <__libc_init_array+0x38>)
 80037c4:	4c0d      	ldr	r4, [pc, #52]	; (80037fc <__libc_init_array+0x3c>)
 80037c6:	1ba4      	subs	r4, r4, r6
 80037c8:	10a4      	asrs	r4, r4, #2
 80037ca:	2500      	movs	r5, #0
 80037cc:	42a5      	cmp	r5, r4
 80037ce:	d109      	bne.n	80037e4 <__libc_init_array+0x24>
 80037d0:	4e0b      	ldr	r6, [pc, #44]	; (8003800 <__libc_init_array+0x40>)
 80037d2:	4c0c      	ldr	r4, [pc, #48]	; (8003804 <__libc_init_array+0x44>)
 80037d4:	f000 fc26 	bl	8004024 <_init>
 80037d8:	1ba4      	subs	r4, r4, r6
 80037da:	10a4      	asrs	r4, r4, #2
 80037dc:	2500      	movs	r5, #0
 80037de:	42a5      	cmp	r5, r4
 80037e0:	d105      	bne.n	80037ee <__libc_init_array+0x2e>
 80037e2:	bd70      	pop	{r4, r5, r6, pc}
 80037e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037e8:	4798      	blx	r3
 80037ea:	3501      	adds	r5, #1
 80037ec:	e7ee      	b.n	80037cc <__libc_init_array+0xc>
 80037ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037f2:	4798      	blx	r3
 80037f4:	3501      	adds	r5, #1
 80037f6:	e7f2      	b.n	80037de <__libc_init_array+0x1e>
 80037f8:	080040a8 	.word	0x080040a8
 80037fc:	080040a8 	.word	0x080040a8
 8003800:	080040a8 	.word	0x080040a8
 8003804:	080040ac 	.word	0x080040ac

08003808 <memset>:
 8003808:	4402      	add	r2, r0
 800380a:	4603      	mov	r3, r0
 800380c:	4293      	cmp	r3, r2
 800380e:	d100      	bne.n	8003812 <memset+0xa>
 8003810:	4770      	bx	lr
 8003812:	f803 1b01 	strb.w	r1, [r3], #1
 8003816:	e7f9      	b.n	800380c <memset+0x4>

08003818 <siprintf>:
 8003818:	b40e      	push	{r1, r2, r3}
 800381a:	b500      	push	{lr}
 800381c:	b09c      	sub	sp, #112	; 0x70
 800381e:	ab1d      	add	r3, sp, #116	; 0x74
 8003820:	9002      	str	r0, [sp, #8]
 8003822:	9006      	str	r0, [sp, #24]
 8003824:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003828:	4809      	ldr	r0, [pc, #36]	; (8003850 <siprintf+0x38>)
 800382a:	9107      	str	r1, [sp, #28]
 800382c:	9104      	str	r1, [sp, #16]
 800382e:	4909      	ldr	r1, [pc, #36]	; (8003854 <siprintf+0x3c>)
 8003830:	f853 2b04 	ldr.w	r2, [r3], #4
 8003834:	9105      	str	r1, [sp, #20]
 8003836:	6800      	ldr	r0, [r0, #0]
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	a902      	add	r1, sp, #8
 800383c:	f000 f866 	bl	800390c <_svfiprintf_r>
 8003840:	9b02      	ldr	r3, [sp, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	b01c      	add	sp, #112	; 0x70
 8003848:	f85d eb04 	ldr.w	lr, [sp], #4
 800384c:	b003      	add	sp, #12
 800384e:	4770      	bx	lr
 8003850:	2000000c 	.word	0x2000000c
 8003854:	ffff0208 	.word	0xffff0208

08003858 <__ssputs_r>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	688e      	ldr	r6, [r1, #8]
 800385e:	429e      	cmp	r6, r3
 8003860:	4682      	mov	sl, r0
 8003862:	460c      	mov	r4, r1
 8003864:	4690      	mov	r8, r2
 8003866:	4699      	mov	r9, r3
 8003868:	d837      	bhi.n	80038da <__ssputs_r+0x82>
 800386a:	898a      	ldrh	r2, [r1, #12]
 800386c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003870:	d031      	beq.n	80038d6 <__ssputs_r+0x7e>
 8003872:	6825      	ldr	r5, [r4, #0]
 8003874:	6909      	ldr	r1, [r1, #16]
 8003876:	1a6f      	subs	r7, r5, r1
 8003878:	6965      	ldr	r5, [r4, #20]
 800387a:	2302      	movs	r3, #2
 800387c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003880:	fb95 f5f3 	sdiv	r5, r5, r3
 8003884:	f109 0301 	add.w	r3, r9, #1
 8003888:	443b      	add	r3, r7
 800388a:	429d      	cmp	r5, r3
 800388c:	bf38      	it	cc
 800388e:	461d      	movcc	r5, r3
 8003890:	0553      	lsls	r3, r2, #21
 8003892:	d530      	bpl.n	80038f6 <__ssputs_r+0x9e>
 8003894:	4629      	mov	r1, r5
 8003896:	f000 fb2b 	bl	8003ef0 <_malloc_r>
 800389a:	4606      	mov	r6, r0
 800389c:	b950      	cbnz	r0, 80038b4 <__ssputs_r+0x5c>
 800389e:	230c      	movs	r3, #12
 80038a0:	f8ca 3000 	str.w	r3, [sl]
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038b4:	463a      	mov	r2, r7
 80038b6:	6921      	ldr	r1, [r4, #16]
 80038b8:	f000 faa8 	bl	8003e0c <memcpy>
 80038bc:	89a3      	ldrh	r3, [r4, #12]
 80038be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c6:	81a3      	strh	r3, [r4, #12]
 80038c8:	6126      	str	r6, [r4, #16]
 80038ca:	6165      	str	r5, [r4, #20]
 80038cc:	443e      	add	r6, r7
 80038ce:	1bed      	subs	r5, r5, r7
 80038d0:	6026      	str	r6, [r4, #0]
 80038d2:	60a5      	str	r5, [r4, #8]
 80038d4:	464e      	mov	r6, r9
 80038d6:	454e      	cmp	r6, r9
 80038d8:	d900      	bls.n	80038dc <__ssputs_r+0x84>
 80038da:	464e      	mov	r6, r9
 80038dc:	4632      	mov	r2, r6
 80038de:	4641      	mov	r1, r8
 80038e0:	6820      	ldr	r0, [r4, #0]
 80038e2:	f000 fa9e 	bl	8003e22 <memmove>
 80038e6:	68a3      	ldr	r3, [r4, #8]
 80038e8:	1b9b      	subs	r3, r3, r6
 80038ea:	60a3      	str	r3, [r4, #8]
 80038ec:	6823      	ldr	r3, [r4, #0]
 80038ee:	441e      	add	r6, r3
 80038f0:	6026      	str	r6, [r4, #0]
 80038f2:	2000      	movs	r0, #0
 80038f4:	e7dc      	b.n	80038b0 <__ssputs_r+0x58>
 80038f6:	462a      	mov	r2, r5
 80038f8:	f000 fb54 	bl	8003fa4 <_realloc_r>
 80038fc:	4606      	mov	r6, r0
 80038fe:	2800      	cmp	r0, #0
 8003900:	d1e2      	bne.n	80038c8 <__ssputs_r+0x70>
 8003902:	6921      	ldr	r1, [r4, #16]
 8003904:	4650      	mov	r0, sl
 8003906:	f000 faa5 	bl	8003e54 <_free_r>
 800390a:	e7c8      	b.n	800389e <__ssputs_r+0x46>

0800390c <_svfiprintf_r>:
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	461d      	mov	r5, r3
 8003912:	898b      	ldrh	r3, [r1, #12]
 8003914:	061f      	lsls	r7, r3, #24
 8003916:	b09d      	sub	sp, #116	; 0x74
 8003918:	4680      	mov	r8, r0
 800391a:	460c      	mov	r4, r1
 800391c:	4616      	mov	r6, r2
 800391e:	d50f      	bpl.n	8003940 <_svfiprintf_r+0x34>
 8003920:	690b      	ldr	r3, [r1, #16]
 8003922:	b96b      	cbnz	r3, 8003940 <_svfiprintf_r+0x34>
 8003924:	2140      	movs	r1, #64	; 0x40
 8003926:	f000 fae3 	bl	8003ef0 <_malloc_r>
 800392a:	6020      	str	r0, [r4, #0]
 800392c:	6120      	str	r0, [r4, #16]
 800392e:	b928      	cbnz	r0, 800393c <_svfiprintf_r+0x30>
 8003930:	230c      	movs	r3, #12
 8003932:	f8c8 3000 	str.w	r3, [r8]
 8003936:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800393a:	e0c8      	b.n	8003ace <_svfiprintf_r+0x1c2>
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	6163      	str	r3, [r4, #20]
 8003940:	2300      	movs	r3, #0
 8003942:	9309      	str	r3, [sp, #36]	; 0x24
 8003944:	2320      	movs	r3, #32
 8003946:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800394a:	2330      	movs	r3, #48	; 0x30
 800394c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003950:	9503      	str	r5, [sp, #12]
 8003952:	f04f 0b01 	mov.w	fp, #1
 8003956:	4637      	mov	r7, r6
 8003958:	463d      	mov	r5, r7
 800395a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800395e:	b10b      	cbz	r3, 8003964 <_svfiprintf_r+0x58>
 8003960:	2b25      	cmp	r3, #37	; 0x25
 8003962:	d13e      	bne.n	80039e2 <_svfiprintf_r+0xd6>
 8003964:	ebb7 0a06 	subs.w	sl, r7, r6
 8003968:	d00b      	beq.n	8003982 <_svfiprintf_r+0x76>
 800396a:	4653      	mov	r3, sl
 800396c:	4632      	mov	r2, r6
 800396e:	4621      	mov	r1, r4
 8003970:	4640      	mov	r0, r8
 8003972:	f7ff ff71 	bl	8003858 <__ssputs_r>
 8003976:	3001      	adds	r0, #1
 8003978:	f000 80a4 	beq.w	8003ac4 <_svfiprintf_r+0x1b8>
 800397c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800397e:	4453      	add	r3, sl
 8003980:	9309      	str	r3, [sp, #36]	; 0x24
 8003982:	783b      	ldrb	r3, [r7, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 809d 	beq.w	8003ac4 <_svfiprintf_r+0x1b8>
 800398a:	2300      	movs	r3, #0
 800398c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003990:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003994:	9304      	str	r3, [sp, #16]
 8003996:	9307      	str	r3, [sp, #28]
 8003998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800399c:	931a      	str	r3, [sp, #104]	; 0x68
 800399e:	462f      	mov	r7, r5
 80039a0:	2205      	movs	r2, #5
 80039a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80039a6:	4850      	ldr	r0, [pc, #320]	; (8003ae8 <_svfiprintf_r+0x1dc>)
 80039a8:	f7fc fc52 	bl	8000250 <memchr>
 80039ac:	9b04      	ldr	r3, [sp, #16]
 80039ae:	b9d0      	cbnz	r0, 80039e6 <_svfiprintf_r+0xda>
 80039b0:	06d9      	lsls	r1, r3, #27
 80039b2:	bf44      	itt	mi
 80039b4:	2220      	movmi	r2, #32
 80039b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039ba:	071a      	lsls	r2, r3, #28
 80039bc:	bf44      	itt	mi
 80039be:	222b      	movmi	r2, #43	; 0x2b
 80039c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80039c4:	782a      	ldrb	r2, [r5, #0]
 80039c6:	2a2a      	cmp	r2, #42	; 0x2a
 80039c8:	d015      	beq.n	80039f6 <_svfiprintf_r+0xea>
 80039ca:	9a07      	ldr	r2, [sp, #28]
 80039cc:	462f      	mov	r7, r5
 80039ce:	2000      	movs	r0, #0
 80039d0:	250a      	movs	r5, #10
 80039d2:	4639      	mov	r1, r7
 80039d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80039d8:	3b30      	subs	r3, #48	; 0x30
 80039da:	2b09      	cmp	r3, #9
 80039dc:	d94d      	bls.n	8003a7a <_svfiprintf_r+0x16e>
 80039de:	b1b8      	cbz	r0, 8003a10 <_svfiprintf_r+0x104>
 80039e0:	e00f      	b.n	8003a02 <_svfiprintf_r+0xf6>
 80039e2:	462f      	mov	r7, r5
 80039e4:	e7b8      	b.n	8003958 <_svfiprintf_r+0x4c>
 80039e6:	4a40      	ldr	r2, [pc, #256]	; (8003ae8 <_svfiprintf_r+0x1dc>)
 80039e8:	1a80      	subs	r0, r0, r2
 80039ea:	fa0b f000 	lsl.w	r0, fp, r0
 80039ee:	4318      	orrs	r0, r3
 80039f0:	9004      	str	r0, [sp, #16]
 80039f2:	463d      	mov	r5, r7
 80039f4:	e7d3      	b.n	800399e <_svfiprintf_r+0x92>
 80039f6:	9a03      	ldr	r2, [sp, #12]
 80039f8:	1d11      	adds	r1, r2, #4
 80039fa:	6812      	ldr	r2, [r2, #0]
 80039fc:	9103      	str	r1, [sp, #12]
 80039fe:	2a00      	cmp	r2, #0
 8003a00:	db01      	blt.n	8003a06 <_svfiprintf_r+0xfa>
 8003a02:	9207      	str	r2, [sp, #28]
 8003a04:	e004      	b.n	8003a10 <_svfiprintf_r+0x104>
 8003a06:	4252      	negs	r2, r2
 8003a08:	f043 0302 	orr.w	r3, r3, #2
 8003a0c:	9207      	str	r2, [sp, #28]
 8003a0e:	9304      	str	r3, [sp, #16]
 8003a10:	783b      	ldrb	r3, [r7, #0]
 8003a12:	2b2e      	cmp	r3, #46	; 0x2e
 8003a14:	d10c      	bne.n	8003a30 <_svfiprintf_r+0x124>
 8003a16:	787b      	ldrb	r3, [r7, #1]
 8003a18:	2b2a      	cmp	r3, #42	; 0x2a
 8003a1a:	d133      	bne.n	8003a84 <_svfiprintf_r+0x178>
 8003a1c:	9b03      	ldr	r3, [sp, #12]
 8003a1e:	1d1a      	adds	r2, r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	9203      	str	r2, [sp, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	bfb8      	it	lt
 8003a28:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003a2c:	3702      	adds	r7, #2
 8003a2e:	9305      	str	r3, [sp, #20]
 8003a30:	4d2e      	ldr	r5, [pc, #184]	; (8003aec <_svfiprintf_r+0x1e0>)
 8003a32:	7839      	ldrb	r1, [r7, #0]
 8003a34:	2203      	movs	r2, #3
 8003a36:	4628      	mov	r0, r5
 8003a38:	f7fc fc0a 	bl	8000250 <memchr>
 8003a3c:	b138      	cbz	r0, 8003a4e <_svfiprintf_r+0x142>
 8003a3e:	2340      	movs	r3, #64	; 0x40
 8003a40:	1b40      	subs	r0, r0, r5
 8003a42:	fa03 f000 	lsl.w	r0, r3, r0
 8003a46:	9b04      	ldr	r3, [sp, #16]
 8003a48:	4303      	orrs	r3, r0
 8003a4a:	3701      	adds	r7, #1
 8003a4c:	9304      	str	r3, [sp, #16]
 8003a4e:	7839      	ldrb	r1, [r7, #0]
 8003a50:	4827      	ldr	r0, [pc, #156]	; (8003af0 <_svfiprintf_r+0x1e4>)
 8003a52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a56:	2206      	movs	r2, #6
 8003a58:	1c7e      	adds	r6, r7, #1
 8003a5a:	f7fc fbf9 	bl	8000250 <memchr>
 8003a5e:	2800      	cmp	r0, #0
 8003a60:	d038      	beq.n	8003ad4 <_svfiprintf_r+0x1c8>
 8003a62:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <_svfiprintf_r+0x1e8>)
 8003a64:	bb13      	cbnz	r3, 8003aac <_svfiprintf_r+0x1a0>
 8003a66:	9b03      	ldr	r3, [sp, #12]
 8003a68:	3307      	adds	r3, #7
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	3308      	adds	r3, #8
 8003a70:	9303      	str	r3, [sp, #12]
 8003a72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a74:	444b      	add	r3, r9
 8003a76:	9309      	str	r3, [sp, #36]	; 0x24
 8003a78:	e76d      	b.n	8003956 <_svfiprintf_r+0x4a>
 8003a7a:	fb05 3202 	mla	r2, r5, r2, r3
 8003a7e:	2001      	movs	r0, #1
 8003a80:	460f      	mov	r7, r1
 8003a82:	e7a6      	b.n	80039d2 <_svfiprintf_r+0xc6>
 8003a84:	2300      	movs	r3, #0
 8003a86:	3701      	adds	r7, #1
 8003a88:	9305      	str	r3, [sp, #20]
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	250a      	movs	r5, #10
 8003a8e:	4638      	mov	r0, r7
 8003a90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a94:	3a30      	subs	r2, #48	; 0x30
 8003a96:	2a09      	cmp	r2, #9
 8003a98:	d903      	bls.n	8003aa2 <_svfiprintf_r+0x196>
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d0c8      	beq.n	8003a30 <_svfiprintf_r+0x124>
 8003a9e:	9105      	str	r1, [sp, #20]
 8003aa0:	e7c6      	b.n	8003a30 <_svfiprintf_r+0x124>
 8003aa2:	fb05 2101 	mla	r1, r5, r1, r2
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	e7f0      	b.n	8003a8e <_svfiprintf_r+0x182>
 8003aac:	ab03      	add	r3, sp, #12
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	4622      	mov	r2, r4
 8003ab2:	4b11      	ldr	r3, [pc, #68]	; (8003af8 <_svfiprintf_r+0x1ec>)
 8003ab4:	a904      	add	r1, sp, #16
 8003ab6:	4640      	mov	r0, r8
 8003ab8:	f3af 8000 	nop.w
 8003abc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003ac0:	4681      	mov	r9, r0
 8003ac2:	d1d6      	bne.n	8003a72 <_svfiprintf_r+0x166>
 8003ac4:	89a3      	ldrh	r3, [r4, #12]
 8003ac6:	065b      	lsls	r3, r3, #25
 8003ac8:	f53f af35 	bmi.w	8003936 <_svfiprintf_r+0x2a>
 8003acc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ace:	b01d      	add	sp, #116	; 0x74
 8003ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ad4:	ab03      	add	r3, sp, #12
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	4622      	mov	r2, r4
 8003ada:	4b07      	ldr	r3, [pc, #28]	; (8003af8 <_svfiprintf_r+0x1ec>)
 8003adc:	a904      	add	r1, sp, #16
 8003ade:	4640      	mov	r0, r8
 8003ae0:	f000 f882 	bl	8003be8 <_printf_i>
 8003ae4:	e7ea      	b.n	8003abc <_svfiprintf_r+0x1b0>
 8003ae6:	bf00      	nop
 8003ae8:	0800406c 	.word	0x0800406c
 8003aec:	08004072 	.word	0x08004072
 8003af0:	08004076 	.word	0x08004076
 8003af4:	00000000 	.word	0x00000000
 8003af8:	08003859 	.word	0x08003859

08003afc <_printf_common>:
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	4691      	mov	r9, r2
 8003b02:	461f      	mov	r7, r3
 8003b04:	688a      	ldr	r2, [r1, #8]
 8003b06:	690b      	ldr	r3, [r1, #16]
 8003b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	bfb8      	it	lt
 8003b10:	4613      	movlt	r3, r2
 8003b12:	f8c9 3000 	str.w	r3, [r9]
 8003b16:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b1a:	4606      	mov	r6, r0
 8003b1c:	460c      	mov	r4, r1
 8003b1e:	b112      	cbz	r2, 8003b26 <_printf_common+0x2a>
 8003b20:	3301      	adds	r3, #1
 8003b22:	f8c9 3000 	str.w	r3, [r9]
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	0699      	lsls	r1, r3, #26
 8003b2a:	bf42      	ittt	mi
 8003b2c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b30:	3302      	addmi	r3, #2
 8003b32:	f8c9 3000 	strmi.w	r3, [r9]
 8003b36:	6825      	ldr	r5, [r4, #0]
 8003b38:	f015 0506 	ands.w	r5, r5, #6
 8003b3c:	d107      	bne.n	8003b4e <_printf_common+0x52>
 8003b3e:	f104 0a19 	add.w	sl, r4, #25
 8003b42:	68e3      	ldr	r3, [r4, #12]
 8003b44:	f8d9 2000 	ldr.w	r2, [r9]
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	42ab      	cmp	r3, r5
 8003b4c:	dc28      	bgt.n	8003ba0 <_printf_common+0xa4>
 8003b4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b52:	6822      	ldr	r2, [r4, #0]
 8003b54:	3300      	adds	r3, #0
 8003b56:	bf18      	it	ne
 8003b58:	2301      	movne	r3, #1
 8003b5a:	0692      	lsls	r2, r2, #26
 8003b5c:	d42d      	bmi.n	8003bba <_printf_common+0xbe>
 8003b5e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b62:	4639      	mov	r1, r7
 8003b64:	4630      	mov	r0, r6
 8003b66:	47c0      	blx	r8
 8003b68:	3001      	adds	r0, #1
 8003b6a:	d020      	beq.n	8003bae <_printf_common+0xb2>
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	68e5      	ldr	r5, [r4, #12]
 8003b70:	f8d9 2000 	ldr.w	r2, [r9]
 8003b74:	f003 0306 	and.w	r3, r3, #6
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	bf08      	it	eq
 8003b7c:	1aad      	subeq	r5, r5, r2
 8003b7e:	68a3      	ldr	r3, [r4, #8]
 8003b80:	6922      	ldr	r2, [r4, #16]
 8003b82:	bf0c      	ite	eq
 8003b84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b88:	2500      	movne	r5, #0
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	bfc4      	itt	gt
 8003b8e:	1a9b      	subgt	r3, r3, r2
 8003b90:	18ed      	addgt	r5, r5, r3
 8003b92:	f04f 0900 	mov.w	r9, #0
 8003b96:	341a      	adds	r4, #26
 8003b98:	454d      	cmp	r5, r9
 8003b9a:	d11a      	bne.n	8003bd2 <_printf_common+0xd6>
 8003b9c:	2000      	movs	r0, #0
 8003b9e:	e008      	b.n	8003bb2 <_printf_common+0xb6>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	4652      	mov	r2, sl
 8003ba4:	4639      	mov	r1, r7
 8003ba6:	4630      	mov	r0, r6
 8003ba8:	47c0      	blx	r8
 8003baa:	3001      	adds	r0, #1
 8003bac:	d103      	bne.n	8003bb6 <_printf_common+0xba>
 8003bae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb6:	3501      	adds	r5, #1
 8003bb8:	e7c3      	b.n	8003b42 <_printf_common+0x46>
 8003bba:	18e1      	adds	r1, r4, r3
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	2030      	movs	r0, #48	; 0x30
 8003bc0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bc4:	4422      	add	r2, r4
 8003bc6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bce:	3302      	adds	r3, #2
 8003bd0:	e7c5      	b.n	8003b5e <_printf_common+0x62>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	4639      	mov	r1, r7
 8003bd8:	4630      	mov	r0, r6
 8003bda:	47c0      	blx	r8
 8003bdc:	3001      	adds	r0, #1
 8003bde:	d0e6      	beq.n	8003bae <_printf_common+0xb2>
 8003be0:	f109 0901 	add.w	r9, r9, #1
 8003be4:	e7d8      	b.n	8003b98 <_printf_common+0x9c>
	...

08003be8 <_printf_i>:
 8003be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	7e09      	ldrb	r1, [r1, #24]
 8003bf4:	b085      	sub	sp, #20
 8003bf6:	296e      	cmp	r1, #110	; 0x6e
 8003bf8:	4617      	mov	r7, r2
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	4698      	mov	r8, r3
 8003bfe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003c00:	f000 80b3 	beq.w	8003d6a <_printf_i+0x182>
 8003c04:	d822      	bhi.n	8003c4c <_printf_i+0x64>
 8003c06:	2963      	cmp	r1, #99	; 0x63
 8003c08:	d036      	beq.n	8003c78 <_printf_i+0x90>
 8003c0a:	d80a      	bhi.n	8003c22 <_printf_i+0x3a>
 8003c0c:	2900      	cmp	r1, #0
 8003c0e:	f000 80b9 	beq.w	8003d84 <_printf_i+0x19c>
 8003c12:	2958      	cmp	r1, #88	; 0x58
 8003c14:	f000 8083 	beq.w	8003d1e <_printf_i+0x136>
 8003c18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c1c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c20:	e032      	b.n	8003c88 <_printf_i+0xa0>
 8003c22:	2964      	cmp	r1, #100	; 0x64
 8003c24:	d001      	beq.n	8003c2a <_printf_i+0x42>
 8003c26:	2969      	cmp	r1, #105	; 0x69
 8003c28:	d1f6      	bne.n	8003c18 <_printf_i+0x30>
 8003c2a:	6820      	ldr	r0, [r4, #0]
 8003c2c:	6813      	ldr	r3, [r2, #0]
 8003c2e:	0605      	lsls	r5, r0, #24
 8003c30:	f103 0104 	add.w	r1, r3, #4
 8003c34:	d52a      	bpl.n	8003c8c <_printf_i+0xa4>
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6011      	str	r1, [r2, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da03      	bge.n	8003c46 <_printf_i+0x5e>
 8003c3e:	222d      	movs	r2, #45	; 0x2d
 8003c40:	425b      	negs	r3, r3
 8003c42:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c46:	486f      	ldr	r0, [pc, #444]	; (8003e04 <_printf_i+0x21c>)
 8003c48:	220a      	movs	r2, #10
 8003c4a:	e039      	b.n	8003cc0 <_printf_i+0xd8>
 8003c4c:	2973      	cmp	r1, #115	; 0x73
 8003c4e:	f000 809d 	beq.w	8003d8c <_printf_i+0x1a4>
 8003c52:	d808      	bhi.n	8003c66 <_printf_i+0x7e>
 8003c54:	296f      	cmp	r1, #111	; 0x6f
 8003c56:	d020      	beq.n	8003c9a <_printf_i+0xb2>
 8003c58:	2970      	cmp	r1, #112	; 0x70
 8003c5a:	d1dd      	bne.n	8003c18 <_printf_i+0x30>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	f043 0320 	orr.w	r3, r3, #32
 8003c62:	6023      	str	r3, [r4, #0]
 8003c64:	e003      	b.n	8003c6e <_printf_i+0x86>
 8003c66:	2975      	cmp	r1, #117	; 0x75
 8003c68:	d017      	beq.n	8003c9a <_printf_i+0xb2>
 8003c6a:	2978      	cmp	r1, #120	; 0x78
 8003c6c:	d1d4      	bne.n	8003c18 <_printf_i+0x30>
 8003c6e:	2378      	movs	r3, #120	; 0x78
 8003c70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c74:	4864      	ldr	r0, [pc, #400]	; (8003e08 <_printf_i+0x220>)
 8003c76:	e055      	b.n	8003d24 <_printf_i+0x13c>
 8003c78:	6813      	ldr	r3, [r2, #0]
 8003c7a:	1d19      	adds	r1, r3, #4
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6011      	str	r1, [r2, #0]
 8003c80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e08c      	b.n	8003da6 <_printf_i+0x1be>
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6011      	str	r1, [r2, #0]
 8003c90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c94:	bf18      	it	ne
 8003c96:	b21b      	sxthne	r3, r3
 8003c98:	e7cf      	b.n	8003c3a <_printf_i+0x52>
 8003c9a:	6813      	ldr	r3, [r2, #0]
 8003c9c:	6825      	ldr	r5, [r4, #0]
 8003c9e:	1d18      	adds	r0, r3, #4
 8003ca0:	6010      	str	r0, [r2, #0]
 8003ca2:	0628      	lsls	r0, r5, #24
 8003ca4:	d501      	bpl.n	8003caa <_printf_i+0xc2>
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	e002      	b.n	8003cb0 <_printf_i+0xc8>
 8003caa:	0668      	lsls	r0, r5, #25
 8003cac:	d5fb      	bpl.n	8003ca6 <_printf_i+0xbe>
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	4854      	ldr	r0, [pc, #336]	; (8003e04 <_printf_i+0x21c>)
 8003cb2:	296f      	cmp	r1, #111	; 0x6f
 8003cb4:	bf14      	ite	ne
 8003cb6:	220a      	movne	r2, #10
 8003cb8:	2208      	moveq	r2, #8
 8003cba:	2100      	movs	r1, #0
 8003cbc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cc0:	6865      	ldr	r5, [r4, #4]
 8003cc2:	60a5      	str	r5, [r4, #8]
 8003cc4:	2d00      	cmp	r5, #0
 8003cc6:	f2c0 8095 	blt.w	8003df4 <_printf_i+0x20c>
 8003cca:	6821      	ldr	r1, [r4, #0]
 8003ccc:	f021 0104 	bic.w	r1, r1, #4
 8003cd0:	6021      	str	r1, [r4, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d13d      	bne.n	8003d52 <_printf_i+0x16a>
 8003cd6:	2d00      	cmp	r5, #0
 8003cd8:	f040 808e 	bne.w	8003df8 <_printf_i+0x210>
 8003cdc:	4665      	mov	r5, ip
 8003cde:	2a08      	cmp	r2, #8
 8003ce0:	d10b      	bne.n	8003cfa <_printf_i+0x112>
 8003ce2:	6823      	ldr	r3, [r4, #0]
 8003ce4:	07db      	lsls	r3, r3, #31
 8003ce6:	d508      	bpl.n	8003cfa <_printf_i+0x112>
 8003ce8:	6923      	ldr	r3, [r4, #16]
 8003cea:	6862      	ldr	r2, [r4, #4]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	bfde      	ittt	le
 8003cf0:	2330      	movle	r3, #48	; 0x30
 8003cf2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cf6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003cfa:	ebac 0305 	sub.w	r3, ip, r5
 8003cfe:	6123      	str	r3, [r4, #16]
 8003d00:	f8cd 8000 	str.w	r8, [sp]
 8003d04:	463b      	mov	r3, r7
 8003d06:	aa03      	add	r2, sp, #12
 8003d08:	4621      	mov	r1, r4
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	f7ff fef6 	bl	8003afc <_printf_common>
 8003d10:	3001      	adds	r0, #1
 8003d12:	d14d      	bne.n	8003db0 <_printf_i+0x1c8>
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d18:	b005      	add	sp, #20
 8003d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d1e:	4839      	ldr	r0, [pc, #228]	; (8003e04 <_printf_i+0x21c>)
 8003d20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d24:	6813      	ldr	r3, [r2, #0]
 8003d26:	6821      	ldr	r1, [r4, #0]
 8003d28:	1d1d      	adds	r5, r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6015      	str	r5, [r2, #0]
 8003d2e:	060a      	lsls	r2, r1, #24
 8003d30:	d50b      	bpl.n	8003d4a <_printf_i+0x162>
 8003d32:	07ca      	lsls	r2, r1, #31
 8003d34:	bf44      	itt	mi
 8003d36:	f041 0120 	orrmi.w	r1, r1, #32
 8003d3a:	6021      	strmi	r1, [r4, #0]
 8003d3c:	b91b      	cbnz	r3, 8003d46 <_printf_i+0x15e>
 8003d3e:	6822      	ldr	r2, [r4, #0]
 8003d40:	f022 0220 	bic.w	r2, r2, #32
 8003d44:	6022      	str	r2, [r4, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	e7b7      	b.n	8003cba <_printf_i+0xd2>
 8003d4a:	064d      	lsls	r5, r1, #25
 8003d4c:	bf48      	it	mi
 8003d4e:	b29b      	uxthmi	r3, r3
 8003d50:	e7ef      	b.n	8003d32 <_printf_i+0x14a>
 8003d52:	4665      	mov	r5, ip
 8003d54:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d58:	fb02 3311 	mls	r3, r2, r1, r3
 8003d5c:	5cc3      	ldrb	r3, [r0, r3]
 8003d5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d62:	460b      	mov	r3, r1
 8003d64:	2900      	cmp	r1, #0
 8003d66:	d1f5      	bne.n	8003d54 <_printf_i+0x16c>
 8003d68:	e7b9      	b.n	8003cde <_printf_i+0xf6>
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	6825      	ldr	r5, [r4, #0]
 8003d6e:	6961      	ldr	r1, [r4, #20]
 8003d70:	1d18      	adds	r0, r3, #4
 8003d72:	6010      	str	r0, [r2, #0]
 8003d74:	0628      	lsls	r0, r5, #24
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	d501      	bpl.n	8003d7e <_printf_i+0x196>
 8003d7a:	6019      	str	r1, [r3, #0]
 8003d7c:	e002      	b.n	8003d84 <_printf_i+0x19c>
 8003d7e:	066a      	lsls	r2, r5, #25
 8003d80:	d5fb      	bpl.n	8003d7a <_printf_i+0x192>
 8003d82:	8019      	strh	r1, [r3, #0]
 8003d84:	2300      	movs	r3, #0
 8003d86:	6123      	str	r3, [r4, #16]
 8003d88:	4665      	mov	r5, ip
 8003d8a:	e7b9      	b.n	8003d00 <_printf_i+0x118>
 8003d8c:	6813      	ldr	r3, [r2, #0]
 8003d8e:	1d19      	adds	r1, r3, #4
 8003d90:	6011      	str	r1, [r2, #0]
 8003d92:	681d      	ldr	r5, [r3, #0]
 8003d94:	6862      	ldr	r2, [r4, #4]
 8003d96:	2100      	movs	r1, #0
 8003d98:	4628      	mov	r0, r5
 8003d9a:	f7fc fa59 	bl	8000250 <memchr>
 8003d9e:	b108      	cbz	r0, 8003da4 <_printf_i+0x1bc>
 8003da0:	1b40      	subs	r0, r0, r5
 8003da2:	6060      	str	r0, [r4, #4]
 8003da4:	6863      	ldr	r3, [r4, #4]
 8003da6:	6123      	str	r3, [r4, #16]
 8003da8:	2300      	movs	r3, #0
 8003daa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003dae:	e7a7      	b.n	8003d00 <_printf_i+0x118>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	462a      	mov	r2, r5
 8003db4:	4639      	mov	r1, r7
 8003db6:	4630      	mov	r0, r6
 8003db8:	47c0      	blx	r8
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d0aa      	beq.n	8003d14 <_printf_i+0x12c>
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	079b      	lsls	r3, r3, #30
 8003dc2:	d413      	bmi.n	8003dec <_printf_i+0x204>
 8003dc4:	68e0      	ldr	r0, [r4, #12]
 8003dc6:	9b03      	ldr	r3, [sp, #12]
 8003dc8:	4298      	cmp	r0, r3
 8003dca:	bfb8      	it	lt
 8003dcc:	4618      	movlt	r0, r3
 8003dce:	e7a3      	b.n	8003d18 <_printf_i+0x130>
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	464a      	mov	r2, r9
 8003dd4:	4639      	mov	r1, r7
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	47c0      	blx	r8
 8003dda:	3001      	adds	r0, #1
 8003ddc:	d09a      	beq.n	8003d14 <_printf_i+0x12c>
 8003dde:	3501      	adds	r5, #1
 8003de0:	68e3      	ldr	r3, [r4, #12]
 8003de2:	9a03      	ldr	r2, [sp, #12]
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	42ab      	cmp	r3, r5
 8003de8:	dcf2      	bgt.n	8003dd0 <_printf_i+0x1e8>
 8003dea:	e7eb      	b.n	8003dc4 <_printf_i+0x1dc>
 8003dec:	2500      	movs	r5, #0
 8003dee:	f104 0919 	add.w	r9, r4, #25
 8003df2:	e7f5      	b.n	8003de0 <_printf_i+0x1f8>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1ac      	bne.n	8003d52 <_printf_i+0x16a>
 8003df8:	7803      	ldrb	r3, [r0, #0]
 8003dfa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dfe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003e02:	e76c      	b.n	8003cde <_printf_i+0xf6>
 8003e04:	0800407d 	.word	0x0800407d
 8003e08:	0800408e 	.word	0x0800408e

08003e0c <memcpy>:
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	1e43      	subs	r3, r0, #1
 8003e10:	440a      	add	r2, r1
 8003e12:	4291      	cmp	r1, r2
 8003e14:	d100      	bne.n	8003e18 <memcpy+0xc>
 8003e16:	bd10      	pop	{r4, pc}
 8003e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e20:	e7f7      	b.n	8003e12 <memcpy+0x6>

08003e22 <memmove>:
 8003e22:	4288      	cmp	r0, r1
 8003e24:	b510      	push	{r4, lr}
 8003e26:	eb01 0302 	add.w	r3, r1, r2
 8003e2a:	d807      	bhi.n	8003e3c <memmove+0x1a>
 8003e2c:	1e42      	subs	r2, r0, #1
 8003e2e:	4299      	cmp	r1, r3
 8003e30:	d00a      	beq.n	8003e48 <memmove+0x26>
 8003e32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e36:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003e3a:	e7f8      	b.n	8003e2e <memmove+0xc>
 8003e3c:	4283      	cmp	r3, r0
 8003e3e:	d9f5      	bls.n	8003e2c <memmove+0xa>
 8003e40:	1881      	adds	r1, r0, r2
 8003e42:	1ad2      	subs	r2, r2, r3
 8003e44:	42d3      	cmn	r3, r2
 8003e46:	d100      	bne.n	8003e4a <memmove+0x28>
 8003e48:	bd10      	pop	{r4, pc}
 8003e4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003e4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003e52:	e7f7      	b.n	8003e44 <memmove+0x22>

08003e54 <_free_r>:
 8003e54:	b538      	push	{r3, r4, r5, lr}
 8003e56:	4605      	mov	r5, r0
 8003e58:	2900      	cmp	r1, #0
 8003e5a:	d045      	beq.n	8003ee8 <_free_r+0x94>
 8003e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e60:	1f0c      	subs	r4, r1, #4
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	18e4      	addlt	r4, r4, r3
 8003e68:	f000 f8d2 	bl	8004010 <__malloc_lock>
 8003e6c:	4a1f      	ldr	r2, [pc, #124]	; (8003eec <_free_r+0x98>)
 8003e6e:	6813      	ldr	r3, [r2, #0]
 8003e70:	4610      	mov	r0, r2
 8003e72:	b933      	cbnz	r3, 8003e82 <_free_r+0x2e>
 8003e74:	6063      	str	r3, [r4, #4]
 8003e76:	6014      	str	r4, [r2, #0]
 8003e78:	4628      	mov	r0, r5
 8003e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e7e:	f000 b8c8 	b.w	8004012 <__malloc_unlock>
 8003e82:	42a3      	cmp	r3, r4
 8003e84:	d90c      	bls.n	8003ea0 <_free_r+0x4c>
 8003e86:	6821      	ldr	r1, [r4, #0]
 8003e88:	1862      	adds	r2, r4, r1
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	bf04      	itt	eq
 8003e8e:	681a      	ldreq	r2, [r3, #0]
 8003e90:	685b      	ldreq	r3, [r3, #4]
 8003e92:	6063      	str	r3, [r4, #4]
 8003e94:	bf04      	itt	eq
 8003e96:	1852      	addeq	r2, r2, r1
 8003e98:	6022      	streq	r2, [r4, #0]
 8003e9a:	6004      	str	r4, [r0, #0]
 8003e9c:	e7ec      	b.n	8003e78 <_free_r+0x24>
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	b10a      	cbz	r2, 8003ea8 <_free_r+0x54>
 8003ea4:	42a2      	cmp	r2, r4
 8003ea6:	d9fa      	bls.n	8003e9e <_free_r+0x4a>
 8003ea8:	6819      	ldr	r1, [r3, #0]
 8003eaa:	1858      	adds	r0, r3, r1
 8003eac:	42a0      	cmp	r0, r4
 8003eae:	d10b      	bne.n	8003ec8 <_free_r+0x74>
 8003eb0:	6820      	ldr	r0, [r4, #0]
 8003eb2:	4401      	add	r1, r0
 8003eb4:	1858      	adds	r0, r3, r1
 8003eb6:	4282      	cmp	r2, r0
 8003eb8:	6019      	str	r1, [r3, #0]
 8003eba:	d1dd      	bne.n	8003e78 <_free_r+0x24>
 8003ebc:	6810      	ldr	r0, [r2, #0]
 8003ebe:	6852      	ldr	r2, [r2, #4]
 8003ec0:	605a      	str	r2, [r3, #4]
 8003ec2:	4401      	add	r1, r0
 8003ec4:	6019      	str	r1, [r3, #0]
 8003ec6:	e7d7      	b.n	8003e78 <_free_r+0x24>
 8003ec8:	d902      	bls.n	8003ed0 <_free_r+0x7c>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	602b      	str	r3, [r5, #0]
 8003ece:	e7d3      	b.n	8003e78 <_free_r+0x24>
 8003ed0:	6820      	ldr	r0, [r4, #0]
 8003ed2:	1821      	adds	r1, r4, r0
 8003ed4:	428a      	cmp	r2, r1
 8003ed6:	bf04      	itt	eq
 8003ed8:	6811      	ldreq	r1, [r2, #0]
 8003eda:	6852      	ldreq	r2, [r2, #4]
 8003edc:	6062      	str	r2, [r4, #4]
 8003ede:	bf04      	itt	eq
 8003ee0:	1809      	addeq	r1, r1, r0
 8003ee2:	6021      	streq	r1, [r4, #0]
 8003ee4:	605c      	str	r4, [r3, #4]
 8003ee6:	e7c7      	b.n	8003e78 <_free_r+0x24>
 8003ee8:	bd38      	pop	{r3, r4, r5, pc}
 8003eea:	bf00      	nop
 8003eec:	20000098 	.word	0x20000098

08003ef0 <_malloc_r>:
 8003ef0:	b570      	push	{r4, r5, r6, lr}
 8003ef2:	1ccd      	adds	r5, r1, #3
 8003ef4:	f025 0503 	bic.w	r5, r5, #3
 8003ef8:	3508      	adds	r5, #8
 8003efa:	2d0c      	cmp	r5, #12
 8003efc:	bf38      	it	cc
 8003efe:	250c      	movcc	r5, #12
 8003f00:	2d00      	cmp	r5, #0
 8003f02:	4606      	mov	r6, r0
 8003f04:	db01      	blt.n	8003f0a <_malloc_r+0x1a>
 8003f06:	42a9      	cmp	r1, r5
 8003f08:	d903      	bls.n	8003f12 <_malloc_r+0x22>
 8003f0a:	230c      	movs	r3, #12
 8003f0c:	6033      	str	r3, [r6, #0]
 8003f0e:	2000      	movs	r0, #0
 8003f10:	bd70      	pop	{r4, r5, r6, pc}
 8003f12:	f000 f87d 	bl	8004010 <__malloc_lock>
 8003f16:	4a21      	ldr	r2, [pc, #132]	; (8003f9c <_malloc_r+0xac>)
 8003f18:	6814      	ldr	r4, [r2, #0]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	b991      	cbnz	r1, 8003f44 <_malloc_r+0x54>
 8003f1e:	4c20      	ldr	r4, [pc, #128]	; (8003fa0 <_malloc_r+0xb0>)
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	b91b      	cbnz	r3, 8003f2c <_malloc_r+0x3c>
 8003f24:	4630      	mov	r0, r6
 8003f26:	f000 f863 	bl	8003ff0 <_sbrk_r>
 8003f2a:	6020      	str	r0, [r4, #0]
 8003f2c:	4629      	mov	r1, r5
 8003f2e:	4630      	mov	r0, r6
 8003f30:	f000 f85e 	bl	8003ff0 <_sbrk_r>
 8003f34:	1c43      	adds	r3, r0, #1
 8003f36:	d124      	bne.n	8003f82 <_malloc_r+0x92>
 8003f38:	230c      	movs	r3, #12
 8003f3a:	6033      	str	r3, [r6, #0]
 8003f3c:	4630      	mov	r0, r6
 8003f3e:	f000 f868 	bl	8004012 <__malloc_unlock>
 8003f42:	e7e4      	b.n	8003f0e <_malloc_r+0x1e>
 8003f44:	680b      	ldr	r3, [r1, #0]
 8003f46:	1b5b      	subs	r3, r3, r5
 8003f48:	d418      	bmi.n	8003f7c <_malloc_r+0x8c>
 8003f4a:	2b0b      	cmp	r3, #11
 8003f4c:	d90f      	bls.n	8003f6e <_malloc_r+0x7e>
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	50cd      	str	r5, [r1, r3]
 8003f52:	18cc      	adds	r4, r1, r3
 8003f54:	4630      	mov	r0, r6
 8003f56:	f000 f85c 	bl	8004012 <__malloc_unlock>
 8003f5a:	f104 000b 	add.w	r0, r4, #11
 8003f5e:	1d23      	adds	r3, r4, #4
 8003f60:	f020 0007 	bic.w	r0, r0, #7
 8003f64:	1ac3      	subs	r3, r0, r3
 8003f66:	d0d3      	beq.n	8003f10 <_malloc_r+0x20>
 8003f68:	425a      	negs	r2, r3
 8003f6a:	50e2      	str	r2, [r4, r3]
 8003f6c:	e7d0      	b.n	8003f10 <_malloc_r+0x20>
 8003f6e:	428c      	cmp	r4, r1
 8003f70:	684b      	ldr	r3, [r1, #4]
 8003f72:	bf16      	itet	ne
 8003f74:	6063      	strne	r3, [r4, #4]
 8003f76:	6013      	streq	r3, [r2, #0]
 8003f78:	460c      	movne	r4, r1
 8003f7a:	e7eb      	b.n	8003f54 <_malloc_r+0x64>
 8003f7c:	460c      	mov	r4, r1
 8003f7e:	6849      	ldr	r1, [r1, #4]
 8003f80:	e7cc      	b.n	8003f1c <_malloc_r+0x2c>
 8003f82:	1cc4      	adds	r4, r0, #3
 8003f84:	f024 0403 	bic.w	r4, r4, #3
 8003f88:	42a0      	cmp	r0, r4
 8003f8a:	d005      	beq.n	8003f98 <_malloc_r+0xa8>
 8003f8c:	1a21      	subs	r1, r4, r0
 8003f8e:	4630      	mov	r0, r6
 8003f90:	f000 f82e 	bl	8003ff0 <_sbrk_r>
 8003f94:	3001      	adds	r0, #1
 8003f96:	d0cf      	beq.n	8003f38 <_malloc_r+0x48>
 8003f98:	6025      	str	r5, [r4, #0]
 8003f9a:	e7db      	b.n	8003f54 <_malloc_r+0x64>
 8003f9c:	20000098 	.word	0x20000098
 8003fa0:	2000009c 	.word	0x2000009c

08003fa4 <_realloc_r>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	4607      	mov	r7, r0
 8003fa8:	4614      	mov	r4, r2
 8003faa:	460e      	mov	r6, r1
 8003fac:	b921      	cbnz	r1, 8003fb8 <_realloc_r+0x14>
 8003fae:	4611      	mov	r1, r2
 8003fb0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003fb4:	f7ff bf9c 	b.w	8003ef0 <_malloc_r>
 8003fb8:	b922      	cbnz	r2, 8003fc4 <_realloc_r+0x20>
 8003fba:	f7ff ff4b 	bl	8003e54 <_free_r>
 8003fbe:	4625      	mov	r5, r4
 8003fc0:	4628      	mov	r0, r5
 8003fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fc4:	f000 f826 	bl	8004014 <_malloc_usable_size_r>
 8003fc8:	42a0      	cmp	r0, r4
 8003fca:	d20f      	bcs.n	8003fec <_realloc_r+0x48>
 8003fcc:	4621      	mov	r1, r4
 8003fce:	4638      	mov	r0, r7
 8003fd0:	f7ff ff8e 	bl	8003ef0 <_malloc_r>
 8003fd4:	4605      	mov	r5, r0
 8003fd6:	2800      	cmp	r0, #0
 8003fd8:	d0f2      	beq.n	8003fc0 <_realloc_r+0x1c>
 8003fda:	4631      	mov	r1, r6
 8003fdc:	4622      	mov	r2, r4
 8003fde:	f7ff ff15 	bl	8003e0c <memcpy>
 8003fe2:	4631      	mov	r1, r6
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	f7ff ff35 	bl	8003e54 <_free_r>
 8003fea:	e7e9      	b.n	8003fc0 <_realloc_r+0x1c>
 8003fec:	4635      	mov	r5, r6
 8003fee:	e7e7      	b.n	8003fc0 <_realloc_r+0x1c>

08003ff0 <_sbrk_r>:
 8003ff0:	b538      	push	{r3, r4, r5, lr}
 8003ff2:	4c06      	ldr	r4, [pc, #24]	; (800400c <_sbrk_r+0x1c>)
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	4605      	mov	r5, r0
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	6023      	str	r3, [r4, #0]
 8003ffc:	f7fc fe00 	bl	8000c00 <_sbrk>
 8004000:	1c43      	adds	r3, r0, #1
 8004002:	d102      	bne.n	800400a <_sbrk_r+0x1a>
 8004004:	6823      	ldr	r3, [r4, #0]
 8004006:	b103      	cbz	r3, 800400a <_sbrk_r+0x1a>
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	bd38      	pop	{r3, r4, r5, pc}
 800400c:	200001ac 	.word	0x200001ac

08004010 <__malloc_lock>:
 8004010:	4770      	bx	lr

08004012 <__malloc_unlock>:
 8004012:	4770      	bx	lr

08004014 <_malloc_usable_size_r>:
 8004014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004018:	1f18      	subs	r0, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	bfbc      	itt	lt
 800401e:	580b      	ldrlt	r3, [r1, r0]
 8004020:	18c0      	addlt	r0, r0, r3
 8004022:	4770      	bx	lr

08004024 <_init>:
 8004024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004026:	bf00      	nop
 8004028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800402a:	bc08      	pop	{r3}
 800402c:	469e      	mov	lr, r3
 800402e:	4770      	bx	lr

08004030 <_fini>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr
