
lab_8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008604  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  08008808  08008808  00018808  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d20  08008d20  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d28  08008d28  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08008d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  200001e0  08008f10  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  08008f10  00020350  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013755  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e3b  00000000  00000000  00033963  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001158  00000000  00000000  000367a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fb0  00000000  00000000  000378f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0dc  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012032  00000000  00000000  00062984  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd8b7  00000000  00000000  000749b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0017226d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005150  00000000  00000000  001722e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080087ec 	.word	0x080087ec

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080087ec 	.word	0x080087ec

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000300:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08e      	sub	sp, #56	; 0x38
 80005f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000606:	4b8d      	ldr	r3, [pc, #564]	; (800083c <MX_GPIO_Init+0x24c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a8c      	ldr	r2, [pc, #560]	; (800083c <MX_GPIO_Init+0x24c>)
 800060c:	f043 0310 	orr.w	r3, r3, #16
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b8a      	ldr	r3, [pc, #552]	; (800083c <MX_GPIO_Init+0x24c>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0310 	and.w	r3, r3, #16
 800061a:	623b      	str	r3, [r7, #32]
 800061c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b87      	ldr	r3, [pc, #540]	; (800083c <MX_GPIO_Init+0x24c>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a86      	ldr	r2, [pc, #536]	; (800083c <MX_GPIO_Init+0x24c>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b84      	ldr	r3, [pc, #528]	; (800083c <MX_GPIO_Init+0x24c>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	61fb      	str	r3, [r7, #28]
 8000634:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b81      	ldr	r3, [pc, #516]	; (800083c <MX_GPIO_Init+0x24c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a80      	ldr	r2, [pc, #512]	; (800083c <MX_GPIO_Init+0x24c>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b7e      	ldr	r3, [pc, #504]	; (800083c <MX_GPIO_Init+0x24c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	61bb      	str	r3, [r7, #24]
 800064c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800064e:	4b7b      	ldr	r3, [pc, #492]	; (800083c <MX_GPIO_Init+0x24c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a7a      	ldr	r2, [pc, #488]	; (800083c <MX_GPIO_Init+0x24c>)
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b78      	ldr	r3, [pc, #480]	; (800083c <MX_GPIO_Init+0x24c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	617b      	str	r3, [r7, #20]
 8000664:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	4b75      	ldr	r3, [pc, #468]	; (800083c <MX_GPIO_Init+0x24c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a74      	ldr	r2, [pc, #464]	; (800083c <MX_GPIO_Init+0x24c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b72      	ldr	r3, [pc, #456]	; (800083c <MX_GPIO_Init+0x24c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	613b      	str	r3, [r7, #16]
 800067c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	4b6f      	ldr	r3, [pc, #444]	; (800083c <MX_GPIO_Init+0x24c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	4a6e      	ldr	r2, [pc, #440]	; (800083c <MX_GPIO_Init+0x24c>)
 8000684:	f043 0302 	orr.w	r3, r3, #2
 8000688:	6313      	str	r3, [r2, #48]	; 0x30
 800068a:	4b6c      	ldr	r3, [pc, #432]	; (800083c <MX_GPIO_Init+0x24c>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	f003 0302 	and.w	r3, r3, #2
 8000692:	60fb      	str	r3, [r7, #12]
 8000694:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000696:	4b69      	ldr	r3, [pc, #420]	; (800083c <MX_GPIO_Init+0x24c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a68      	ldr	r2, [pc, #416]	; (800083c <MX_GPIO_Init+0x24c>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b66      	ldr	r3, [pc, #408]	; (800083c <MX_GPIO_Init+0x24c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0308 	and.w	r3, r3, #8
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ae:	4b63      	ldr	r3, [pc, #396]	; (800083c <MX_GPIO_Init+0x24c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	4a62      	ldr	r2, [pc, #392]	; (800083c <MX_GPIO_Init+0x24c>)
 80006b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ba:	4b60      	ldr	r3, [pc, #384]	; (800083c <MX_GPIO_Init+0x24c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2168      	movs	r1, #104	; 0x68
 80006ca:	485d      	ldr	r0, [pc, #372]	; (8000840 <MX_GPIO_Init+0x250>)
 80006cc:	f001 f94e 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006d6:	485b      	ldr	r0, [pc, #364]	; (8000844 <MX_GPIO_Init+0x254>)
 80006d8:	f001 f948 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4859      	ldr	r0, [pc, #356]	; (8000848 <MX_GPIO_Init+0x258>)
 80006e2:	f001 f943 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006ec:	4857      	ldr	r0, [pc, #348]	; (800084c <MX_GPIO_Init+0x25c>)
 80006ee:	f001 f93d 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006f2:	2314      	movs	r3, #20
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f6:	2300      	movs	r3, #0
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	4619      	mov	r1, r3
 8000704:	484e      	ldr	r0, [pc, #312]	; (8000840 <MX_GPIO_Init+0x250>)
 8000706:	f000 ff6f 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800070a:	2368      	movs	r3, #104	; 0x68
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	2301      	movs	r3, #1
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000716:	2303      	movs	r3, #3
 8000718:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071e:	4619      	mov	r1, r3
 8000720:	4847      	ldr	r0, [pc, #284]	; (8000840 <MX_GPIO_Init+0x250>)
 8000722:	f000 ff61 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 8000726:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800072c:	2300      	movs	r3, #0
 800072e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2300      	movs	r3, #0
 8000732:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000734:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000738:	4619      	mov	r1, r3
 800073a:	4844      	ldr	r0, [pc, #272]	; (800084c <MX_GPIO_Init+0x25c>)
 800073c:	f000 ff54 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000740:	2332      	movs	r3, #50	; 0x32
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000744:	2302      	movs	r3, #2
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	2303      	movs	r3, #3
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000750:	230b      	movs	r3, #11
 8000752:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000758:	4619      	mov	r1, r3
 800075a:	483c      	ldr	r0, [pc, #240]	; (800084c <MX_GPIO_Init+0x25c>)
 800075c:	f000 ff44 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000760:	2386      	movs	r3, #134	; 0x86
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000764:	2302      	movs	r3, #2
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000770:	230b      	movs	r3, #11
 8000772:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000778:	4619      	mov	r1, r3
 800077a:	4835      	ldr	r0, [pc, #212]	; (8000850 <MX_GPIO_Init+0x260>)
 800077c:	f000 ff34 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000786:	2302      	movs	r3, #2
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000792:	230b      	movs	r3, #11
 8000794:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4619      	mov	r1, r3
 800079c:	4829      	ldr	r0, [pc, #164]	; (8000844 <MX_GPIO_Init+0x254>)
 800079e:	f000 ff23 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007a2:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	4619      	mov	r1, r3
 80007ba:	4822      	ldr	r0, [pc, #136]	; (8000844 <MX_GPIO_Init+0x254>)
 80007bc:	f000 ff14 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007c0:	2340      	movs	r3, #64	; 0x40
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c4:	2301      	movs	r3, #1
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	2300      	movs	r3, #0
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	4619      	mov	r1, r3
 80007d6:	481c      	ldr	r0, [pc, #112]	; (8000848 <MX_GPIO_Init+0x258>)
 80007d8:	f000 ff06 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007dc:	2380      	movs	r3, #128	; 0x80
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4816      	ldr	r0, [pc, #88]	; (8000848 <MX_GPIO_Init+0x258>)
 80007f0:	f000 fefa 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000802:	2303      	movs	r3, #3
 8000804:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080a:	4619      	mov	r1, r3
 800080c:	480f      	ldr	r0, [pc, #60]	; (800084c <MX_GPIO_Init+0x25c>)
 800080e:	f000 feeb 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000812:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000816:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000820:	2303      	movs	r3, #3
 8000822:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000824:	230b      	movs	r3, #11
 8000826:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800082c:	4619      	mov	r1, r3
 800082e:	4806      	ldr	r0, [pc, #24]	; (8000848 <MX_GPIO_Init+0x258>)
 8000830:	f000 feda 	bl	80015e8 <HAL_GPIO_Init>

}
 8000834:	bf00      	nop
 8000836:	3738      	adds	r7, #56	; 0x38
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40023800 	.word	0x40023800
 8000840:	40021000 	.word	0x40021000
 8000844:	40020400 	.word	0x40020400
 8000848:	40021800 	.word	0x40021800
 800084c:	40020800 	.word	0x40020800
 8000850:	40020000 	.word	0x40020000

08000854 <GUI_init>:
#include "gui.h"

void GUI_init() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8000858:	f003 feea 	bl	8004630 <ILI9341_Init>
	ILI9341_Set_Rotation(3);
 800085c:	2003      	movs	r0, #3
 800085e:	f003 fe89 	bl	8004574 <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(WHITE);
 8000862:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000866:	f004 f88b 	bl	8004980 <ILI9341_Fill_Screen>

	red_percent = 0;
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <GUI_init+0x2c>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]
	green_percent = 0;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <GUI_init+0x30>)
 8000872:	2200      	movs	r2, #0
 8000874:	701a      	strb	r2, [r3, #0]
	blue_percent = 0;
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <GUI_init+0x34>)
 8000878:	2200      	movs	r2, #0
 800087a:	701a      	strb	r2, [r3, #0]
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000208 	.word	0x20000208
 8000884:	20000210 	.word	0x20000210
 8000888:	20000209 	.word	0x20000209

0800088c <first_page>:

void first_page() {
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

	// render
	draw_change_page_button();
 8000890:	f000 f822 	bl	80008d8 <draw_change_page_button>
	draw_color_buttons();
 8000894:	f000 f808 	bl	80008a8 <draw_color_buttons>
	draw_progress_bars();
 8000898:	f000 f838 	bl	800090c <draw_progress_bars>
	draw_color_percent();
 800089c:	f000 f8d4 	bl	8000a48 <draw_color_percent>

	// update
	update_progress_bars();
 80008a0:	f000 f91a 	bl	8000ad8 <update_progress_bars>

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <draw_color_buttons>:

void draw_color_buttons() {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

	ILI9341_Draw_Filled_Circle(40, 100, 20, RED);
 80008ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80008b0:	2214      	movs	r2, #20
 80008b2:	2164      	movs	r1, #100	; 0x64
 80008b4:	2028      	movs	r0, #40	; 0x28
 80008b6:	f003 fbe5 	bl	8004084 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(40, 150, 20, GREEN);
 80008ba:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80008be:	2214      	movs	r2, #20
 80008c0:	2196      	movs	r1, #150	; 0x96
 80008c2:	2028      	movs	r0, #40	; 0x28
 80008c4:	f003 fbde 	bl	8004084 <ILI9341_Draw_Filled_Circle>
	ILI9341_Draw_Filled_Circle(40, 200, 20, BLUE);
 80008c8:	231f      	movs	r3, #31
 80008ca:	2214      	movs	r2, #20
 80008cc:	21c8      	movs	r1, #200	; 0xc8
 80008ce:	2028      	movs	r0, #40	; 0x28
 80008d0:	f003 fbd8 	bl	8004084 <ILI9341_Draw_Filled_Circle>

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <draw_change_page_button>:

void draw_change_page_button(){
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0

	ILI9341_Draw_Filled_Circle(150, 50, 20, remix_color(red_percent, green_percent, blue_percent));
 80008dc:	4b08      	ldr	r3, [pc, #32]	; (8000900 <draw_change_page_button+0x28>)
 80008de:	7818      	ldrb	r0, [r3, #0]
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <draw_change_page_button+0x2c>)
 80008e2:	7819      	ldrb	r1, [r3, #0]
 80008e4:	4b08      	ldr	r3, [pc, #32]	; (8000908 <draw_change_page_button+0x30>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	f000 f96d 	bl	8000bc8 <remix_color>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2214      	movs	r2, #20
 80008f2:	2132      	movs	r1, #50	; 0x32
 80008f4:	2096      	movs	r0, #150	; 0x96
 80008f6:	f003 fbc5 	bl	8004084 <ILI9341_Draw_Filled_Circle>

}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000208 	.word	0x20000208
 8000904:	20000210 	.word	0x20000210
 8000908:	20000209 	.word	0x20000209

0800090c <draw_progress_bars>:

void draw_progress_bars() {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af02      	add	r7, sp, #8

	ILI9341_Draw_Filled_Rectangle_Coord(80, 80, 80 + (160 * red_percent / 100),
 8000912:	4b49      	ldr	r3, [pc, #292]	; (8000a38 <draw_progress_bars+0x12c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	461a      	mov	r2, r3
 8000918:	4613      	mov	r3, r2
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	4413      	add	r3, r2
 800091e:	015b      	lsls	r3, r3, #5
 8000920:	4a46      	ldr	r2, [pc, #280]	; (8000a3c <draw_progress_bars+0x130>)
 8000922:	fb82 1203 	smull	r1, r2, r2, r3
 8000926:	1152      	asrs	r2, r2, #5
 8000928:	17db      	asrs	r3, r3, #31
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b29b      	uxth	r3, r3
 800092e:	3350      	adds	r3, #80	; 0x50
 8000930:	b29a      	uxth	r2, r3
 8000932:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2378      	movs	r3, #120	; 0x78
 800093a:	2150      	movs	r1, #80	; 0x50
 800093c:	2050      	movs	r0, #80	; 0x50
 800093e:	f003 fc28 	bl	8004192 <ILI9341_Draw_Filled_Rectangle_Coord>
			120, RED);
	ILI9341_Draw_Filled_Rectangle_Coord(80, 80 + 50,
			80 + (160 * green_percent / 100), 120 + 50, GREEN);
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <draw_progress_bars+0x134>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4613      	mov	r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	4413      	add	r3, r2
 800094e:	015b      	lsls	r3, r3, #5
 8000950:	4a3a      	ldr	r2, [pc, #232]	; (8000a3c <draw_progress_bars+0x130>)
 8000952:	fb82 1203 	smull	r1, r2, r2, r3
 8000956:	1152      	asrs	r2, r2, #5
 8000958:	17db      	asrs	r3, r3, #31
 800095a:	1ad3      	subs	r3, r2, r3
	ILI9341_Draw_Filled_Rectangle_Coord(80, 80 + 50,
 800095c:	b29b      	uxth	r3, r3
 800095e:	3350      	adds	r3, #80	; 0x50
 8000960:	b29a      	uxth	r2, r3
 8000962:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	23aa      	movs	r3, #170	; 0xaa
 800096a:	2182      	movs	r1, #130	; 0x82
 800096c:	2050      	movs	r0, #80	; 0x50
 800096e:	f003 fc10 	bl	8004192 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(80, 80 + 100,
			80 + (160 * blue_percent / 100), 120 + 100, BLUE);
 8000972:	4b34      	ldr	r3, [pc, #208]	; (8000a44 <draw_progress_bars+0x138>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	015b      	lsls	r3, r3, #5
 8000980:	4a2e      	ldr	r2, [pc, #184]	; (8000a3c <draw_progress_bars+0x130>)
 8000982:	fb82 1203 	smull	r1, r2, r2, r3
 8000986:	1152      	asrs	r2, r2, #5
 8000988:	17db      	asrs	r3, r3, #31
 800098a:	1ad3      	subs	r3, r2, r3
	ILI9341_Draw_Filled_Rectangle_Coord(80, 80 + 100,
 800098c:	b29b      	uxth	r3, r3
 800098e:	3350      	adds	r3, #80	; 0x50
 8000990:	b29a      	uxth	r2, r3
 8000992:	231f      	movs	r3, #31
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	23dc      	movs	r3, #220	; 0xdc
 8000998:	21b4      	movs	r1, #180	; 0xb4
 800099a:	2050      	movs	r0, #80	; 0x50
 800099c:	f003 fbf9 	bl	8004192 <ILI9341_Draw_Filled_Rectangle_Coord>

	ILI9341_Draw_Filled_Rectangle_Coord(80 + (160 * red_percent / 100), 80, 240,
 80009a0:	4b25      	ldr	r3, [pc, #148]	; (8000a38 <draw_progress_bars+0x12c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	015b      	lsls	r3, r3, #5
 80009ae:	4a23      	ldr	r2, [pc, #140]	; (8000a3c <draw_progress_bars+0x130>)
 80009b0:	fb82 1203 	smull	r1, r2, r2, r3
 80009b4:	1152      	asrs	r2, r2, #5
 80009b6:	17db      	asrs	r3, r3, #31
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	3350      	adds	r3, #80	; 0x50
 80009be:	b298      	uxth	r0, r3
 80009c0:	f64f 6359 	movw	r3, #65113	; 0xfe59
 80009c4:	9300      	str	r3, [sp, #0]
 80009c6:	2378      	movs	r3, #120	; 0x78
 80009c8:	22f0      	movs	r2, #240	; 0xf0
 80009ca:	2150      	movs	r1, #80	; 0x50
 80009cc:	f003 fbe1 	bl	8004192 <ILI9341_Draw_Filled_Rectangle_Coord>
			120, LIGHTRED);
	ILI9341_Draw_Filled_Rectangle_Coord(80 + (160 * green_percent / 100),
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <draw_progress_bars+0x134>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4613      	mov	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	4413      	add	r3, r2
 80009dc:	015b      	lsls	r3, r3, #5
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <draw_progress_bars+0x130>)
 80009e0:	fb82 1203 	smull	r1, r2, r2, r3
 80009e4:	1152      	asrs	r2, r2, #5
 80009e6:	17db      	asrs	r3, r3, #31
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	3350      	adds	r3, #80	; 0x50
 80009ee:	b298      	uxth	r0, r3
 80009f0:	f24d 73f9 	movw	r3, #55289	; 0xd7f9
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	23aa      	movs	r3, #170	; 0xaa
 80009f8:	22f0      	movs	r2, #240	; 0xf0
 80009fa:	2182      	movs	r1, #130	; 0x82
 80009fc:	f003 fbc9 	bl	8004192 <ILI9341_Draw_Filled_Rectangle_Coord>
			80 + 50, 240, 120 + 50, LIGHTGREEN);
	ILI9341_Draw_Filled_Rectangle_Coord(80 + (160 * blue_percent / 100),
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <draw_progress_bars+0x138>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	461a      	mov	r2, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	015b      	lsls	r3, r3, #5
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <draw_progress_bars+0x130>)
 8000a10:	fb82 1203 	smull	r1, r2, r2, r3
 8000a14:	1152      	asrs	r2, r2, #5
 8000a16:	17db      	asrs	r3, r3, #31
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	3350      	adds	r3, #80	; 0x50
 8000a1e:	b298      	uxth	r0, r3
 8000a20:	f64c 63bf 	movw	r3, #52927	; 0xcebf
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	23dc      	movs	r3, #220	; 0xdc
 8000a28:	22f0      	movs	r2, #240	; 0xf0
 8000a2a:	21b4      	movs	r1, #180	; 0xb4
 8000a2c:	f003 fbb1 	bl	8004192 <ILI9341_Draw_Filled_Rectangle_Coord>
			80 + 100, 240, 120 + 100, LIGHTBLUE);

}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000208 	.word	0x20000208
 8000a3c:	51eb851f 	.word	0x51eb851f
 8000a40:	20000210 	.word	0x20000210
 8000a44:	20000209 	.word	0x20000209

08000a48 <draw_color_percent>:

void draw_color_percent() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8

	char str[10];

	sprintf(str,"%d%%    ",red_percent);
 8000a4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ac8 <draw_color_percent+0x80>)
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	491d      	ldr	r1, [pc, #116]	; (8000acc <draw_color_percent+0x84>)
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f005 f86f 	bl	8005b3c <siprintf>
	ILI9341_Draw_Text(str, 250, 90, BLACK, 3, WHITE);
 8000a5e:	1d38      	adds	r0, r7, #4
 8000a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	2303      	movs	r3, #3
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	225a      	movs	r2, #90	; 0x5a
 8000a6e:	21fa      	movs	r1, #250	; 0xfa
 8000a70:	f003 fc82 	bl	8004378 <ILI9341_Draw_Text>

	sprintf(str,"%d%%    ",green_percent);
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <draw_color_percent+0x88>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	461a      	mov	r2, r3
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4913      	ldr	r1, [pc, #76]	; (8000acc <draw_color_percent+0x84>)
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f005 f85c 	bl	8005b3c <siprintf>
	ILI9341_Draw_Text(str, 250, 140, BLACK, 3, WHITE);
 8000a84:	1d38      	adds	r0, r7, #4
 8000a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a8a:	9301      	str	r3, [sp, #4]
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	9300      	str	r3, [sp, #0]
 8000a90:	2300      	movs	r3, #0
 8000a92:	228c      	movs	r2, #140	; 0x8c
 8000a94:	21fa      	movs	r1, #250	; 0xfa
 8000a96:	f003 fc6f 	bl	8004378 <ILI9341_Draw_Text>

	sprintf(str,"%d%%    ",blue_percent);
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <draw_color_percent+0x8c>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	490a      	ldr	r1, [pc, #40]	; (8000acc <draw_color_percent+0x84>)
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f005 f849 	bl	8005b3c <siprintf>
	ILI9341_Draw_Text(str, 250, 190, BLACK, 3, WHITE);
 8000aaa:	1d38      	adds	r0, r7, #4
 8000aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	22be      	movs	r2, #190	; 0xbe
 8000aba:	21fa      	movs	r1, #250	; 0xfa
 8000abc:	f003 fc5c 	bl	8004378 <ILI9341_Draw_Text>

}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000208 	.word	0x20000208
 8000acc:	08008808 	.word	0x08008808
 8000ad0:	20000210 	.word	0x20000210
 8000ad4:	20000209 	.word	0x20000209

08000ad8 <update_progress_bars>:

void update_progress_bars() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

	if (TP_Touchpad_Pressed()) {
 8000adc:	f004 f9d2 	bl	8004e84 <TP_Touchpad_Pressed>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d065      	beq.n	8000bb2 <update_progress_bars+0xda>

		if (TP_Read_Coordinates(coordinates) == TOUCHPAD_DATA_OK) {
 8000ae6:	4834      	ldr	r0, [pc, #208]	; (8000bb8 <update_progress_bars+0xe0>)
 8000ae8:	f004 f90a 	bl	8004d00 <TP_Read_Coordinates>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d15f      	bne.n	8000bb2 <update_progress_bars+0xda>

			// push red button
			if (coordinates[0] > 90 && coordinates[0] < 140
 8000af2:	4b31      	ldr	r3, [pc, #196]	; (8000bb8 <update_progress_bars+0xe0>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	2b5a      	cmp	r3, #90	; 0x5a
 8000af8:	d91a      	bls.n	8000b30 <update_progress_bars+0x58>
 8000afa:	4b2f      	ldr	r3, [pc, #188]	; (8000bb8 <update_progress_bars+0xe0>)
 8000afc:	881b      	ldrh	r3, [r3, #0]
 8000afe:	2b8b      	cmp	r3, #139	; 0x8b
 8000b00:	d816      	bhi.n	8000b30 <update_progress_bars+0x58>
					&& coordinates[1] < 310 && coordinates[1] > 260) {
 8000b02:	4b2d      	ldr	r3, [pc, #180]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b04:	885b      	ldrh	r3, [r3, #2]
 8000b06:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000b0a:	d211      	bcs.n	8000b30 <update_progress_bars+0x58>
 8000b0c:	4b2a      	ldr	r3, [pc, #168]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b0e:	885b      	ldrh	r3, [r3, #2]
 8000b10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b14:	d90c      	bls.n	8000b30 <update_progress_bars+0x58>

				red_percent += 10;
 8000b16:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <update_progress_bars+0xe4>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	330a      	adds	r3, #10
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <update_progress_bars+0xe4>)
 8000b20:	701a      	strb	r2, [r3, #0]
				if (red_percent > 100) {
 8000b22:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <update_progress_bars+0xe4>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	2b64      	cmp	r3, #100	; 0x64
 8000b28:	d902      	bls.n	8000b30 <update_progress_bars+0x58>
					red_percent = 0;
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <update_progress_bars+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	701a      	strb	r2, [r3, #0]


			}

			// push green button
			if (coordinates[0] > 130 && coordinates[0] < 180
 8000b30:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	2b82      	cmp	r3, #130	; 0x82
 8000b36:	d91a      	bls.n	8000b6e <update_progress_bars+0x96>
 8000b38:	4b1f      	ldr	r3, [pc, #124]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b3a:	881b      	ldrh	r3, [r3, #0]
 8000b3c:	2bb3      	cmp	r3, #179	; 0xb3
 8000b3e:	d816      	bhi.n	8000b6e <update_progress_bars+0x96>
					&& coordinates[1] < 310 && coordinates[1] > 260) {
 8000b40:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b42:	885b      	ldrh	r3, [r3, #2]
 8000b44:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000b48:	d211      	bcs.n	8000b6e <update_progress_bars+0x96>
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b4c:	885b      	ldrh	r3, [r3, #2]
 8000b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b52:	d90c      	bls.n	8000b6e <update_progress_bars+0x96>
				green_percent += 10;
 8000b54:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <update_progress_bars+0xe8>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	330a      	adds	r3, #10
 8000b5a:	b2da      	uxtb	r2, r3
 8000b5c:	4b18      	ldr	r3, [pc, #96]	; (8000bc0 <update_progress_bars+0xe8>)
 8000b5e:	701a      	strb	r2, [r3, #0]
				if (green_percent > 100) {
 8000b60:	4b17      	ldr	r3, [pc, #92]	; (8000bc0 <update_progress_bars+0xe8>)
 8000b62:	781b      	ldrb	r3, [r3, #0]
 8000b64:	2b64      	cmp	r3, #100	; 0x64
 8000b66:	d902      	bls.n	8000b6e <update_progress_bars+0x96>
					green_percent = 0;
 8000b68:	4b15      	ldr	r3, [pc, #84]	; (8000bc0 <update_progress_bars+0xe8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
				}
			}

			// push blue button
			if (coordinates[0] > 190 && coordinates[0] < 220
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b70:	881b      	ldrh	r3, [r3, #0]
 8000b72:	2bbe      	cmp	r3, #190	; 0xbe
 8000b74:	d91a      	bls.n	8000bac <update_progress_bars+0xd4>
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b78:	881b      	ldrh	r3, [r3, #0]
 8000b7a:	2bdb      	cmp	r3, #219	; 0xdb
 8000b7c:	d816      	bhi.n	8000bac <update_progress_bars+0xd4>
					&& coordinates[1] < 310 && coordinates[1] > 260) {
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b80:	885b      	ldrh	r3, [r3, #2]
 8000b82:	f5b3 7f9b 	cmp.w	r3, #310	; 0x136
 8000b86:	d211      	bcs.n	8000bac <update_progress_bars+0xd4>
 8000b88:	4b0b      	ldr	r3, [pc, #44]	; (8000bb8 <update_progress_bars+0xe0>)
 8000b8a:	885b      	ldrh	r3, [r3, #2]
 8000b8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b90:	d90c      	bls.n	8000bac <update_progress_bars+0xd4>
				blue_percent += 10;
 8000b92:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <update_progress_bars+0xec>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	330a      	adds	r3, #10
 8000b98:	b2da      	uxtb	r2, r3
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <update_progress_bars+0xec>)
 8000b9c:	701a      	strb	r2, [r3, #0]
				if (blue_percent > 100) {
 8000b9e:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <update_progress_bars+0xec>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b64      	cmp	r3, #100	; 0x64
 8000ba4:	d902      	bls.n	8000bac <update_progress_bars+0xd4>
					blue_percent = 0;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <update_progress_bars+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]
				}
			}

			HAL_Delay(200);
 8000bac:	20c8      	movs	r0, #200	; 0xc8
 8000bae:	f000 fc13 	bl	80013d8 <HAL_Delay>

		}

	}

}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	2000020c 	.word	0x2000020c
 8000bbc:	20000208 	.word	0x20000208
 8000bc0:	20000210 	.word	0x20000210
 8000bc4:	20000209 	.word	0x20000209

08000bc8 <remix_color>:

// r g b in percent
uint16_t remix_color(uint8_t r, uint8_t g, uint8_t b){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	71fb      	strb	r3, [r7, #7]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	71bb      	strb	r3, [r7, #6]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	717b      	strb	r3, [r7, #5]

	return (((r*RED)/100) & RED) | (((g*GREEN)/100) & GREEN) | (((b*BLUE)/100) & BLUE);
 8000bda:	79fa      	ldrb	r2, [r7, #7]
 8000bdc:	4613      	mov	r3, r2
 8000bde:	015b      	lsls	r3, r3, #5
 8000be0:	1a9b      	subs	r3, r3, r2
 8000be2:	02db      	lsls	r3, r3, #11
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <remix_color+0x80>)
 8000be6:	fb82 1203 	smull	r1, r2, r2, r3
 8000bea:	1152      	asrs	r2, r2, #5
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	b21a      	sxth	r2, r3
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <remix_color+0x84>)
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	b219      	sxth	r1, r3
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	4613      	mov	r3, r2
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	1a9b      	subs	r3, r3, r2
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	4a11      	ldr	r2, [pc, #68]	; (8000c48 <remix_color+0x80>)
 8000c04:	fb82 0203 	smull	r0, r2, r2, r3
 8000c08:	1152      	asrs	r2, r2, #5
 8000c0a:	17db      	asrs	r3, r3, #31
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b21b      	sxth	r3, r3
 8000c10:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	430b      	orrs	r3, r1
 8000c18:	b219      	sxth	r1, r3
 8000c1a:	797a      	ldrb	r2, [r7, #5]
 8000c1c:	4613      	mov	r3, r2
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	1a9b      	subs	r3, r3, r2
 8000c22:	4a09      	ldr	r2, [pc, #36]	; (8000c48 <remix_color+0x80>)
 8000c24:	fb82 0203 	smull	r0, r2, r2, r3
 8000c28:	1152      	asrs	r2, r2, #5
 8000c2a:	17db      	asrs	r3, r3, #31
 8000c2c:	1ad3      	subs	r3, r2, r3
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	f003 031f 	and.w	r3, r3, #31
 8000c34:	b21b      	sxth	r3, r3
 8000c36:	430b      	orrs	r3, r1
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	b29b      	uxth	r3, r3

}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	51eb851f 	.word	0x51eb851f
 8000c4c:	fffff800 	.word	0xfffff800

08000c50 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c58:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c5c:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <SCB_EnableICache+0x3c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c64:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c68:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <SCB_EnableICache+0x3c>)
 8000c6e:	695b      	ldr	r3, [r3, #20]
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <SCB_EnableICache+0x3c>)
 8000c72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c76:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c78:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c7c:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <SCB_EnableDCache+0x7c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c9e:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <SCB_EnableDCache+0x7c>)
 8000ca4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ca8:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	0b5b      	lsrs	r3, r3, #13
 8000cae:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cb2:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000cbc:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	015a      	lsls	r2, r3, #5
 8000cc2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000cc6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000ccc:	490f      	ldr	r1, [pc, #60]	; (8000d0c <SCB_EnableDCache+0x7c>)
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	1e5a      	subs	r2, r3, #1
 8000cd8:	60ba      	str	r2, [r7, #8]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d1ef      	bne.n	8000cbe <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	1e5a      	subs	r2, r3, #1
 8000ce2:	60fa      	str	r2, [r7, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1e5      	bne.n	8000cb4 <SCB_EnableDCache+0x24>
 8000ce8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <SCB_EnableDCache+0x7c>)
 8000cee:	695b      	ldr	r3, [r3, #20]
 8000cf0:	4a06      	ldr	r2, [pc, #24]	; (8000d0c <SCB_EnableDCache+0x7c>)
 8000cf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cf6:	6153      	str	r3, [r2, #20]
 8000cf8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000cfc:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000d14:	f7ff ff9c 	bl	8000c50 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000d18:	f7ff ffba 	bl	8000c90 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 faf0 	bl	8001300 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f810 	bl	8000d44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f7ff fc64 	bl	80005f0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d28:	f000 fa4c 	bl	80011c4 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000d2c:	f000 f8dc 	bl	8000ee8 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000d30:	f000 f9d2 	bl	80010d8 <MX_TIM1_Init>
  MX_RNG_Init();
 8000d34:	f000 f8a4 	bl	8000e80 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  GUI_init();
 8000d38:	f7ff fd8c 	bl	8000854 <GUI_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  first_page();
 8000d3c:	f7ff fda6 	bl	800088c <first_page>
 8000d40:	e7fc      	b.n	8000d3c <main+0x2c>
	...

08000d44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b0b8      	sub	sp, #224	; 0xe0
 8000d48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d4e:	2234      	movs	r2, #52	; 0x34
 8000d50:	2100      	movs	r1, #0
 8000d52:	4618      	mov	r0, r3
 8000d54:	f004 f8d0 	bl	8004ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d68:	f107 0308 	add.w	r3, r7, #8
 8000d6c:	2290      	movs	r2, #144	; 0x90
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4618      	mov	r0, r3
 8000d72:	f004 f8c1 	bl	8004ef8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d76:	f000 fe13 	bl	80019a0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	; (8000e64 <SystemClock_Config+0x120>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a39      	ldr	r2, [pc, #228]	; (8000e64 <SystemClock_Config+0x120>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b37      	ldr	r3, [pc, #220]	; (8000e64 <SystemClock_Config+0x120>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d92:	4b35      	ldr	r3, [pc, #212]	; (8000e68 <SystemClock_Config+0x124>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a34      	ldr	r2, [pc, #208]	; (8000e68 <SystemClock_Config+0x124>)
 8000d98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <SystemClock_Config+0x124>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da6:	603b      	str	r3, [r7, #0]
 8000da8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000daa:	2301      	movs	r3, #1
 8000dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000db0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000dcc:	23c8      	movs	r3, #200	; 0xc8
 8000dce:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000dd8:	2309      	movs	r3, #9
 8000dda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000de2:	4618      	mov	r0, r3
 8000de4:	f000 fe3c 	bl	8001a60 <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dee:	f000 f83f 	bl	8000e70 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000df2:	f000 fde5 	bl	80019c0 <HAL_PWREx_EnableOverDrive>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000dfc:	f000 f838 	bl	8000e70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e00:	230f      	movs	r3, #15
 8000e02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e06:	2302      	movs	r3, #2
 8000e08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000e22:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e26:	2106      	movs	r1, #6
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f001 f8c7 	bl	8001fbc <HAL_RCC_ClockConfig>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000e34:	f000 f81c 	bl	8000e70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <SystemClock_Config+0x128>)
 8000e3a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f001 faae 	bl	80023ac <HAL_RCCEx_PeriphCLKConfig>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <SystemClock_Config+0x116>
  {
    Error_Handler();
 8000e56:	f000 f80b 	bl	8000e70 <Error_Handler>
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	37e0      	adds	r7, #224	; 0xe0
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000
 8000e6c:	00200100 	.word	0x00200100

08000e70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
	...

08000e80 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <MX_RNG_Init+0x20>)
 8000e86:	4a07      	ldr	r2, [pc, #28]	; (8000ea4 <MX_RNG_Init+0x24>)
 8000e88:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e8a:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_RNG_Init+0x20>)
 8000e8c:	f001 feb4 	bl	8002bf8 <HAL_RNG_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e96:	f7ff ffeb 	bl	8000e70 <Error_Handler>
  }

}
 8000e9a:	bf00      	nop
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20000214 	.word	0x20000214
 8000ea4:	50060800 	.word	0x50060800

08000ea8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <HAL_RNG_MspInit+0x38>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_RNG_MspInit+0x3c>)
 8000ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ebe:	4a09      	ldr	r2, [pc, #36]	; (8000ee4 <HAL_RNG_MspInit+0x3c>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec4:	6353      	str	r3, [r2, #52]	; 0x34
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <HAL_RNG_MspInit+0x3c>)
 8000ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	50060800 	.word	0x50060800
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000eee:	4a1c      	ldr	r2, [pc, #112]	; (8000f60 <MX_SPI5_Init+0x78>)
 8000ef0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000ef4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ef8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000efa:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f00:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f02:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000f06:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000f14:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f1a:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f22:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f36:	2207      	movs	r2, #7
 8000f38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000f46:	4805      	ldr	r0, [pc, #20]	; (8000f5c <MX_SPI5_Init+0x74>)
 8000f48:	f001 fe80 	bl	8002c4c <HAL_SPI_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8000f52:	f7ff ff8d 	bl	8000e70 <Error_Handler>
  }

}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	20000224 	.word	0x20000224
 8000f60:	40015000 	.word	0x40015000

08000f64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	; 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <HAL_SPI_MspInit+0x7c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d128      	bne.n	8000fd8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f86:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_SPI_MspInit+0x80>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a16      	ldr	r2, [pc, #88]	; (8000fe4 <HAL_SPI_MspInit+0x80>)
 8000f8c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_SPI_MspInit+0x80>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_SPI_MspInit+0x80>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a10      	ldr	r2, [pc, #64]	; (8000fe4 <HAL_SPI_MspInit+0x80>)
 8000fa4:	f043 0320 	orr.w	r3, r3, #32
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <HAL_SPI_MspInit+0x80>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0320 	and.w	r3, r3, #32
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000fb6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000fc8:	2305      	movs	r3, #5
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_SPI_MspInit+0x84>)
 8000fd4:	f000 fb08 	bl	80015e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40015000 	.word	0x40015000
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40021400 	.word	0x40021400

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x44>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_MspInit+0x44>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x44>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x44>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x44>)
 8001010:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x44>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800

08001034 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001038:	f000 f9ae 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	bd80      	pop	{r7, pc}

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	; (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	; (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f003 ff18 	bl	8004ea4 <__errno>
 8001074:	4602      	mov	r2, r0
 8001076:	230c      	movs	r3, #12
 8001078:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	; (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <_sbrk+0x64>)
 8001090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20080000 	.word	0x20080000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	200001fc 	.word	0x200001fc
 80010a8:	20000350 	.word	0x20000350

080010ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <SystemInit+0x28>)
 80010b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SystemInit+0x28>)
 80010b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <SystemInit+0x28>)
 80010c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010c6:	609a      	str	r2, [r3, #8]
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0310 	add.w	r3, r7, #16
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]

  htim1.Instance = TIM1;
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <MX_TIM1_Init+0xa4>)
 80010f8:	4a21      	ldr	r2, [pc, #132]	; (8001180 <MX_TIM1_Init+0xa8>)
 80010fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <MX_TIM1_Init+0xa4>)
 80010fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001102:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <MX_TIM1_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_TIM1_Init+0xa4>)
 800110c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001110:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM1_Init+0xa4>)
 8001114:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001118:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800111a:	4b18      	ldr	r3, [pc, #96]	; (800117c <MX_TIM1_Init+0xa4>)
 800111c:	2200      	movs	r2, #0
 800111e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001120:	4b16      	ldr	r3, [pc, #88]	; (800117c <MX_TIM1_Init+0xa4>)
 8001122:	2200      	movs	r2, #0
 8001124:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001126:	4815      	ldr	r0, [pc, #84]	; (800117c <MX_TIM1_Init+0xa4>)
 8001128:	f002 f8a5 	bl	8003276 <HAL_TIM_Base_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8001132:	f7ff fe9d 	bl	8000e70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001136:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4619      	mov	r1, r3
 8001142:	480e      	ldr	r0, [pc, #56]	; (800117c <MX_TIM1_Init+0xa4>)
 8001144:	f002 f8c2 	bl	80032cc <HAL_TIM_ConfigClockSource>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800114e:	f7ff fe8f 	bl	8000e70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM1_Init+0xa4>)
 8001164:	f002 faa6 	bl	80036b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800116e:	f7ff fe7f 	bl	8000e70 <Error_Handler>
  }

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000288 	.word	0x20000288
 8001180:	40010000 	.word	0x40010000

08001184 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0a      	ldr	r2, [pc, #40]	; (80011bc <HAL_TIM_Base_MspInit+0x38>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d10b      	bne.n	80011ae <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	4a09      	ldr	r2, [pc, #36]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6453      	str	r3, [r2, #68]	; 0x44
 80011a2:	4b07      	ldr	r3, [pc, #28]	; (80011c0 <HAL_TIM_Base_MspInit+0x3c>)
 80011a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011ae:	bf00      	nop
 80011b0:	3714      	adds	r7, #20
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop
 80011bc:	40010000 	.word	0x40010000
 80011c0:	40023800 	.word	0x40023800

080011c4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011ca:	4a15      	ldr	r2, [pc, #84]	; (8001220 <MX_USART3_UART_Init+0x5c>)
 80011cc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ce:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011d4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e8:	4b0c      	ldr	r3, [pc, #48]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011ea:	220c      	movs	r2, #12
 80011ec:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ee:	4b0b      	ldr	r3, [pc, #44]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f4:	4b09      	ldr	r3, [pc, #36]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <MX_USART3_UART_Init+0x58>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001200:	4b06      	ldr	r3, [pc, #24]	; (800121c <MX_USART3_UART_Init+0x58>)
 8001202:	2200      	movs	r2, #0
 8001204:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_USART3_UART_Init+0x58>)
 8001208:	f002 fae2 	bl	80037d0 <HAL_UART_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001212:	f7ff fe2d 	bl	8000e70 <Error_Handler>
  }

}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200002c8 	.word	0x200002c8
 8001220:	40004800 	.word	0x40004800

08001224 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08a      	sub	sp, #40	; 0x28
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 0314 	add.w	r3, r7, #20
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a17      	ldr	r2, [pc, #92]	; (80012a0 <HAL_UART_MspInit+0x7c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d128      	bne.n	8001298 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a16      	ldr	r2, [pc, #88]	; (80012a4 <HAL_UART_MspInit+0x80>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <HAL_UART_MspInit+0x80>)
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <HAL_UART_MspInit+0x80>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0308 	and.w	r3, r3, #8
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001276:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127c:	2302      	movs	r3, #2
 800127e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001284:	2303      	movs	r3, #3
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001288:	2307      	movs	r3, #7
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800128c:	f107 0314 	add.w	r3, r7, #20
 8001290:	4619      	mov	r1, r3
 8001292:	4805      	ldr	r0, [pc, #20]	; (80012a8 <HAL_UART_MspInit+0x84>)
 8001294:	f000 f9a8 	bl	80015e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001298:	bf00      	nop
 800129a:	3728      	adds	r7, #40	; 0x28
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	40004800 	.word	0x40004800
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020c00 	.word	0x40020c00

080012ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012b2:	e003      	b.n	80012bc <LoopCopyDataInit>

080012b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ba:	3104      	adds	r1, #4

080012bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012bc:	480b      	ldr	r0, [pc, #44]	; (80012ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012be:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012c4:	d3f6      	bcc.n	80012b4 <CopyDataInit>
  ldr  r2, =_sbss
 80012c6:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012c8:	e002      	b.n	80012d0 <LoopFillZerobss>

080012ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012cc:	f842 3b04 	str.w	r3, [r2], #4

080012d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012d0:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012d4:	d3f9      	bcc.n	80012ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012d6:	f7ff fee9 	bl	80010ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012da:	f003 fde9 	bl	8004eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012de:	f7ff fd17 	bl	8000d10 <main>
  bx  lr    
 80012e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 80012e8:	08008d30 	.word	0x08008d30
  ldr  r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012f0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80012f4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80012f8:	20000350 	.word	0x20000350

080012fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012fc:	e7fe      	b.n	80012fc <ADC_IRQHandler>
	...

08001300 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_Init+0x34>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <HAL_Init+0x34>)
 800130a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800130e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <HAL_Init+0x34>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a07      	ldr	r2, [pc, #28]	; (8001334 <HAL_Init+0x34>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800131c:	2003      	movs	r0, #3
 800131e:	f000 f92f 	bl	8001580 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001322:	2000      	movs	r0, #0
 8001324:	f000 f808 	bl	8001338 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001328:	f7ff fe60 	bl	8000fec <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023c00 	.word	0x40023c00

08001338 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001340:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_InitTick+0x54>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4b12      	ldr	r3, [pc, #72]	; (8001390 <HAL_InitTick+0x58>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	4619      	mov	r1, r3
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001352:	fbb2 f3f3 	udiv	r3, r2, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f939 	bl	80015ce <HAL_SYSTICK_Config>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e00e      	b.n	8001384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b0f      	cmp	r3, #15
 800136a:	d80a      	bhi.n	8001382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800136c:	2200      	movs	r2, #0
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001374:	f000 f90f 	bl	8001596 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001378:	4a06      	ldr	r2, [pc, #24]	; (8001394 <HAL_InitTick+0x5c>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137e:	2300      	movs	r3, #0
 8001380:	e000      	b.n	8001384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000000 	.word	0x20000000
 8001390:	20000008 	.word	0x20000008
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <HAL_IncTick+0x20>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <HAL_IncTick+0x24>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a04      	ldr	r2, [pc, #16]	; (80013bc <HAL_IncTick+0x24>)
 80013aa:	6013      	str	r3, [r2, #0]
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008
 80013bc:	20000348 	.word	0x20000348

080013c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  return uwTick;
 80013c4:	4b03      	ldr	r3, [pc, #12]	; (80013d4 <HAL_GetTick+0x14>)
 80013c6:	681b      	ldr	r3, [r3, #0]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000348 	.word	0x20000348

080013d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013e0:	f7ff ffee 	bl	80013c0 <HAL_GetTick>
 80013e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013f0:	d005      	beq.n	80013fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013f2:	4b09      	ldr	r3, [pc, #36]	; (8001418 <HAL_Delay+0x40>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	461a      	mov	r2, r3
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	4413      	add	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fe:	bf00      	nop
 8001400:	f7ff ffde 	bl	80013c0 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	429a      	cmp	r2, r3
 800140e:	d8f7      	bhi.n	8001400 <HAL_Delay+0x28>
  {
  }
}
 8001410:	bf00      	nop
 8001412:	3710      	adds	r7, #16
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20000008 	.word	0x20000008

0800141c <__NVIC_SetPriorityGrouping>:
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <__NVIC_SetPriorityGrouping+0x40>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001446:	4313      	orrs	r3, r2
 8001448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144a:	4a04      	ldr	r2, [pc, #16]	; (800145c <__NVIC_SetPriorityGrouping+0x40>)
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	60d3      	str	r3, [r2, #12]
}
 8001450:	bf00      	nop
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000ed00 	.word	0xe000ed00
 8001460:	05fa0000 	.word	0x05fa0000

08001464 <__NVIC_GetPriorityGrouping>:
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_SetPriority>:
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	6039      	str	r1, [r7, #0]
 800148a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	2b00      	cmp	r3, #0
 8001492:	db0a      	blt.n	80014aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	b2da      	uxtb	r2, r3
 8001498:	490c      	ldr	r1, [pc, #48]	; (80014cc <__NVIC_SetPriority+0x4c>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	0112      	lsls	r2, r2, #4
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	440b      	add	r3, r1
 80014a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014a8:	e00a      	b.n	80014c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <__NVIC_SetPriority+0x50>)
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	f003 030f 	and.w	r3, r3, #15
 80014b6:	3b04      	subs	r3, #4
 80014b8:	0112      	lsls	r2, r2, #4
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	440b      	add	r3, r1
 80014be:	761a      	strb	r2, [r3, #24]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000e100 	.word	0xe000e100
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <NVIC_EncodePriority>:
{
 80014d4:	b480      	push	{r7}
 80014d6:	b089      	sub	sp, #36	; 0x24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f1c3 0307 	rsb	r3, r3, #7
 80014ee:	2b04      	cmp	r3, #4
 80014f0:	bf28      	it	cs
 80014f2:	2304      	movcs	r3, #4
 80014f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	3304      	adds	r3, #4
 80014fa:	2b06      	cmp	r3, #6
 80014fc:	d902      	bls.n	8001504 <NVIC_EncodePriority+0x30>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3b03      	subs	r3, #3
 8001502:	e000      	b.n	8001506 <NVIC_EncodePriority+0x32>
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	401a      	ands	r2, r3
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800151c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	fa01 f303 	lsl.w	r3, r1, r3
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	4313      	orrs	r3, r2
}
 800152e:	4618      	mov	r0, r3
 8001530:	3724      	adds	r7, #36	; 0x24
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3b01      	subs	r3, #1
 8001548:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800154c:	d301      	bcc.n	8001552 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800154e:	2301      	movs	r3, #1
 8001550:	e00f      	b.n	8001572 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <SysTick_Config+0x40>)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3b01      	subs	r3, #1
 8001558:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155a:	210f      	movs	r1, #15
 800155c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001560:	f7ff ff8e 	bl	8001480 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <SysTick_Config+0x40>)
 8001566:	2200      	movs	r2, #0
 8001568:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <SysTick_Config+0x40>)
 800156c:	2207      	movs	r2, #7
 800156e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	e000e010 	.word	0xe000e010

08001580 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ff47 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001596:	b580      	push	{r7, lr}
 8001598:	b086      	sub	sp, #24
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	60b9      	str	r1, [r7, #8]
 80015a0:	607a      	str	r2, [r7, #4]
 80015a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015a8:	f7ff ff5c 	bl	8001464 <__NVIC_GetPriorityGrouping>
 80015ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	68b9      	ldr	r1, [r7, #8]
 80015b2:	6978      	ldr	r0, [r7, #20]
 80015b4:	f7ff ff8e 	bl	80014d4 <NVIC_EncodePriority>
 80015b8:	4602      	mov	r2, r0
 80015ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015be:	4611      	mov	r1, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff5d 	bl	8001480 <__NVIC_SetPriority>
}
 80015c6:	bf00      	nop
 80015c8:	3718      	adds	r7, #24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffb0 	bl	800153c <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
	...

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80015f6:	2300      	movs	r3, #0
 80015f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	e175      	b.n	80018f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001608:	2201      	movs	r2, #1
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4013      	ands	r3, r2
 800161a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	429a      	cmp	r2, r3
 8001622:	f040 8164 	bne.w	80018ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d00b      	beq.n	8001646 <HAL_GPIO_Init+0x5e>
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d007      	beq.n	8001646 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800163a:	2b11      	cmp	r3, #17
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b12      	cmp	r3, #18
 8001644:	d130      	bne.n	80016a8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	4313      	orrs	r3, r2
 800166e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800167c:	2201      	movs	r2, #1
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 0201 	and.w	r2, r3, #1
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4313      	orrs	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x100>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b12      	cmp	r3, #18
 80016e6:	d123      	bne.n	8001730 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	08da      	lsrs	r2, r3, #3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3208      	adds	r2, #8
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	220f      	movs	r2, #15
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	691a      	ldr	r2, [r3, #16]
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001722:	69fb      	ldr	r3, [r7, #28]
 8001724:	08da      	lsrs	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3208      	adds	r2, #8
 800172a:	69b9      	ldr	r1, [r7, #24]
 800172c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0203 	and.w	r2, r3, #3
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 80be 	beq.w	80018ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <HAL_GPIO_Init+0x320>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	4a64      	ldr	r2, [pc, #400]	; (8001908 <HAL_GPIO_Init+0x320>)
 8001778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177c:	6453      	str	r3, [r2, #68]	; 0x44
 800177e:	4b62      	ldr	r3, [pc, #392]	; (8001908 <HAL_GPIO_Init+0x320>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800178a:	4a60      	ldr	r2, [pc, #384]	; (800190c <HAL_GPIO_Init+0x324>)
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	089b      	lsrs	r3, r3, #2
 8001790:	3302      	adds	r3, #2
 8001792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001796:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	f003 0303 	and.w	r3, r3, #3
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	220f      	movs	r2, #15
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4a57      	ldr	r2, [pc, #348]	; (8001910 <HAL_GPIO_Init+0x328>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d037      	beq.n	8001826 <HAL_GPIO_Init+0x23e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a56      	ldr	r2, [pc, #344]	; (8001914 <HAL_GPIO_Init+0x32c>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d031      	beq.n	8001822 <HAL_GPIO_Init+0x23a>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a55      	ldr	r2, [pc, #340]	; (8001918 <HAL_GPIO_Init+0x330>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d02b      	beq.n	800181e <HAL_GPIO_Init+0x236>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4a54      	ldr	r2, [pc, #336]	; (800191c <HAL_GPIO_Init+0x334>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d025      	beq.n	800181a <HAL_GPIO_Init+0x232>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4a53      	ldr	r2, [pc, #332]	; (8001920 <HAL_GPIO_Init+0x338>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d01f      	beq.n	8001816 <HAL_GPIO_Init+0x22e>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a52      	ldr	r2, [pc, #328]	; (8001924 <HAL_GPIO_Init+0x33c>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x22a>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a51      	ldr	r2, [pc, #324]	; (8001928 <HAL_GPIO_Init+0x340>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x226>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a50      	ldr	r2, [pc, #320]	; (800192c <HAL_GPIO_Init+0x344>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x222>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a4f      	ldr	r2, [pc, #316]	; (8001930 <HAL_GPIO_Init+0x348>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x21e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <HAL_GPIO_Init+0x34c>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x21a>
 80017fe:	2309      	movs	r3, #9
 8001800:	e012      	b.n	8001828 <HAL_GPIO_Init+0x240>
 8001802:	230a      	movs	r3, #10
 8001804:	e010      	b.n	8001828 <HAL_GPIO_Init+0x240>
 8001806:	2308      	movs	r3, #8
 8001808:	e00e      	b.n	8001828 <HAL_GPIO_Init+0x240>
 800180a:	2307      	movs	r3, #7
 800180c:	e00c      	b.n	8001828 <HAL_GPIO_Init+0x240>
 800180e:	2306      	movs	r3, #6
 8001810:	e00a      	b.n	8001828 <HAL_GPIO_Init+0x240>
 8001812:	2305      	movs	r3, #5
 8001814:	e008      	b.n	8001828 <HAL_GPIO_Init+0x240>
 8001816:	2304      	movs	r3, #4
 8001818:	e006      	b.n	8001828 <HAL_GPIO_Init+0x240>
 800181a:	2303      	movs	r3, #3
 800181c:	e004      	b.n	8001828 <HAL_GPIO_Init+0x240>
 800181e:	2302      	movs	r3, #2
 8001820:	e002      	b.n	8001828 <HAL_GPIO_Init+0x240>
 8001822:	2301      	movs	r3, #1
 8001824:	e000      	b.n	8001828 <HAL_GPIO_Init+0x240>
 8001826:	2300      	movs	r3, #0
 8001828:	69fa      	ldr	r2, [r7, #28]
 800182a:	f002 0203 	and.w	r2, r2, #3
 800182e:	0092      	lsls	r2, r2, #2
 8001830:	4093      	lsls	r3, r2
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4313      	orrs	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001838:	4934      	ldr	r1, [pc, #208]	; (800190c <HAL_GPIO_Init+0x324>)
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	089b      	lsrs	r3, r3, #2
 800183e:	3302      	adds	r3, #2
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001846:	4b3c      	ldr	r3, [pc, #240]	; (8001938 <HAL_GPIO_Init+0x350>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800186a:	4a33      	ldr	r2, [pc, #204]	; (8001938 <HAL_GPIO_Init+0x350>)
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001870:	4b31      	ldr	r3, [pc, #196]	; (8001938 <HAL_GPIO_Init+0x350>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d003      	beq.n	8001894 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001894:	4a28      	ldr	r2, [pc, #160]	; (8001938 <HAL_GPIO_Init+0x350>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189a:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_GPIO_Init+0x350>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	4013      	ands	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <HAL_GPIO_Init+0x350>)
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c4:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <HAL_GPIO_Init+0x350>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4013      	ands	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018e8:	4a13      	ldr	r2, [pc, #76]	; (8001938 <HAL_GPIO_Init+0x350>)
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	3301      	adds	r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	2b0f      	cmp	r3, #15
 80018f8:	f67f ae86 	bls.w	8001608 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80018fc:	bf00      	nop
 80018fe:	3724      	adds	r7, #36	; 0x24
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40023800 	.word	0x40023800
 800190c:	40013800 	.word	0x40013800
 8001910:	40020000 	.word	0x40020000
 8001914:	40020400 	.word	0x40020400
 8001918:	40020800 	.word	0x40020800
 800191c:	40020c00 	.word	0x40020c00
 8001920:	40021000 	.word	0x40021000
 8001924:	40021400 	.word	0x40021400
 8001928:	40021800 	.word	0x40021800
 800192c:	40021c00 	.word	0x40021c00
 8001930:	40022000 	.word	0x40022000
 8001934:	40022400 	.word	0x40022400
 8001938:	40013c00 	.word	0x40013c00

0800193c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800193c:	b480      	push	{r7}
 800193e:	b085      	sub	sp, #20
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	460b      	mov	r3, r1
 8001946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	887b      	ldrh	r3, [r7, #2]
 800194e:	4013      	ands	r3, r2
 8001950:	2b00      	cmp	r3, #0
 8001952:	d002      	beq.n	800195a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001954:	2301      	movs	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	e001      	b.n	800195e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3714      	adds	r7, #20
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001988:	e003      	b.n	8001992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	041a      	lsls	r2, r3, #16
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	619a      	str	r2, [r3, #24]
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000

080019c0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a22      	ldr	r2, [pc, #136]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_PWREx_EnableOverDrive+0x98>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a1d      	ldr	r2, [pc, #116]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 80019e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ec:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80019ee:	f7ff fce7 	bl	80013c0 <HAL_GetTick>
 80019f2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80019f4:	e009      	b.n	8001a0a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80019f6:	f7ff fce3 	bl	80013c0 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a04:	d901      	bls.n	8001a0a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e022      	b.n	8001a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d1ee      	bne.n	80019f6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a22:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a24:	f7ff fccc 	bl	80013c0 <HAL_GetTick>
 8001a28:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a2a:	e009      	b.n	8001a40 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a2c:	f7ff fcc8 	bl	80013c0 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001a3a:	d901      	bls.n	8001a40 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001a3c:	2303      	movs	r3, #3
 8001a3e:	e007      	b.n	8001a50 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001a4c:	d1ee      	bne.n	8001a2c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40023800 	.word	0x40023800
 8001a5c:	40007000 	.word	0x40007000

08001a60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e29b      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0301 	and.w	r3, r3, #1
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 8087 	beq.w	8001b92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a84:	4b96      	ldr	r3, [pc, #600]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f003 030c 	and.w	r3, r3, #12
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	d00c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a90:	4b93      	ldr	r3, [pc, #588]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b08      	cmp	r3, #8
 8001a9a:	d112      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x62>
 8001a9c:	4b90      	ldr	r3, [pc, #576]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aaa:	4b8d      	ldr	r3, [pc, #564]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d06c      	beq.n	8001b90 <HAL_RCC_OscConfig+0x130>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d168      	bne.n	8001b90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e275      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x7a>
 8001acc:	4b84      	ldr	r3, [pc, #528]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a83      	ldr	r2, [pc, #524]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad6:	6013      	str	r3, [r2, #0]
 8001ad8:	e02e      	b.n	8001b38 <HAL_RCC_OscConfig+0xd8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10c      	bne.n	8001afc <HAL_RCC_OscConfig+0x9c>
 8001ae2:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a7e      	ldr	r2, [pc, #504]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aec:	6013      	str	r3, [r2, #0]
 8001aee:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a7b      	ldr	r2, [pc, #492]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001af4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	e01d      	b.n	8001b38 <HAL_RCC_OscConfig+0xd8>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b04:	d10c      	bne.n	8001b20 <HAL_RCC_OscConfig+0xc0>
 8001b06:	4b76      	ldr	r3, [pc, #472]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a75      	ldr	r2, [pc, #468]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a72      	ldr	r2, [pc, #456]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e00b      	b.n	8001b38 <HAL_RCC_OscConfig+0xd8>
 8001b20:	4b6f      	ldr	r3, [pc, #444]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a6e      	ldr	r2, [pc, #440]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a6b      	ldr	r2, [pc, #428]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d013      	beq.n	8001b68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b40:	f7ff fc3e 	bl	80013c0 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b48:	f7ff fc3a 	bl	80013c0 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b64      	cmp	r3, #100	; 0x64
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e229      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	4b61      	ldr	r3, [pc, #388]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0xe8>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fc2a 	bl	80013c0 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fc26 	bl	80013c0 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	; 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e215      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x110>
 8001b8e:	e000      	b.n	8001b92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d069      	beq.n	8001c72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9e:	4b50      	ldr	r3, [pc, #320]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 030c 	and.w	r3, r3, #12
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001baa:	4b4d      	ldr	r3, [pc, #308]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b08      	cmp	r3, #8
 8001bb4:	d11c      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x190>
 8001bb6:	4b4a      	ldr	r3, [pc, #296]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d116      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc2:	4b47      	ldr	r3, [pc, #284]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d005      	beq.n	8001bda <HAL_RCC_OscConfig+0x17a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e1e9      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	493d      	ldr	r1, [pc, #244]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bee:	e040      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf8:	4b39      	ldr	r3, [pc, #228]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a38      	ldr	r2, [pc, #224]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c04:	f7ff fbdc 	bl	80013c0 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0c:	f7ff fbd8 	bl	80013c0 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1c7      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1e:	4b30      	ldr	r3, [pc, #192]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c2a:	4b2d      	ldr	r3, [pc, #180]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	691b      	ldr	r3, [r3, #16]
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4929      	ldr	r1, [pc, #164]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	600b      	str	r3, [r1, #0]
 8001c3e:	e018      	b.n	8001c72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a26      	ldr	r2, [pc, #152]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c46:	f023 0301 	bic.w	r3, r3, #1
 8001c4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fbb8 	bl	80013c0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c54:	f7ff fbb4 	bl	80013c0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e1a3      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c66:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0308 	and.w	r3, r3, #8
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d038      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d019      	beq.n	8001cba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8a:	4a15      	ldr	r2, [pc, #84]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff fb95 	bl	80013c0 <HAL_GetTick>
 8001c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9a:	f7ff fb91 	bl	80013c0 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e180      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001cae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f0      	beq.n	8001c9a <HAL_RCC_OscConfig+0x23a>
 8001cb8:	e01a      	b.n	8001cf0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001cbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_RCC_OscConfig+0x280>)
 8001cc0:	f023 0301 	bic.w	r3, r3, #1
 8001cc4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb7b 	bl	80013c0 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cce:	f7ff fb77 	bl	80013c0 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d903      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e166      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
 8001ce0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce4:	4b92      	ldr	r3, [pc, #584]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ce6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1ee      	bne.n	8001cce <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80a4 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b8c      	ldr	r3, [pc, #560]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b89      	ldr	r3, [pc, #548]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a88      	ldr	r2, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b86      	ldr	r3, [pc, #536]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d32:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7f      	ldr	r2, [pc, #508]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fb3f 	bl	80013c0 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fb3b 	bl	80013c0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e12a      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d58:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x4d4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x31a>
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d70:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6713      	str	r3, [r2, #112]	; 0x70
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x33c>
 8001d82:	4b6b      	ldr	r3, [pc, #428]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a6a      	ldr	r2, [pc, #424]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	4b68      	ldr	r3, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d92:	4a67      	ldr	r2, [pc, #412]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x35e>
 8001da4:	4b62      	ldr	r3, [pc, #392]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a61      	ldr	r2, [pc, #388]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	4b5f      	ldr	r3, [pc, #380]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db4:	4a5e      	ldr	r2, [pc, #376]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6713      	str	r3, [r2, #112]	; 0x70
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x376>
 8001dbe:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc2:	4a5b      	ldr	r2, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dca:	4b59      	ldr	r3, [pc, #356]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dce:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dde:	f7ff faef 	bl	80013c0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff faeb 	bl	80013c0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0d8      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b4c      	ldr	r3, [pc, #304]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x386>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fad9 	bl	80013c0 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fad5 	bl	80013c0 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0c2      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a3c      	ldr	r2, [pc, #240]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 80ae 	beq.w	8001fac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d06d      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d14b      	bne.n	8001efc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a31      	ldr	r2, [pc, #196]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff faa6 	bl	80013c0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff faa2 	bl	80013c0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e091      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69da      	ldr	r2, [r3, #28]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a1b      	ldr	r3, [r3, #32]
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea4:	019b      	lsls	r3, r3, #6
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	041b      	lsls	r3, r3, #16
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	061b      	lsls	r3, r3, #24
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec0:	071b      	lsls	r3, r3, #28
 8001ec2:	491b      	ldr	r1, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a18      	ldr	r2, [pc, #96]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7ff fa74 	bl	80013c0 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7ff fa70 	bl	80013c0 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e05f      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x47c>
 8001efa:	e057      	b.n	8001fac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fa5a 	bl	80013c0 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff fa56 	bl	80013c0 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e045      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f22:	4b03      	ldr	r3, [pc, #12]	; (8001f30 <HAL_RCC_OscConfig+0x4d0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x4b0>
 8001f2e:	e03d      	b.n	8001fac <HAL_RCC_OscConfig+0x54c>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f38:	4b1f      	ldr	r3, [pc, #124]	; (8001fb8 <HAL_RCC_OscConfig+0x558>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d030      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d129      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d122      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f68:	4013      	ands	r3, r2
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d119      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7e:	085b      	lsrs	r3, r3, #1
 8001f80:	3b01      	subs	r3, #1
 8001f82:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10f      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f92:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	40023800 	.word	0x40023800

08001fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d101      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e0d0      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b6a      	ldr	r3, [pc, #424]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d910      	bls.n	8002004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b67      	ldr	r3, [pc, #412]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020f 	bic.w	r2, r3, #15
 8001fea:	4965      	ldr	r1, [pc, #404]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b63      	ldr	r3, [pc, #396]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d001      	beq.n	8002004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0b8      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d020      	beq.n	8002052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800201c:	4b59      	ldr	r3, [pc, #356]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	4a58      	ldr	r2, [pc, #352]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0308 	and.w	r3, r3, #8
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002034:	4b53      	ldr	r3, [pc, #332]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	4a52      	ldr	r2, [pc, #328]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800203a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800203e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002040:	4b50      	ldr	r3, [pc, #320]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	494d      	ldr	r1, [pc, #308]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800204e:	4313      	orrs	r3, r2
 8002050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d040      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b01      	cmp	r3, #1
 8002064:	d107      	bne.n	8002076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002066:	4b47      	ldr	r3, [pc, #284]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d115      	bne.n	800209e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e07f      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b02      	cmp	r3, #2
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	4b41      	ldr	r3, [pc, #260]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d109      	bne.n	800209e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e073      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208e:	4b3d      	ldr	r3, [pc, #244]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06b      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f023 0203 	bic.w	r2, r3, #3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	4936      	ldr	r1, [pc, #216]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 80020ac:	4313      	orrs	r3, r2
 80020ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020b0:	f7ff f986 	bl	80013c0 <HAL_GetTick>
 80020b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b6:	e00a      	b.n	80020ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b8:	f7ff f982 	bl	80013c0 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e053      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	4b2d      	ldr	r3, [pc, #180]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f003 020c 	and.w	r2, r3, #12
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	429a      	cmp	r2, r3
 80020de:	d1eb      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	683a      	ldr	r2, [r7, #0]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d210      	bcs.n	8002110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ee:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f023 020f 	bic.w	r2, r3, #15
 80020f6:	4922      	ldr	r1, [pc, #136]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fe:	4b20      	ldr	r3, [pc, #128]	; (8002180 <HAL_RCC_ClockConfig+0x1c4>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	429a      	cmp	r2, r3
 800210a:	d001      	beq.n	8002110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e032      	b.n	8002176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0304 	and.w	r3, r3, #4
 8002118:	2b00      	cmp	r3, #0
 800211a:	d008      	beq.n	800212e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	4916      	ldr	r1, [pc, #88]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800212a:	4313      	orrs	r3, r2
 800212c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800213a:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	490e      	ldr	r1, [pc, #56]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 800214a:	4313      	orrs	r3, r2
 800214c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214e:	f000 f821 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8002152:	4601      	mov	r1, r0
 8002154:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <HAL_RCC_ClockConfig+0x1c8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <HAL_RCC_ClockConfig+0x1cc>)
 8002160:	5cd3      	ldrb	r3, [r2, r3]
 8002162:	fa21 f303 	lsr.w	r3, r1, r3
 8002166:	4a09      	ldr	r2, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1d0>)
 8002168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_RCC_ClockConfig+0x1d4>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff f8e2 	bl	8001338 <HAL_InitTick>

  return HAL_OK;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40023c00 	.word	0x40023c00
 8002184:	40023800 	.word	0x40023800
 8002188:	08008814 	.word	0x08008814
 800218c:	20000000 	.word	0x20000000
 8002190:	20000004 	.word	0x20000004

08002194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	2300      	movs	r3, #0
 80021a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021aa:	4b63      	ldr	r3, [pc, #396]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d007      	beq.n	80021c6 <HAL_RCC_GetSysClockFreq+0x32>
 80021b6:	2b08      	cmp	r3, #8
 80021b8:	d008      	beq.n	80021cc <HAL_RCC_GetSysClockFreq+0x38>
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f040 80b4 	bne.w	8002328 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c0:	4b5e      	ldr	r3, [pc, #376]	; (800233c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80021c2:	60bb      	str	r3, [r7, #8]
      break;
 80021c4:	e0b3      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c6:	4b5e      	ldr	r3, [pc, #376]	; (8002340 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80021c8:	60bb      	str	r3, [r7, #8]
      break;
 80021ca:	e0b0      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021cc:	4b5a      	ldr	r3, [pc, #360]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021d6:	4b58      	ldr	r3, [pc, #352]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d04a      	beq.n	8002278 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e2:	4b55      	ldr	r3, [pc, #340]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	099b      	lsrs	r3, r3, #6
 80021e8:	f04f 0400 	mov.w	r4, #0
 80021ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021f0:	f04f 0200 	mov.w	r2, #0
 80021f4:	ea03 0501 	and.w	r5, r3, r1
 80021f8:	ea04 0602 	and.w	r6, r4, r2
 80021fc:	4629      	mov	r1, r5
 80021fe:	4632      	mov	r2, r6
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	f04f 0400 	mov.w	r4, #0
 8002208:	0154      	lsls	r4, r2, #5
 800220a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800220e:	014b      	lsls	r3, r1, #5
 8002210:	4619      	mov	r1, r3
 8002212:	4622      	mov	r2, r4
 8002214:	1b49      	subs	r1, r1, r5
 8002216:	eb62 0206 	sbc.w	r2, r2, r6
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	0194      	lsls	r4, r2, #6
 8002224:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002228:	018b      	lsls	r3, r1, #6
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	eb64 0402 	sbc.w	r4, r4, r2
 8002230:	f04f 0100 	mov.w	r1, #0
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	00e2      	lsls	r2, r4, #3
 800223a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800223e:	00d9      	lsls	r1, r3, #3
 8002240:	460b      	mov	r3, r1
 8002242:	4614      	mov	r4, r2
 8002244:	195b      	adds	r3, r3, r5
 8002246:	eb44 0406 	adc.w	r4, r4, r6
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	0262      	lsls	r2, r4, #9
 8002254:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002258:	0259      	lsls	r1, r3, #9
 800225a:	460b      	mov	r3, r1
 800225c:	4614      	mov	r4, r2
 800225e:	4618      	mov	r0, r3
 8002260:	4621      	mov	r1, r4
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f04f 0400 	mov.w	r4, #0
 8002268:	461a      	mov	r2, r3
 800226a:	4623      	mov	r3, r4
 800226c:	f7fe f840 	bl	80002f0 <__aeabi_uldivmod>
 8002270:	4603      	mov	r3, r0
 8002272:	460c      	mov	r4, r1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e049      	b.n	800230c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	099b      	lsrs	r3, r3, #6
 800227e:	f04f 0400 	mov.w	r4, #0
 8002282:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	ea03 0501 	and.w	r5, r3, r1
 800228e:	ea04 0602 	and.w	r6, r4, r2
 8002292:	4629      	mov	r1, r5
 8002294:	4632      	mov	r2, r6
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	f04f 0400 	mov.w	r4, #0
 800229e:	0154      	lsls	r4, r2, #5
 80022a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022a4:	014b      	lsls	r3, r1, #5
 80022a6:	4619      	mov	r1, r3
 80022a8:	4622      	mov	r2, r4
 80022aa:	1b49      	subs	r1, r1, r5
 80022ac:	eb62 0206 	sbc.w	r2, r2, r6
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	0194      	lsls	r4, r2, #6
 80022ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022be:	018b      	lsls	r3, r1, #6
 80022c0:	1a5b      	subs	r3, r3, r1
 80022c2:	eb64 0402 	sbc.w	r4, r4, r2
 80022c6:	f04f 0100 	mov.w	r1, #0
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	00e2      	lsls	r2, r4, #3
 80022d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022d4:	00d9      	lsls	r1, r3, #3
 80022d6:	460b      	mov	r3, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	195b      	adds	r3, r3, r5
 80022dc:	eb44 0406 	adc.w	r4, r4, r6
 80022e0:	f04f 0100 	mov.w	r1, #0
 80022e4:	f04f 0200 	mov.w	r2, #0
 80022e8:	02a2      	lsls	r2, r4, #10
 80022ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022ee:	0299      	lsls	r1, r3, #10
 80022f0:	460b      	mov	r3, r1
 80022f2:	4614      	mov	r4, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	4621      	mov	r1, r4
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f04f 0400 	mov.w	r4, #0
 80022fe:	461a      	mov	r2, r3
 8002300:	4623      	mov	r3, r4
 8002302:	f7fd fff5 	bl	80002f0 <__aeabi_uldivmod>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	3301      	adds	r3, #1
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	60bb      	str	r3, [r7, #8]
      break;
 8002326:	e002      	b.n	800232e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002328:	4b04      	ldr	r3, [pc, #16]	; (800233c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800232a:	60bb      	str	r3, [r7, #8]
      break;
 800232c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800232e:	68bb      	ldr	r3, [r7, #8]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3714      	adds	r7, #20
 8002334:	46bd      	mov	sp, r7
 8002336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	00f42400 	.word	0x00f42400
 8002340:	007a1200 	.word	0x007a1200

08002344 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002348:	4b03      	ldr	r3, [pc, #12]	; (8002358 <HAL_RCC_GetHCLKFreq+0x14>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	20000000 	.word	0x20000000

0800235c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002360:	f7ff fff0 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 8002364:	4601      	mov	r1, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0a9b      	lsrs	r3, r3, #10
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	08008824 	.word	0x08008824

08002384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002388:	f7ff ffdc 	bl	8002344 <HAL_RCC_GetHCLKFreq>
 800238c:	4601      	mov	r1, r0
 800238e:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	0b5b      	lsrs	r3, r3, #13
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	4a03      	ldr	r2, [pc, #12]	; (80023a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08008824 	.word	0x08008824

080023ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b088      	sub	sp, #32
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023c4:	2300      	movs	r3, #0
 80023c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023d4:	4b69      	ldr	r3, [pc, #420]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	4a68      	ldr	r2, [pc, #416]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023de:	6093      	str	r3, [r2, #8]
 80023e0:	4b66      	ldr	r3, [pc, #408]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e8:	4964      	ldr	r1, [pc, #400]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d017      	beq.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002406:	4b5d      	ldr	r3, [pc, #372]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002408:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800240c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002414:	4959      	ldr	r1, [pc, #356]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002424:	d101      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002432:	2301      	movs	r3, #1
 8002434:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d017      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002442:	4b4e      	ldr	r3, [pc, #312]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002448:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002450:	494a      	ldr	r1, [pc, #296]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002460:	d101      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002462:	2301      	movs	r3, #1
 8002464:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800246e:	2301      	movs	r3, #1
 8002470:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800247e:	2301      	movs	r3, #1
 8002480:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0320 	and.w	r3, r3, #32
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 808b 	beq.w	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002490:	4b3a      	ldr	r3, [pc, #232]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002494:	4a39      	ldr	r2, [pc, #228]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800249a:	6413      	str	r3, [r2, #64]	; 0x40
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800249e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024a8:	4b35      	ldr	r3, [pc, #212]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a34      	ldr	r2, [pc, #208]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe ff84 	bl	80013c0 <HAL_GetTick>
 80024b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7fe ff80 	bl	80013c0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e38d      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ce:	4b2c      	ldr	r3, [pc, #176]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d035      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d02e      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002500:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002508:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800250c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800250e:	4b1b      	ldr	r3, [pc, #108]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002512:	4a1a      	ldr	r2, [pc, #104]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002514:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002518:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800251a:	4a18      	ldr	r2, [pc, #96]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d114      	bne.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe ff48 	bl	80013c0 <HAL_GetTick>
 8002530:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002532:	e00a      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002534:	f7fe ff44 	bl	80013c0 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e34f      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d0ee      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002562:	d111      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002570:	4b04      	ldr	r3, [pc, #16]	; (8002584 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002572:	400b      	ands	r3, r1
 8002574:	4901      	ldr	r1, [pc, #4]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002576:	4313      	orrs	r3, r2
 8002578:	608b      	str	r3, [r1, #8]
 800257a:	e00b      	b.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000
 8002584:	0ffffcff 	.word	0x0ffffcff
 8002588:	4bb3      	ldr	r3, [pc, #716]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4ab2      	ldr	r2, [pc, #712]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002592:	6093      	str	r3, [r2, #8]
 8002594:	4bb0      	ldr	r3, [pc, #704]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002596:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a0:	49ad      	ldr	r1, [pc, #692]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80025b2:	4ba9      	ldr	r3, [pc, #676]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025b8:	4aa7      	ldr	r2, [pc, #668]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025c2:	4ba5      	ldr	r3, [pc, #660]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025cc:	49a2      	ldr	r1, [pc, #648]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025e0:	4b9d      	ldr	r3, [pc, #628]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ee:	499a      	ldr	r1, [pc, #616]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f0:	4313      	orrs	r3, r2
 80025f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002602:	4b95      	ldr	r3, [pc, #596]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002608:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002610:	4991      	ldr	r1, [pc, #580]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002612:	4313      	orrs	r3, r2
 8002614:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00a      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002624:	4b8c      	ldr	r3, [pc, #560]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002632:	4989      	ldr	r1, [pc, #548]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002634:	4313      	orrs	r3, r2
 8002636:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002646:	4b84      	ldr	r3, [pc, #528]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4980      	ldr	r1, [pc, #512]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002668:	4b7b      	ldr	r3, [pc, #492]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800266a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266e:	f023 0203 	bic.w	r2, r3, #3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002676:	4978      	ldr	r1, [pc, #480]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800268a:	4b73      	ldr	r3, [pc, #460]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800268c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002690:	f023 020c 	bic.w	r2, r3, #12
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002698:	496f      	ldr	r1, [pc, #444]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80026ac:	4b6a      	ldr	r3, [pc, #424]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	4967      	ldr	r1, [pc, #412]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ce:	4b62      	ldr	r3, [pc, #392]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026dc:	495e      	ldr	r1, [pc, #376]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026f0:	4b59      	ldr	r3, [pc, #356]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	4956      	ldr	r1, [pc, #344]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002712:	4b51      	ldr	r3, [pc, #324]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	494d      	ldr	r1, [pc, #308]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002734:	4b48      	ldr	r3, [pc, #288]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002742:	4945      	ldr	r1, [pc, #276]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002756:	4b40      	ldr	r3, [pc, #256]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002764:	493c      	ldr	r1, [pc, #240]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00a      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800277a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800277e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	4934      	ldr	r1, [pc, #208]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d011      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800279a:	4b2f      	ldr	r3, [pc, #188]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a8:	492b      	ldr	r1, [pc, #172]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027b8:	d101      	bne.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027ba:	2301      	movs	r3, #1
 80027bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027ca:	2301      	movs	r3, #1
 80027cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d00a      	beq.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027da:	4b1f      	ldr	r3, [pc, #124]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	491b      	ldr	r1, [pc, #108]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d00b      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027fc:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002802:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800280c:	4912      	ldr	r1, [pc, #72]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280e:	4313      	orrs	r3, r2
 8002810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002820:	4b0d      	ldr	r3, [pc, #52]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002826:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002830:	4909      	ldr	r1, [pc, #36]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00f      	beq.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002844:	4b04      	ldr	r3, [pc, #16]	; (8002858 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002854:	e002      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002856:	bf00      	nop
 8002858:	40023800 	.word	0x40023800
 800285c:	4985      	ldr	r1, [pc, #532]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800285e:	4313      	orrs	r3, r2
 8002860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00b      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002870:	4b80      	ldr	r3, [pc, #512]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002872:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002876:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002880:	497c      	ldr	r1, [pc, #496]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d005      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002896:	f040 80d6 	bne.w	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800289a:	4b76      	ldr	r3, [pc, #472]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a75      	ldr	r2, [pc, #468]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a6:	f7fe fd8b 	bl	80013c0 <HAL_GetTick>
 80028aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028ac:	e008      	b.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028ae:	f7fe fd87 	bl	80013c0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e194      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028c0:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d1f0      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d021      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x570>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d11d      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e6:	0c1b      	lsrs	r3, r3, #16
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	019a      	lsls	r2, r3, #6
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	061b      	lsls	r3, r3, #24
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	071b      	lsls	r3, r3, #28
 8002914:	4957      	ldr	r1, [pc, #348]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	d02e      	beq.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002946:	d129      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002948:	4b4a      	ldr	r3, [pc, #296]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800294a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294e:	0c1b      	lsrs	r3, r3, #16
 8002950:	f003 0303 	and.w	r3, r3, #3
 8002954:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002956:	4b47      	ldr	r3, [pc, #284]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800295c:	0f1b      	lsrs	r3, r3, #28
 800295e:	f003 0307 	and.w	r3, r3, #7
 8002962:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	019a      	lsls	r2, r3, #6
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	041b      	lsls	r3, r3, #16
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	431a      	orrs	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	071b      	lsls	r3, r3, #28
 800297c:	493d      	ldr	r1, [pc, #244]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002984:	4b3b      	ldr	r3, [pc, #236]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800298a:	f023 021f 	bic.w	r2, r3, #31
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	3b01      	subs	r3, #1
 8002994:	4937      	ldr	r1, [pc, #220]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002996:	4313      	orrs	r3, r2
 8002998:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d01d      	beq.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80029a8:	4b32      	ldr	r3, [pc, #200]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029ae:	0e1b      	lsrs	r3, r3, #24
 80029b0:	f003 030f 	and.w	r3, r3, #15
 80029b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029b6:	4b2f      	ldr	r3, [pc, #188]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029bc:	0f1b      	lsrs	r3, r3, #28
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	019a      	lsls	r2, r3, #6
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	041b      	lsls	r3, r3, #16
 80029d0:	431a      	orrs	r2, r3
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	061b      	lsls	r3, r3, #24
 80029d6:	431a      	orrs	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	071b      	lsls	r3, r3, #28
 80029dc:	4925      	ldr	r1, [pc, #148]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	019a      	lsls	r2, r3, #6
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	041b      	lsls	r3, r3, #16
 80029fc:	431a      	orrs	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	061b      	lsls	r3, r3, #24
 8002a04:	431a      	orrs	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	071b      	lsls	r3, r3, #28
 8002a0c:	4919      	ldr	r1, [pc, #100]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a14:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a16      	ldr	r2, [pc, #88]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a20:	f7fe fcce 	bl	80013c0 <HAL_GetTick>
 8002a24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a28:	f7fe fcca 	bl	80013c0 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b64      	cmp	r3, #100	; 0x64
 8002a34:	d901      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0d7      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f0      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	f040 80cd 	bne.w	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a4e:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a08      	ldr	r2, [pc, #32]	; (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a5a:	f7fe fcb1 	bl	80013c0 <HAL_GetTick>
 8002a5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a62:	f7fe fcad 	bl	80013c0 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b64      	cmp	r3, #100	; 0x64
 8002a6e:	d903      	bls.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e0ba      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002a74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a78:	4b5e      	ldr	r3, [pc, #376]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a84:	d0ed      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d003      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d02e      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d12a      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002aae:	4b51      	ldr	r3, [pc, #324]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	0c1b      	lsrs	r3, r3, #16
 8002ab6:	f003 0303 	and.w	r3, r3, #3
 8002aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002abc:	4b4d      	ldr	r3, [pc, #308]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	0f1b      	lsrs	r3, r3, #28
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	019a      	lsls	r2, r3, #6
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	041b      	lsls	r3, r3, #16
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	061b      	lsls	r3, r3, #24
 8002adc:	431a      	orrs	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	071b      	lsls	r3, r3, #28
 8002ae2:	4944      	ldr	r1, [pc, #272]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002aea:	4b42      	ldr	r3, [pc, #264]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002aec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	021b      	lsls	r3, r3, #8
 8002afc:	493d      	ldr	r1, [pc, #244]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d022      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b18:	d11d      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b1a:	4b36      	ldr	r3, [pc, #216]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b20:	0e1b      	lsrs	r3, r3, #24
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b28:	4b32      	ldr	r3, [pc, #200]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	0f1b      	lsrs	r3, r3, #28
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	019a      	lsls	r2, r3, #6
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	041b      	lsls	r3, r3, #16
 8002b42:	431a      	orrs	r2, r3
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	061b      	lsls	r3, r3, #24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	071b      	lsls	r3, r3, #28
 8002b4e:	4929      	ldr	r1, [pc, #164]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d028      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b62:	4b24      	ldr	r3, [pc, #144]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	0e1b      	lsrs	r3, r3, #24
 8002b6a:	f003 030f 	and.w	r3, r3, #15
 8002b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b76:	0c1b      	lsrs	r3, r3, #16
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	019a      	lsls	r2, r3, #6
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	061b      	lsls	r3, r3, #24
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	071b      	lsls	r3, r3, #28
 8002b96:	4917      	ldr	r1, [pc, #92]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b9e:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bac:	4911      	ldr	r1, [pc, #68]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002bb4:	4b0f      	ldr	r3, [pc, #60]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a0e      	ldr	r2, [pc, #56]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fbfe 	bl	80013c0 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bc8:	f7fe fbfa 	bl	80013c0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b64      	cmp	r3, #100	; 0x64
 8002bd4:	d901      	bls.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e007      	b.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bda:	4b06      	ldr	r3, [pc, #24]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002be6:	d1ef      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800

08002bf8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e01c      	b.n	8002c44 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	795b      	ldrb	r3, [r3, #5]
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe f944 	bl	8000ea8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0204 	orr.w	r2, r2, #4
 8002c34:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e084      	b.n	8002d68 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fe f973 	bl	8000f64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c9e:	d902      	bls.n	8002ca6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	e002      	b.n	8002cac <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cb4:	d007      	beq.n	8002cc6 <HAL_SPI_Init+0x7a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cbe:	d002      	beq.n	8002cc6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d10b      	bne.n	8002ce6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cd6:	d903      	bls.n	8002ce0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8002cde:	e002      	b.n	8002ce6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685a      	ldr	r2, [r3, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	ea42 0103 	orr.w	r1, r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	0c1b      	lsrs	r3, r3, #16
 8002d26:	f003 0204 	and.w	r2, r3, #4
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	ea42 0103 	orr.w	r1, r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d56:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	603b      	str	r3, [r7, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_SPI_Transmit+0x22>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e150      	b.n	8003034 <HAL_SPI_Transmit+0x2c4>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9a:	f7fe fb11 	bl	80013c0 <HAL_GetTick>
 8002d9e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
 8002db2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db4:	e135      	b.n	8003022 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <HAL_SPI_Transmit+0x52>
 8002dbc:	88fb      	ldrh	r3, [r7, #6]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d102      	bne.n	8002dc8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc6:	e12c      	b.n	8003022 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2203      	movs	r2, #3
 8002dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	88fa      	ldrh	r2, [r7, #6]
 8002de6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2200      	movs	r2, #0
 8002e02:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e12:	d107      	bne.n	8002e24 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e22:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e2e:	2b40      	cmp	r3, #64	; 0x40
 8002e30:	d007      	beq.n	8002e42 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e40:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e4a:	d94b      	bls.n	8002ee4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_SPI_Transmit+0xea>
 8002e54:	8afb      	ldrh	r3, [r7, #22]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d13e      	bne.n	8002ed8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	881a      	ldrh	r2, [r3, #0]
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6a:	1c9a      	adds	r2, r3, #2
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e7e:	e02b      	b.n	8002ed8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d112      	bne.n	8002eb4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e92:	881a      	ldrh	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9e:	1c9a      	adds	r2, r3, #2
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	b29a      	uxth	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eb2:	e011      	b.n	8002ed8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eb4:	f7fe fa84 	bl	80013c0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d803      	bhi.n	8002ecc <HAL_SPI_Transmit+0x15c>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eca:	d102      	bne.n	8002ed2 <HAL_SPI_Transmit+0x162>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ed6:	e0a4      	b.n	8003022 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1ce      	bne.n	8002e80 <HAL_SPI_Transmit+0x110>
 8002ee2:	e07c      	b.n	8002fde <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d002      	beq.n	8002ef2 <HAL_SPI_Transmit+0x182>
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d170      	bne.n	8002fd4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d912      	bls.n	8002f22 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	881a      	ldrh	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0c:	1c9a      	adds	r2, r3, #2
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	3b02      	subs	r3, #2
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f20:	e058      	b.n	8002fd4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	330c      	adds	r3, #12
 8002f2c:	7812      	ldrb	r2, [r2, #0]
 8002f2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	1c5a      	adds	r2, r3, #1
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f48:	e044      	b.n	8002fd4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d12b      	bne.n	8002fb0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d912      	bls.n	8002f88 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f66:	881a      	ldrh	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f72:	1c9a      	adds	r2, r3, #2
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	3b02      	subs	r3, #2
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f86:	e025      	b.n	8002fd4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	330c      	adds	r3, #12
 8002f92:	7812      	ldrb	r2, [r2, #0]
 8002f94:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fae:	e011      	b.n	8002fd4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb0:	f7fe fa06 	bl	80013c0 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	683a      	ldr	r2, [r7, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d803      	bhi.n	8002fc8 <HAL_SPI_Transmit+0x258>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc6:	d102      	bne.n	8002fce <HAL_SPI_Transmit+0x25e>
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fd2:	e026      	b.n	8003022 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1b5      	bne.n	8002f4a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	6839      	ldr	r1, [r7, #0]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f901 	bl	80031ea <SPI_EndRxTxTransaction>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d002      	beq.n	8002ff4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d10a      	bne.n	8003012 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	613b      	str	r3, [r7, #16]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	613b      	str	r3, [r7, #16]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	613b      	str	r3, [r7, #16]
 8003010:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e000      	b.n	8003022 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8003020:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003032:	7ffb      	ldrb	r3, [r7, #31]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3720      	adds	r7, #32
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800304c:	e04c      	b.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003054:	d048      	beq.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003056:	f7fe f9b3 	bl	80013c0 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d902      	bls.n	800306c <SPI_WaitFlagStateUntilTimeout+0x30>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d13d      	bne.n	80030e8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800307a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003084:	d111      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800308e:	d004      	beq.n	800309a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003098:	d107      	bne.n	80030aa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030b2:	d10f      	bne.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e00f      	b.n	8003108 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4013      	ands	r3, r2
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	461a      	mov	r2, r3
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	429a      	cmp	r2, r3
 8003104:	d1a3      	bne.n	800304e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800311e:	e057      	b.n	80031d0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003126:	d106      	bne.n	8003136 <SPI_WaitFifoStateUntilTimeout+0x26>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d103      	bne.n	8003136 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	330c      	adds	r3, #12
 8003134:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800313c:	d048      	beq.n	80031d0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800313e:	f7fe f93f 	bl	80013c0 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d902      	bls.n	8003154 <SPI_WaitFifoStateUntilTimeout+0x44>
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d13d      	bne.n	80031d0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003162:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316c:	d111      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x82>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003176:	d004      	beq.n	8003182 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003180:	d107      	bne.n	8003192 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003190:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319a:	d10f      	bne.n	80031bc <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e008      	b.n	80031e2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d19f      	bne.n	8003120 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af02      	add	r7, sp, #8
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f7ff ff84 	bl	8003110 <SPI_WaitFifoStateUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003212:	f043 0220 	orr.w	r2, r3, #32
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e027      	b.n	800326e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	; 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f7ff ff07 	bl	800303c <SPI_WaitFlagStateUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d007      	beq.n	8003244 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e014      	b.n	800326e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2200      	movs	r2, #0
 800324c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f7ff ff5d 	bl	8003110 <SPI_WaitFifoStateUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d007      	beq.n	800326c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	e000      	b.n	800326e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3710      	adds	r7, #16
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}

08003276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003276:	b580      	push	{r7, lr}
 8003278:	b082      	sub	sp, #8
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e01d      	b.n	80032c4 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	d106      	bne.n	80032a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fd ff71 	bl	8001184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	3304      	adds	r3, #4
 80032b2:	4619      	mov	r1, r3
 80032b4:	4610      	mov	r0, r2
 80032b6:	f000 f8c3 	bl	8003440 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_TIM_ConfigClockSource+0x18>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e0a6      	b.n	8003432 <HAL_TIM_ConfigClockSource+0x166>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4b4f      	ldr	r3, [pc, #316]	; (800343c <HAL_TIM_ConfigClockSource+0x170>)
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d067      	beq.n	80033ec <HAL_TIM_ConfigClockSource+0x120>
 800331c:	2b40      	cmp	r3, #64	; 0x40
 800331e:	d80b      	bhi.n	8003338 <HAL_TIM_ConfigClockSource+0x6c>
 8003320:	2b10      	cmp	r3, #16
 8003322:	d073      	beq.n	800340c <HAL_TIM_ConfigClockSource+0x140>
 8003324:	2b10      	cmp	r3, #16
 8003326:	d802      	bhi.n	800332e <HAL_TIM_ConfigClockSource+0x62>
 8003328:	2b00      	cmp	r3, #0
 800332a:	d06f      	beq.n	800340c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800332c:	e078      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800332e:	2b20      	cmp	r3, #32
 8003330:	d06c      	beq.n	800340c <HAL_TIM_ConfigClockSource+0x140>
 8003332:	2b30      	cmp	r3, #48	; 0x30
 8003334:	d06a      	beq.n	800340c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003336:	e073      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003338:	2b70      	cmp	r3, #112	; 0x70
 800333a:	d00d      	beq.n	8003358 <HAL_TIM_ConfigClockSource+0x8c>
 800333c:	2b70      	cmp	r3, #112	; 0x70
 800333e:	d804      	bhi.n	800334a <HAL_TIM_ConfigClockSource+0x7e>
 8003340:	2b50      	cmp	r3, #80	; 0x50
 8003342:	d033      	beq.n	80033ac <HAL_TIM_ConfigClockSource+0xe0>
 8003344:	2b60      	cmp	r3, #96	; 0x60
 8003346:	d041      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003348:	e06a      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d066      	beq.n	800341e <HAL_TIM_ConfigClockSource+0x152>
 8003350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003354:	d017      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003356:	e063      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6818      	ldr	r0, [r3, #0]
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	6899      	ldr	r1, [r3, #8]
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	f000 f984 	bl	8003674 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800337a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	68fa      	ldr	r2, [r7, #12]
 8003382:	609a      	str	r2, [r3, #8]
      break;
 8003384:	e04c      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	f000 f96d 	bl	8003674 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033a8:	609a      	str	r2, [r3, #8]
      break;
 80033aa:	e039      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6818      	ldr	r0, [r3, #0]
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	6859      	ldr	r1, [r3, #4]
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	461a      	mov	r2, r3
 80033ba:	f000 f8e1 	bl	8003580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2150      	movs	r1, #80	; 0x50
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f93a 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 80033ca:	e029      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	461a      	mov	r2, r3
 80033da:	f000 f900 	bl	80035de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2160      	movs	r1, #96	; 0x60
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 f92a 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 80033ea:	e019      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6818      	ldr	r0, [r3, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	461a      	mov	r2, r3
 80033fa:	f000 f8c1 	bl	8003580 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	4618      	mov	r0, r3
 8003406:	f000 f91a 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 800340a:	e009      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	4610      	mov	r0, r2
 8003418:	f000 f911 	bl	800363e <TIM_ITRx_SetConfig>
      break;
 800341c:	e000      	b.n	8003420 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800341e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	fffeff88 	.word	0xfffeff88

08003440 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <TIM_Base_SetConfig+0x114>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345e:	d00f      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a3d      	ldr	r2, [pc, #244]	; (8003558 <TIM_Base_SetConfig+0x118>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00b      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a3c      	ldr	r2, [pc, #240]	; (800355c <TIM_Base_SetConfig+0x11c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d007      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <TIM_Base_SetConfig+0x120>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d003      	beq.n	8003480 <TIM_Base_SetConfig+0x40>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a3a      	ldr	r2, [pc, #232]	; (8003564 <TIM_Base_SetConfig+0x124>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d108      	bne.n	8003492 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a2f      	ldr	r2, [pc, #188]	; (8003554 <TIM_Base_SetConfig+0x114>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d02b      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034a0:	d027      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a2c      	ldr	r2, [pc, #176]	; (8003558 <TIM_Base_SetConfig+0x118>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d023      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	4a2b      	ldr	r2, [pc, #172]	; (800355c <TIM_Base_SetConfig+0x11c>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d01f      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	4a2a      	ldr	r2, [pc, #168]	; (8003560 <TIM_Base_SetConfig+0x120>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d01b      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <TIM_Base_SetConfig+0x124>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d017      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	4a28      	ldr	r2, [pc, #160]	; (8003568 <TIM_Base_SetConfig+0x128>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a27      	ldr	r2, [pc, #156]	; (800356c <TIM_Base_SetConfig+0x12c>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d00f      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a26      	ldr	r2, [pc, #152]	; (8003570 <TIM_Base_SetConfig+0x130>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00b      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a25      	ldr	r2, [pc, #148]	; (8003574 <TIM_Base_SetConfig+0x134>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d007      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <TIM_Base_SetConfig+0x138>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d003      	beq.n	80034f2 <TIM_Base_SetConfig+0xb2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a23      	ldr	r2, [pc, #140]	; (800357c <TIM_Base_SetConfig+0x13c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d108      	bne.n	8003504 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a0a      	ldr	r2, [pc, #40]	; (8003554 <TIM_Base_SetConfig+0x114>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_Base_SetConfig+0xf8>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <TIM_Base_SetConfig+0x124>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d103      	bne.n	8003540 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	615a      	str	r2, [r3, #20]
}
 8003546:	bf00      	nop
 8003548:	3714      	adds	r7, #20
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	40010000 	.word	0x40010000
 8003558:	40000400 	.word	0x40000400
 800355c:	40000800 	.word	0x40000800
 8003560:	40000c00 	.word	0x40000c00
 8003564:	40010400 	.word	0x40010400
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800
 8003574:	40001800 	.word	0x40001800
 8003578:	40001c00 	.word	0x40001c00
 800357c:	40002000 	.word	0x40002000

08003580 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003580:	b480      	push	{r7}
 8003582:	b087      	sub	sp, #28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a1b      	ldr	r3, [r3, #32]
 8003590:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	f023 0201 	bic.w	r2, r3, #1
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f023 030a 	bic.w	r3, r3, #10
 80035bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	621a      	str	r2, [r3, #32]
}
 80035d2:	bf00      	nop
 80035d4:	371c      	adds	r7, #28
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr

080035de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035de:	b480      	push	{r7}
 80035e0:	b087      	sub	sp, #28
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	f023 0210 	bic.w	r2, r3, #16
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003608:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	031b      	lsls	r3, r3, #12
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	4313      	orrs	r3, r2
 8003612:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800361a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	011b      	lsls	r3, r3, #4
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	621a      	str	r2, [r3, #32]
}
 8003632:	bf00      	nop
 8003634:	371c      	adds	r7, #28
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003654:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	f043 0307 	orr.w	r3, r3, #7
 8003660:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	68fa      	ldr	r2, [r7, #12]
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003674:	b480      	push	{r7}
 8003676:	b087      	sub	sp, #28
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800368e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	021a      	lsls	r2, r3, #8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	431a      	orrs	r2, r3
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	4313      	orrs	r3, r2
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	4313      	orrs	r3, r2
 80036a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	697a      	ldr	r2, [r7, #20]
 80036a6:	609a      	str	r2, [r3, #8]
}
 80036a8:	bf00      	nop
 80036aa:	371c      	adds	r7, #28
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d101      	bne.n	80036cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036c8:	2302      	movs	r3, #2
 80036ca:	e06d      	b.n	80037a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a30      	ldr	r2, [pc, #192]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d004      	beq.n	8003700 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a2f      	ldr	r2, [pc, #188]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d108      	bne.n	8003712 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003706:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	4313      	orrs	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003718:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	4313      	orrs	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a20      	ldr	r2, [pc, #128]	; (80037b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d022      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800373e:	d01d      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d018      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d013      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1a      	ldr	r2, [pc, #104]	; (80037c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d00e      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a15      	ldr	r2, [pc, #84]	; (80037b8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d009      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d004      	beq.n	800377c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d10c      	bne.n	8003796 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003782:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4313      	orrs	r3, r2
 800378c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037a6:	2300      	movs	r3, #0
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3714      	adds	r7, #20
 80037ac:	46bd      	mov	sp, r7
 80037ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b2:	4770      	bx	lr
 80037b4:	40010000 	.word	0x40010000
 80037b8:	40010400 	.word	0x40010400
 80037bc:	40000400 	.word	0x40000400
 80037c0:	40000800 	.word	0x40000800
 80037c4:	40000c00 	.word	0x40000c00
 80037c8:	40014000 	.word	0x40014000
 80037cc:	40001800 	.word	0x40001800

080037d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e040      	b.n	8003864 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7fd fd16 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2224      	movs	r2, #36	; 0x24
 80037fc:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 f82c 	bl	800386c <UART_SetConfig>
 8003814:	4603      	mov	r3, r0
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e022      	b.n	8003864 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	2b00      	cmp	r3, #0
 8003824:	d002      	beq.n	800382c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 faca 	bl	8003dc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800383a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689a      	ldr	r2, [r3, #8]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800384a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f042 0201 	orr.w	r2, r2, #1
 800385a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	f000 fb51 	bl	8003f04 <UART_CheckIdleState>
 8003862:	4603      	mov	r3, r0
}
 8003864:	4618      	mov	r0, r3
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003878:	2300      	movs	r3, #0
 800387a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	431a      	orrs	r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	4bb1      	ldr	r3, [pc, #708]	; (8003b60 <UART_SetConfig+0x2f4>)
 800389c:	4013      	ands	r3, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6812      	ldr	r2, [r2, #0]
 80038a2:	6939      	ldr	r1, [r7, #16]
 80038a4:	430b      	orrs	r3, r1
 80038a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68da      	ldr	r2, [r3, #12]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	430a      	orrs	r2, r1
 80038e0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a9f      	ldr	r2, [pc, #636]	; (8003b64 <UART_SetConfig+0x2f8>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d121      	bne.n	8003930 <UART_SetConfig+0xc4>
 80038ec:	4b9e      	ldr	r3, [pc, #632]	; (8003b68 <UART_SetConfig+0x2fc>)
 80038ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	2b03      	cmp	r3, #3
 80038f8:	d816      	bhi.n	8003928 <UART_SetConfig+0xbc>
 80038fa:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <UART_SetConfig+0x94>)
 80038fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003900:	08003911 	.word	0x08003911
 8003904:	0800391d 	.word	0x0800391d
 8003908:	08003917 	.word	0x08003917
 800390c:	08003923 	.word	0x08003923
 8003910:	2301      	movs	r3, #1
 8003912:	77fb      	strb	r3, [r7, #31]
 8003914:	e151      	b.n	8003bba <UART_SetConfig+0x34e>
 8003916:	2302      	movs	r3, #2
 8003918:	77fb      	strb	r3, [r7, #31]
 800391a:	e14e      	b.n	8003bba <UART_SetConfig+0x34e>
 800391c:	2304      	movs	r3, #4
 800391e:	77fb      	strb	r3, [r7, #31]
 8003920:	e14b      	b.n	8003bba <UART_SetConfig+0x34e>
 8003922:	2308      	movs	r3, #8
 8003924:	77fb      	strb	r3, [r7, #31]
 8003926:	e148      	b.n	8003bba <UART_SetConfig+0x34e>
 8003928:	2310      	movs	r3, #16
 800392a:	77fb      	strb	r3, [r7, #31]
 800392c:	bf00      	nop
 800392e:	e144      	b.n	8003bba <UART_SetConfig+0x34e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a8d      	ldr	r2, [pc, #564]	; (8003b6c <UART_SetConfig+0x300>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d134      	bne.n	80039a4 <UART_SetConfig+0x138>
 800393a:	4b8b      	ldr	r3, [pc, #556]	; (8003b68 <UART_SetConfig+0x2fc>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b0c      	cmp	r3, #12
 8003946:	d829      	bhi.n	800399c <UART_SetConfig+0x130>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <UART_SetConfig+0xe4>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003985 	.word	0x08003985
 8003954:	0800399d 	.word	0x0800399d
 8003958:	0800399d 	.word	0x0800399d
 800395c:	0800399d 	.word	0x0800399d
 8003960:	08003991 	.word	0x08003991
 8003964:	0800399d 	.word	0x0800399d
 8003968:	0800399d 	.word	0x0800399d
 800396c:	0800399d 	.word	0x0800399d
 8003970:	0800398b 	.word	0x0800398b
 8003974:	0800399d 	.word	0x0800399d
 8003978:	0800399d 	.word	0x0800399d
 800397c:	0800399d 	.word	0x0800399d
 8003980:	08003997 	.word	0x08003997
 8003984:	2300      	movs	r3, #0
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e117      	b.n	8003bba <UART_SetConfig+0x34e>
 800398a:	2302      	movs	r3, #2
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e114      	b.n	8003bba <UART_SetConfig+0x34e>
 8003990:	2304      	movs	r3, #4
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e111      	b.n	8003bba <UART_SetConfig+0x34e>
 8003996:	2308      	movs	r3, #8
 8003998:	77fb      	strb	r3, [r7, #31]
 800399a:	e10e      	b.n	8003bba <UART_SetConfig+0x34e>
 800399c:	2310      	movs	r3, #16
 800399e:	77fb      	strb	r3, [r7, #31]
 80039a0:	bf00      	nop
 80039a2:	e10a      	b.n	8003bba <UART_SetConfig+0x34e>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a71      	ldr	r2, [pc, #452]	; (8003b70 <UART_SetConfig+0x304>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d120      	bne.n	80039f0 <UART_SetConfig+0x184>
 80039ae:	4b6e      	ldr	r3, [pc, #440]	; (8003b68 <UART_SetConfig+0x2fc>)
 80039b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039b8:	2b10      	cmp	r3, #16
 80039ba:	d00f      	beq.n	80039dc <UART_SetConfig+0x170>
 80039bc:	2b10      	cmp	r3, #16
 80039be:	d802      	bhi.n	80039c6 <UART_SetConfig+0x15a>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <UART_SetConfig+0x164>
 80039c4:	e010      	b.n	80039e8 <UART_SetConfig+0x17c>
 80039c6:	2b20      	cmp	r3, #32
 80039c8:	d005      	beq.n	80039d6 <UART_SetConfig+0x16a>
 80039ca:	2b30      	cmp	r3, #48	; 0x30
 80039cc:	d009      	beq.n	80039e2 <UART_SetConfig+0x176>
 80039ce:	e00b      	b.n	80039e8 <UART_SetConfig+0x17c>
 80039d0:	2300      	movs	r3, #0
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0f1      	b.n	8003bba <UART_SetConfig+0x34e>
 80039d6:	2302      	movs	r3, #2
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e0ee      	b.n	8003bba <UART_SetConfig+0x34e>
 80039dc:	2304      	movs	r3, #4
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e0eb      	b.n	8003bba <UART_SetConfig+0x34e>
 80039e2:	2308      	movs	r3, #8
 80039e4:	77fb      	strb	r3, [r7, #31]
 80039e6:	e0e8      	b.n	8003bba <UART_SetConfig+0x34e>
 80039e8:	2310      	movs	r3, #16
 80039ea:	77fb      	strb	r3, [r7, #31]
 80039ec:	bf00      	nop
 80039ee:	e0e4      	b.n	8003bba <UART_SetConfig+0x34e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a5f      	ldr	r2, [pc, #380]	; (8003b74 <UART_SetConfig+0x308>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d120      	bne.n	8003a3c <UART_SetConfig+0x1d0>
 80039fa:	4b5b      	ldr	r3, [pc, #364]	; (8003b68 <UART_SetConfig+0x2fc>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a04:	2b40      	cmp	r3, #64	; 0x40
 8003a06:	d00f      	beq.n	8003a28 <UART_SetConfig+0x1bc>
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d802      	bhi.n	8003a12 <UART_SetConfig+0x1a6>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <UART_SetConfig+0x1b0>
 8003a10:	e010      	b.n	8003a34 <UART_SetConfig+0x1c8>
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d005      	beq.n	8003a22 <UART_SetConfig+0x1b6>
 8003a16:	2bc0      	cmp	r3, #192	; 0xc0
 8003a18:	d009      	beq.n	8003a2e <UART_SetConfig+0x1c2>
 8003a1a:	e00b      	b.n	8003a34 <UART_SetConfig+0x1c8>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e0cb      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a22:	2302      	movs	r3, #2
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e0c8      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a28:	2304      	movs	r3, #4
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e0c5      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e0c2      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a34:	2310      	movs	r3, #16
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	bf00      	nop
 8003a3a:	e0be      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <UART_SetConfig+0x30c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d124      	bne.n	8003a90 <UART_SetConfig+0x224>
 8003a46:	4b48      	ldr	r3, [pc, #288]	; (8003b68 <UART_SetConfig+0x2fc>)
 8003a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a54:	d012      	beq.n	8003a7c <UART_SetConfig+0x210>
 8003a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5a:	d802      	bhi.n	8003a62 <UART_SetConfig+0x1f6>
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d007      	beq.n	8003a70 <UART_SetConfig+0x204>
 8003a60:	e012      	b.n	8003a88 <UART_SetConfig+0x21c>
 8003a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a66:	d006      	beq.n	8003a76 <UART_SetConfig+0x20a>
 8003a68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a6c:	d009      	beq.n	8003a82 <UART_SetConfig+0x216>
 8003a6e:	e00b      	b.n	8003a88 <UART_SetConfig+0x21c>
 8003a70:	2300      	movs	r3, #0
 8003a72:	77fb      	strb	r3, [r7, #31]
 8003a74:	e0a1      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	77fb      	strb	r3, [r7, #31]
 8003a7a:	e09e      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	77fb      	strb	r3, [r7, #31]
 8003a80:	e09b      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a82:	2308      	movs	r3, #8
 8003a84:	77fb      	strb	r3, [r7, #31]
 8003a86:	e098      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a88:	2310      	movs	r3, #16
 8003a8a:	77fb      	strb	r3, [r7, #31]
 8003a8c:	bf00      	nop
 8003a8e:	e094      	b.n	8003bba <UART_SetConfig+0x34e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a39      	ldr	r2, [pc, #228]	; (8003b7c <UART_SetConfig+0x310>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d124      	bne.n	8003ae4 <UART_SetConfig+0x278>
 8003a9a:	4b33      	ldr	r3, [pc, #204]	; (8003b68 <UART_SetConfig+0x2fc>)
 8003a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa8:	d012      	beq.n	8003ad0 <UART_SetConfig+0x264>
 8003aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aae:	d802      	bhi.n	8003ab6 <UART_SetConfig+0x24a>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <UART_SetConfig+0x258>
 8003ab4:	e012      	b.n	8003adc <UART_SetConfig+0x270>
 8003ab6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aba:	d006      	beq.n	8003aca <UART_SetConfig+0x25e>
 8003abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac0:	d009      	beq.n	8003ad6 <UART_SetConfig+0x26a>
 8003ac2:	e00b      	b.n	8003adc <UART_SetConfig+0x270>
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	77fb      	strb	r3, [r7, #31]
 8003ac8:	e077      	b.n	8003bba <UART_SetConfig+0x34e>
 8003aca:	2302      	movs	r3, #2
 8003acc:	77fb      	strb	r3, [r7, #31]
 8003ace:	e074      	b.n	8003bba <UART_SetConfig+0x34e>
 8003ad0:	2304      	movs	r3, #4
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e071      	b.n	8003bba <UART_SetConfig+0x34e>
 8003ad6:	2308      	movs	r3, #8
 8003ad8:	77fb      	strb	r3, [r7, #31]
 8003ada:	e06e      	b.n	8003bba <UART_SetConfig+0x34e>
 8003adc:	2310      	movs	r3, #16
 8003ade:	77fb      	strb	r3, [r7, #31]
 8003ae0:	bf00      	nop
 8003ae2:	e06a      	b.n	8003bba <UART_SetConfig+0x34e>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a25      	ldr	r2, [pc, #148]	; (8003b80 <UART_SetConfig+0x314>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d124      	bne.n	8003b38 <UART_SetConfig+0x2cc>
 8003aee:	4b1e      	ldr	r3, [pc, #120]	; (8003b68 <UART_SetConfig+0x2fc>)
 8003af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afc:	d012      	beq.n	8003b24 <UART_SetConfig+0x2b8>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b02:	d802      	bhi.n	8003b0a <UART_SetConfig+0x29e>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d007      	beq.n	8003b18 <UART_SetConfig+0x2ac>
 8003b08:	e012      	b.n	8003b30 <UART_SetConfig+0x2c4>
 8003b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b0e:	d006      	beq.n	8003b1e <UART_SetConfig+0x2b2>
 8003b10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b14:	d009      	beq.n	8003b2a <UART_SetConfig+0x2be>
 8003b16:	e00b      	b.n	8003b30 <UART_SetConfig+0x2c4>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e04d      	b.n	8003bba <UART_SetConfig+0x34e>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e04a      	b.n	8003bba <UART_SetConfig+0x34e>
 8003b24:	2304      	movs	r3, #4
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e047      	b.n	8003bba <UART_SetConfig+0x34e>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	77fb      	strb	r3, [r7, #31]
 8003b2e:	e044      	b.n	8003bba <UART_SetConfig+0x34e>
 8003b30:	2310      	movs	r3, #16
 8003b32:	77fb      	strb	r3, [r7, #31]
 8003b34:	bf00      	nop
 8003b36:	e040      	b.n	8003bba <UART_SetConfig+0x34e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a11      	ldr	r2, [pc, #68]	; (8003b84 <UART_SetConfig+0x318>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d139      	bne.n	8003bb6 <UART_SetConfig+0x34a>
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <UART_SetConfig+0x2fc>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b50:	d027      	beq.n	8003ba2 <UART_SetConfig+0x336>
 8003b52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b56:	d817      	bhi.n	8003b88 <UART_SetConfig+0x31c>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d01c      	beq.n	8003b96 <UART_SetConfig+0x32a>
 8003b5c:	e027      	b.n	8003bae <UART_SetConfig+0x342>
 8003b5e:	bf00      	nop
 8003b60:	efff69f3 	.word	0xefff69f3
 8003b64:	40011000 	.word	0x40011000
 8003b68:	40023800 	.word	0x40023800
 8003b6c:	40004400 	.word	0x40004400
 8003b70:	40004800 	.word	0x40004800
 8003b74:	40004c00 	.word	0x40004c00
 8003b78:	40005000 	.word	0x40005000
 8003b7c:	40011400 	.word	0x40011400
 8003b80:	40007800 	.word	0x40007800
 8003b84:	40007c00 	.word	0x40007c00
 8003b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8c:	d006      	beq.n	8003b9c <UART_SetConfig+0x330>
 8003b8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b92:	d009      	beq.n	8003ba8 <UART_SetConfig+0x33c>
 8003b94:	e00b      	b.n	8003bae <UART_SetConfig+0x342>
 8003b96:	2300      	movs	r3, #0
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e00e      	b.n	8003bba <UART_SetConfig+0x34e>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e00b      	b.n	8003bba <UART_SetConfig+0x34e>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e008      	b.n	8003bba <UART_SetConfig+0x34e>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e005      	b.n	8003bba <UART_SetConfig+0x34e>
 8003bae:	2310      	movs	r3, #16
 8003bb0:	77fb      	strb	r3, [r7, #31]
 8003bb2:	bf00      	nop
 8003bb4:	e001      	b.n	8003bba <UART_SetConfig+0x34e>
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bc2:	d17f      	bne.n	8003cc4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8003bc4:	7ffb      	ldrb	r3, [r7, #31]
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d85c      	bhi.n	8003c84 <UART_SetConfig+0x418>
 8003bca:	a201      	add	r2, pc, #4	; (adr r2, 8003bd0 <UART_SetConfig+0x364>)
 8003bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd0:	08003bf5 	.word	0x08003bf5
 8003bd4:	08003c15 	.word	0x08003c15
 8003bd8:	08003c35 	.word	0x08003c35
 8003bdc:	08003c85 	.word	0x08003c85
 8003be0:	08003c4d 	.word	0x08003c4d
 8003be4:	08003c85 	.word	0x08003c85
 8003be8:	08003c85 	.word	0x08003c85
 8003bec:	08003c85 	.word	0x08003c85
 8003bf0:	08003c6d 	.word	0x08003c6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf4:	f7fe fbb2 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 8003bf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	005a      	lsls	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	61bb      	str	r3, [r7, #24]
        break;
 8003c12:	e03a      	b.n	8003c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c14:	f7fe fbb6 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8003c18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	005a      	lsls	r2, r3, #1
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	085b      	lsrs	r3, r3, #1
 8003c24:	441a      	add	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	61bb      	str	r3, [r7, #24]
        break;
 8003c32:	e02a      	b.n	8003c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	085a      	lsrs	r2, r3, #1
 8003c3a:	4b5f      	ldr	r3, [pc, #380]	; (8003db8 <UART_SetConfig+0x54c>)
 8003c3c:	4413      	add	r3, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6852      	ldr	r2, [r2, #4]
 8003c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	61bb      	str	r3, [r7, #24]
        break;
 8003c4a:	e01e      	b.n	8003c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4c:	f7fe faa2 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8003c50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	005a      	lsls	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	441a      	add	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	61bb      	str	r3, [r7, #24]
        break;
 8003c6a:	e00e      	b.n	8003c8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	61bb      	str	r3, [r7, #24]
        break;
 8003c82:	e002      	b.n	8003c8a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
        break;
 8003c88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	2b0f      	cmp	r3, #15
 8003c8e:	d916      	bls.n	8003cbe <UART_SetConfig+0x452>
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c96:	d212      	bcs.n	8003cbe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	f023 030f 	bic.w	r3, r3, #15
 8003ca0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	f003 0307 	and.w	r3, r3, #7
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	897b      	ldrh	r3, [r7, #10]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	897a      	ldrh	r2, [r7, #10]
 8003cba:	60da      	str	r2, [r3, #12]
 8003cbc:	e070      	b.n	8003da0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	75fb      	strb	r3, [r7, #23]
 8003cc2:	e06d      	b.n	8003da0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 8003cc4:	7ffb      	ldrb	r3, [r7, #31]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d859      	bhi.n	8003d7e <UART_SetConfig+0x512>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x464>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003d13 	.word	0x08003d13
 8003cd8:	08003d31 	.word	0x08003d31
 8003cdc:	08003d7f 	.word	0x08003d7f
 8003ce0:	08003d49 	.word	0x08003d49
 8003ce4:	08003d7f 	.word	0x08003d7f
 8003ce8:	08003d7f 	.word	0x08003d7f
 8003cec:	08003d7f 	.word	0x08003d7f
 8003cf0:	08003d67 	.word	0x08003d67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7fe fb32 	bl	800235c <HAL_RCC_GetPCLK1Freq>
 8003cf8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	085a      	lsrs	r2, r3, #1
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	441a      	add	r2, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	61bb      	str	r3, [r7, #24]
        break;
 8003d10:	e038      	b.n	8003d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d12:	f7fe fb37 	bl	8002384 <HAL_RCC_GetPCLK2Freq>
 8003d16:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	085a      	lsrs	r2, r3, #1
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	441a      	add	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	61bb      	str	r3, [r7, #24]
        break;
 8003d2e:	e029      	b.n	8003d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	085a      	lsrs	r2, r3, #1
 8003d36:	4b21      	ldr	r3, [pc, #132]	; (8003dbc <UART_SetConfig+0x550>)
 8003d38:	4413      	add	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6852      	ldr	r2, [r2, #4]
 8003d3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	61bb      	str	r3, [r7, #24]
        break;
 8003d46:	e01d      	b.n	8003d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d48:	f7fe fa24 	bl	8002194 <HAL_RCC_GetSysClockFreq>
 8003d4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	085a      	lsrs	r2, r3, #1
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	441a      	add	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	61bb      	str	r3, [r7, #24]
        break;
 8003d64:	e00e      	b.n	8003d84 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	61bb      	str	r3, [r7, #24]
        break;
 8003d7c:	e002      	b.n	8003d84 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
        break;
 8003d82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b0f      	cmp	r3, #15
 8003d88:	d908      	bls.n	8003d9c <UART_SetConfig+0x530>
 8003d8a:	69bb      	ldr	r3, [r7, #24]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d204      	bcs.n	8003d9c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	e001      	b.n	8003da0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	01e84800 	.word	0x01e84800
 8003dbc:	00f42400 	.word	0x00f42400

08003dc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00a      	beq.n	8003dea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00a      	beq.n	8003e0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e10:	f003 0304 	and.w	r3, r3, #4
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d00a      	beq.n	8003e2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d00a      	beq.n	8003e50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00a      	beq.n	8003e94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01a      	beq.n	8003ed6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ebe:	d10a      	bne.n	8003ed6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	605a      	str	r2, [r3, #4]
  }
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b086      	sub	sp, #24
 8003f08:	af02      	add	r7, sp, #8
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003f12:	f7fd fa55 	bl	80013c0 <HAL_GetTick>
 8003f16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d10e      	bne.n	8003f44 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f2a:	9300      	str	r3, [sp, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 f82a 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d001      	beq.n	8003f44 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e020      	b.n	8003f86 <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d10e      	bne.n	8003f70 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f814 	bl	8003f8e <UART_WaitOnFlagUntilTimeout>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e00a      	b.n	8003f86 <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b084      	sub	sp, #16
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9e:	e05d      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa6:	d059      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa8:	f7fd fa0a 	bl	80013c0 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	69ba      	ldr	r2, [r7, #24]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d302      	bcc.n	8003fbe <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11b      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003fcc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 0201 	bic.w	r2, r2, #1
 8003fdc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	e042      	b.n	800407c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	d02b      	beq.n	800405c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800400e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004012:	d123      	bne.n	800405c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800401c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800402c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0201 	bic.w	r2, r2, #1
 800403c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004058:	2303      	movs	r3, #3
 800405a:	e00f      	b.n	800407c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69da      	ldr	r2, [r3, #28]
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	4013      	ands	r3, r2
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	429a      	cmp	r2, r3
 800406a:	bf0c      	ite	eq
 800406c:	2301      	moveq	r3, #1
 800406e:	2300      	movne	r3, #0
 8004070:	b2db      	uxtb	r3, r3
 8004072:	461a      	mov	r2, r3
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	429a      	cmp	r2, r3
 8004078:	d092      	beq.n	8003fa0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8004084:	b590      	push	{r4, r7, lr}
 8004086:	b08b      	sub	sp, #44	; 0x2c
 8004088:	af00      	add	r7, sp, #0
 800408a:	4604      	mov	r4, r0
 800408c:	4608      	mov	r0, r1
 800408e:	4611      	mov	r1, r2
 8004090:	461a      	mov	r2, r3
 8004092:	4623      	mov	r3, r4
 8004094:	80fb      	strh	r3, [r7, #6]
 8004096:	4603      	mov	r3, r0
 8004098:	80bb      	strh	r3, [r7, #4]
 800409a:	460b      	mov	r3, r1
 800409c:	807b      	strh	r3, [r7, #2]
 800409e:	4613      	mov	r3, r2
 80040a0:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80040a2:	887b      	ldrh	r3, [r7, #2]
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80040aa:	887b      	ldrh	r3, [r7, #2]
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	f1c3 0301 	rsb	r3, r3, #1
 80040b2:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80040bc:	e061      	b.n	8004182 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e018      	b.n	80040fa <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	b298      	uxth	r0, r3
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	b29a      	uxth	r2, r3
 80040d0:	88bb      	ldrh	r3, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	883a      	ldrh	r2, [r7, #0]
 80040d8:	4619      	mov	r1, r3
 80040da:	f000 fc77 	bl	80049cc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	b298      	uxth	r0, r3
 80040e2:	6a3b      	ldr	r3, [r7, #32]
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	88ba      	ldrh	r2, [r7, #4]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	883a      	ldrh	r2, [r7, #0]
 80040ee:	4619      	mov	r1, r3
 80040f0:	f000 fc6c 	bl	80049cc <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	3301      	adds	r3, #1
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	88fa      	ldrh	r2, [r7, #6]
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	4413      	add	r3, r2
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	429a      	cmp	r2, r3
 8004104:	dde0      	ble.n	80040c8 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	6a3b      	ldr	r3, [r7, #32]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	60fb      	str	r3, [r7, #12]
 800410e:	e018      	b.n	8004142 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	b298      	uxth	r0, r3
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	b29a      	uxth	r2, r3
 8004118:	88bb      	ldrh	r3, [r7, #4]
 800411a:	4413      	add	r3, r2
 800411c:	b29b      	uxth	r3, r3
 800411e:	883a      	ldrh	r2, [r7, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	f000 fc53 	bl	80049cc <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	b298      	uxth	r0, r3
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	b29b      	uxth	r3, r3
 800412e:	88ba      	ldrh	r2, [r7, #4]
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	b29b      	uxth	r3, r3
 8004134:	883a      	ldrh	r2, [r7, #0]
 8004136:	4619      	mov	r1, r3
 8004138:	f000 fc48 	bl	80049cc <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3301      	adds	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	88fa      	ldrh	r2, [r7, #6]
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	4413      	add	r3, r2
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	429a      	cmp	r2, r3
 800414c:	dde0      	ble.n	8004110 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800414e:	6a3b      	ldr	r3, [r7, #32]
 8004150:	3301      	adds	r3, #1
 8004152:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	4413      	add	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	3302      	adds	r3, #2
 8004160:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	005a      	lsls	r2, r3, #1
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	4413      	add	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	dd09      	ble.n	8004182 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800416e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004170:	3b01      	subs	r3, #1
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	4413      	add	r3, r2
 800417a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3302      	adds	r3, #2
 8004180:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8004182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	429a      	cmp	r2, r3
 8004188:	da99      	bge.n	80040be <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800418a:	bf00      	nop
 800418c:	372c      	adds	r7, #44	; 0x2c
 800418e:	46bd      	mov	sp, r7
 8004190:	bd90      	pop	{r4, r7, pc}

08004192 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8004192:	b590      	push	{r4, r7, lr}
 8004194:	b089      	sub	sp, #36	; 0x24
 8004196:	af02      	add	r7, sp, #8
 8004198:	4604      	mov	r4, r0
 800419a:	4608      	mov	r0, r1
 800419c:	4611      	mov	r1, r2
 800419e:	461a      	mov	r2, r3
 80041a0:	4623      	mov	r3, r4
 80041a2:	80fb      	strh	r3, [r7, #6]
 80041a4:	4603      	mov	r3, r0
 80041a6:	80bb      	strh	r3, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	807b      	strh	r3, [r7, #2]
 80041ac:	4613      	mov	r3, r2
 80041ae:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80041b8:	2300      	movs	r3, #0
 80041ba:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80041c4:	2300      	movs	r3, #0
 80041c6:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80041c8:	2300      	movs	r3, #0
 80041ca:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80041cc:	887a      	ldrh	r2, [r7, #2]
 80041ce:	88fb      	ldrh	r3, [r7, #6]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	da01      	bge.n	80041de <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 80041da:	2301      	movs	r3, #1
 80041dc:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80041de:	2300      	movs	r3, #0
 80041e0:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80041e2:	883a      	ldrh	r2, [r7, #0]
 80041e4:	88bb      	ldrh	r3, [r7, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	da01      	bge.n	80041f4 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80041f0:	2301      	movs	r3, #1
 80041f2:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80041fa:	887a      	ldrh	r2, [r7, #2]
 80041fc:	88fb      	ldrh	r3, [r7, #6]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8004202:	88fb      	ldrh	r3, [r7, #6]
 8004204:	823b      	strh	r3, [r7, #16]
 8004206:	e005      	b.n	8004214 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8004214:	7cbb      	ldrb	r3, [r7, #18]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d106      	bne.n	8004228 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 800421a:	883a      	ldrh	r2, [r7, #0]
 800421c:	88bb      	ldrh	r3, [r7, #4]
 800421e:	1ad3      	subs	r3, r2, r3
 8004220:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8004222:	88bb      	ldrh	r3, [r7, #4]
 8004224:	81fb      	strh	r3, [r7, #14]
 8004226:	e005      	b.n	8004234 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8004228:	88ba      	ldrh	r2, [r7, #4]
 800422a:	883b      	ldrh	r3, [r7, #0]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8004230:	883b      	ldrh	r3, [r7, #0]
 8004232:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8004234:	8abc      	ldrh	r4, [r7, #20]
 8004236:	8afa      	ldrh	r2, [r7, #22]
 8004238:	89f9      	ldrh	r1, [r7, #14]
 800423a:	8a38      	ldrh	r0, [r7, #16]
 800423c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4623      	mov	r3, r4
 8004242:	f000 fc9d 	bl	8004b80 <ILI9341_Draw_Rectangle>
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	bd90      	pop	{r4, r7, pc}
	...

08004250 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b089      	sub	sp, #36	; 0x24
 8004254:	af02      	add	r7, sp, #8
 8004256:	4604      	mov	r4, r0
 8004258:	4608      	mov	r0, r1
 800425a:	4611      	mov	r1, r2
 800425c:	461a      	mov	r2, r3
 800425e:	4623      	mov	r3, r4
 8004260:	71fb      	strb	r3, [r7, #7]
 8004262:	4603      	mov	r3, r0
 8004264:	80bb      	strh	r3, [r7, #4]
 8004266:	460b      	mov	r3, r1
 8004268:	807b      	strh	r3, [r7, #2]
 800426a:	4613      	mov	r3, r2
 800426c:	803b      	strh	r3, [r7, #0]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b1f      	cmp	r3, #31
 8004276:	d802      	bhi.n	800427e <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8004278:	2300      	movs	r3, #0
 800427a:	71fb      	strb	r3, [r7, #7]
 800427c:	e002      	b.n	8004284 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 800427e:	7dfb      	ldrb	r3, [r7, #23]
 8004280:	3b20      	subs	r3, #32
 8004282:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8004284:	2300      	movs	r3, #0
 8004286:	753b      	strb	r3, [r7, #20]
 8004288:	e012      	b.n	80042b0 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 800428a:	7dfa      	ldrb	r2, [r7, #23]
 800428c:	7d38      	ldrb	r0, [r7, #20]
 800428e:	7d39      	ldrb	r1, [r7, #20]
 8004290:	4c38      	ldr	r4, [pc, #224]	; (8004374 <ILI9341_Draw_Char+0x124>)
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4423      	add	r3, r4
 800429c:	4403      	add	r3, r0
 800429e:	781a      	ldrb	r2, [r3, #0]
 80042a0:	f107 0318 	add.w	r3, r7, #24
 80042a4:	440b      	add	r3, r1
 80042a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80042aa:	7d3b      	ldrb	r3, [r7, #20]
 80042ac:	3301      	adds	r3, #1
 80042ae:	753b      	strb	r3, [r7, #20]
 80042b0:	7d3b      	ldrb	r3, [r7, #20]
 80042b2:	2b05      	cmp	r3, #5
 80042b4:	d9e9      	bls.n	800428a <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80042b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042b8:	461a      	mov	r2, r3
 80042ba:	0052      	lsls	r2, r2, #1
 80042bc:	4413      	add	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042c4:	00db      	lsls	r3, r3, #3
 80042c6:	b29c      	uxth	r4, r3
 80042c8:	8879      	ldrh	r1, [r7, #2]
 80042ca:	88b8      	ldrh	r0, [r7, #4]
 80042cc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4623      	mov	r3, r4
 80042d2:	f000 fc55 	bl	8004b80 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 80042d6:	2300      	movs	r3, #0
 80042d8:	757b      	strb	r3, [r7, #21]
 80042da:	e044      	b.n	8004366 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 80042dc:	2300      	movs	r3, #0
 80042de:	75bb      	strb	r3, [r7, #22]
 80042e0:	e03b      	b.n	800435a <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 80042e2:	7d7b      	ldrb	r3, [r7, #21]
 80042e4:	f107 0218 	add.w	r2, r7, #24
 80042e8:	4413      	add	r3, r2
 80042ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80042ee:	461a      	mov	r2, r3
 80042f0:	7dbb      	ldrb	r3, [r7, #22]
 80042f2:	fa42 f303 	asr.w	r3, r2, r3
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d02a      	beq.n	8004354 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80042fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004300:	2b01      	cmp	r3, #1
 8004302:	d10e      	bne.n	8004322 <ILI9341_Draw_Char+0xd2>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8004304:	7d7b      	ldrb	r3, [r7, #21]
 8004306:	b29a      	uxth	r2, r3
 8004308:	88bb      	ldrh	r3, [r7, #4]
 800430a:	4413      	add	r3, r2
 800430c:	b298      	uxth	r0, r3
 800430e:	7dbb      	ldrb	r3, [r7, #22]
 8004310:	b29a      	uxth	r2, r3
 8004312:	887b      	ldrh	r3, [r7, #2]
 8004314:	4413      	add	r3, r2
 8004316:	b29b      	uxth	r3, r3
 8004318:	883a      	ldrh	r2, [r7, #0]
 800431a:	4619      	mov	r1, r3
 800431c:	f000 fb56 	bl	80049cc <ILI9341_Draw_Pixel>
 8004320:	e018      	b.n	8004354 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8004322:	7d7b      	ldrb	r3, [r7, #21]
 8004324:	b29b      	uxth	r3, r3
 8004326:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004328:	fb12 f303 	smulbb	r3, r2, r3
 800432c:	b29a      	uxth	r2, r3
 800432e:	88bb      	ldrh	r3, [r7, #4]
 8004330:	4413      	add	r3, r2
 8004332:	b298      	uxth	r0, r3
 8004334:	7dbb      	ldrb	r3, [r7, #22]
 8004336:	b29b      	uxth	r3, r3
 8004338:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800433a:	fb12 f303 	smulbb	r3, r2, r3
 800433e:	b29a      	uxth	r2, r3
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	4413      	add	r3, r2
 8004344:	b299      	uxth	r1, r3
 8004346:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8004348:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800434a:	883b      	ldrh	r3, [r7, #0]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	4623      	mov	r3, r4
 8004350:	f000 fc16 	bl	8004b80 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8004354:	7dbb      	ldrb	r3, [r7, #22]
 8004356:	3301      	adds	r3, #1
 8004358:	75bb      	strb	r3, [r7, #22]
 800435a:	7dbb      	ldrb	r3, [r7, #22]
 800435c:	2b07      	cmp	r3, #7
 800435e:	d9c0      	bls.n	80042e2 <ILI9341_Draw_Char+0x92>
    for (j=0; j<CHAR_WIDTH; j++) {
 8004360:	7d7b      	ldrb	r3, [r7, #21]
 8004362:	3301      	adds	r3, #1
 8004364:	757b      	strb	r3, [r7, #21]
 8004366:	7d7b      	ldrb	r3, [r7, #21]
 8004368:	2b05      	cmp	r3, #5
 800436a:	d9b7      	bls.n	80042dc <ILI9341_Draw_Char+0x8c>
							}
            }						
        }
    }
}
 800436c:	bf00      	nop
 800436e:	371c      	adds	r7, #28
 8004370:	46bd      	mov	sp, r7
 8004372:	bd90      	pop	{r4, r7, pc}
 8004374:	0800882c 	.word	0x0800882c

08004378 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint16_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b087      	sub	sp, #28
 800437c:	af02      	add	r7, sp, #8
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	4608      	mov	r0, r1
 8004382:	4611      	mov	r1, r2
 8004384:	461a      	mov	r2, r3
 8004386:	4603      	mov	r3, r0
 8004388:	817b      	strh	r3, [r7, #10]
 800438a:	460b      	mov	r3, r1
 800438c:	813b      	strh	r3, [r7, #8]
 800438e:	4613      	mov	r3, r2
 8004390:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8004392:	e016      	b.n	80043c2 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	60fa      	str	r2, [r7, #12]
 800439a:	7818      	ldrb	r0, [r3, #0]
 800439c:	88fc      	ldrh	r4, [r7, #6]
 800439e:	893a      	ldrh	r2, [r7, #8]
 80043a0:	8979      	ldrh	r1, [r7, #10]
 80043a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043a4:	9301      	str	r3, [sp, #4]
 80043a6:	8c3b      	ldrh	r3, [r7, #32]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	4623      	mov	r3, r4
 80043ac:	f7ff ff50 	bl	8004250 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80043b0:	8c3b      	ldrh	r3, [r7, #32]
 80043b2:	461a      	mov	r2, r3
 80043b4:	0052      	lsls	r2, r2, #1
 80043b6:	4413      	add	r3, r2
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	897b      	ldrh	r3, [r7, #10]
 80043be:	4413      	add	r3, r2
 80043c0:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e4      	bne.n	8004394 <ILI9341_Draw_Text+0x1c>
    }
}
 80043ca:	bf00      	nop
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd90      	pop	{r4, r7, pc}
	...

080043d4 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 80043d8:	f7fc fd86 	bl	8000ee8 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 80043dc:	f7fc f908 	bl	80005f0 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 80043e0:	2200      	movs	r2, #0
 80043e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043e6:	4802      	ldr	r0, [pc, #8]	; (80043f0 <ILI9341_SPI_Init+0x1c>)
 80043e8:	f7fd fac0 	bl	800196c <HAL_GPIO_WritePin>
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	40020800 	.word	0x40020800

080043f4 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80043fe:	1df9      	adds	r1, r7, #7
 8004400:	2301      	movs	r3, #1
 8004402:	2201      	movs	r2, #1
 8004404:	4803      	ldr	r0, [pc, #12]	; (8004414 <ILI9341_SPI_Send+0x20>)
 8004406:	f7fe fcb3 	bl	8002d70 <HAL_SPI_Transmit>
}
 800440a:	bf00      	nop
 800440c:	3708      	adds	r7, #8
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	20000224 	.word	0x20000224

08004418 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	4603      	mov	r3, r0
 8004420:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004422:	2200      	movs	r2, #0
 8004424:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004428:	480b      	ldr	r0, [pc, #44]	; (8004458 <ILI9341_Write_Command+0x40>)
 800442a:	f7fd fa9f 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800442e:	2200      	movs	r2, #0
 8004430:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004434:	4808      	ldr	r0, [pc, #32]	; (8004458 <ILI9341_Write_Command+0x40>)
 8004436:	f7fd fa99 	bl	800196c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ffd9 	bl	80043f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004442:	2201      	movs	r2, #1
 8004444:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004448:	4803      	ldr	r0, [pc, #12]	; (8004458 <ILI9341_Write_Command+0x40>)
 800444a:	f7fd fa8f 	bl	800196c <HAL_GPIO_WritePin>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	40020800 	.word	0x40020800

0800445c <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	4603      	mov	r3, r0
 8004464:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004466:	2201      	movs	r2, #1
 8004468:	f44f 7100 	mov.w	r1, #512	; 0x200
 800446c:	480b      	ldr	r0, [pc, #44]	; (800449c <ILI9341_Write_Data+0x40>)
 800446e:	f7fd fa7d 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004472:	2200      	movs	r2, #0
 8004474:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004478:	4808      	ldr	r0, [pc, #32]	; (800449c <ILI9341_Write_Data+0x40>)
 800447a:	f7fd fa77 	bl	800196c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ffb7 	bl	80043f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004486:	2201      	movs	r2, #1
 8004488:	f44f 7180 	mov.w	r1, #256	; 0x100
 800448c:	4803      	ldr	r0, [pc, #12]	; (800449c <ILI9341_Write_Data+0x40>)
 800448e:	f7fd fa6d 	bl	800196c <HAL_GPIO_WritePin>
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40020800 	.word	0x40020800

080044a0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80044a0:	b590      	push	{r4, r7, lr}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4604      	mov	r4, r0
 80044a8:	4608      	mov	r0, r1
 80044aa:	4611      	mov	r1, r2
 80044ac:	461a      	mov	r2, r3
 80044ae:	4623      	mov	r3, r4
 80044b0:	80fb      	strh	r3, [r7, #6]
 80044b2:	4603      	mov	r3, r0
 80044b4:	80bb      	strh	r3, [r7, #4]
 80044b6:	460b      	mov	r3, r1
 80044b8:	807b      	strh	r3, [r7, #2]
 80044ba:	4613      	mov	r3, r2
 80044bc:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80044be:	202a      	movs	r0, #42	; 0x2a
 80044c0:	f7ff ffaa 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80044c4:	88fb      	ldrh	r3, [r7, #6]
 80044c6:	0a1b      	lsrs	r3, r3, #8
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff ffc5 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 80044d2:	88fb      	ldrh	r3, [r7, #6]
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7ff ffc0 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4618      	mov	r0, r3
 80044e6:	f7ff ffb9 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff ffb4 	bl	800445c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80044f4:	202b      	movs	r0, #43	; 0x2b
 80044f6:	f7ff ff8f 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80044fa:	88bb      	ldrh	r3, [r7, #4]
 80044fc:	0a1b      	lsrs	r3, r3, #8
 80044fe:	b29b      	uxth	r3, r3
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ffaa 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8004508:	88bb      	ldrh	r3, [r7, #4]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ffa5 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8004512:	883b      	ldrh	r3, [r7, #0]
 8004514:	0a1b      	lsrs	r3, r3, #8
 8004516:	b29b      	uxth	r3, r3
 8004518:	b2db      	uxtb	r3, r3
 800451a:	4618      	mov	r0, r3
 800451c:	f7ff ff9e 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8004520:	883b      	ldrh	r3, [r7, #0]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4618      	mov	r0, r3
 8004526:	f7ff ff99 	bl	800445c <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800452a:	202c      	movs	r0, #44	; 0x2c
 800452c:	f7ff ff74 	bl	8004418 <ILI9341_Write_Command>
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	bd90      	pop	{r4, r7, pc}

08004538 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800453c:	2201      	movs	r2, #1
 800453e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004542:	480b      	ldr	r0, [pc, #44]	; (8004570 <ILI9341_Reset+0x38>)
 8004544:	f7fd fa12 	bl	800196c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8004548:	20c8      	movs	r0, #200	; 0xc8
 800454a:	f7fc ff45 	bl	80013d8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800454e:	2200      	movs	r2, #0
 8004550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004554:	4806      	ldr	r0, [pc, #24]	; (8004570 <ILI9341_Reset+0x38>)
 8004556:	f7fd fa09 	bl	800196c <HAL_GPIO_WritePin>
HAL_Delay(200);
 800455a:	20c8      	movs	r0, #200	; 0xc8
 800455c:	f7fc ff3c 	bl	80013d8 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8004560:	2201      	movs	r2, #1
 8004562:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004566:	4802      	ldr	r0, [pc, #8]	; (8004570 <ILI9341_Reset+0x38>)
 8004568:	f7fd fa00 	bl	800196c <HAL_GPIO_WritePin>
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40020800 	.word	0x40020800

08004574 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 800457e:	79fb      	ldrb	r3, [r7, #7]
 8004580:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8004582:	2036      	movs	r0, #54	; 0x36
 8004584:	f7ff ff48 	bl	8004418 <ILI9341_Write_Command>
HAL_Delay(1);
 8004588:	2001      	movs	r0, #1
 800458a:	f7fc ff25 	bl	80013d8 <HAL_Delay>
	
switch(screen_rotation) 
 800458e:	7bfb      	ldrb	r3, [r7, #15]
 8004590:	2b03      	cmp	r3, #3
 8004592:	d837      	bhi.n	8004604 <ILI9341_Set_Rotation+0x90>
 8004594:	a201      	add	r2, pc, #4	; (adr r2, 800459c <ILI9341_Set_Rotation+0x28>)
 8004596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459a:	bf00      	nop
 800459c:	080045ad 	.word	0x080045ad
 80045a0:	080045c3 	.word	0x080045c3
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045ef 	.word	0x080045ef
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80045ac:	2048      	movs	r0, #72	; 0x48
 80045ae:	f7ff ff55 	bl	800445c <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80045b2:	4b17      	ldr	r3, [pc, #92]	; (8004610 <ILI9341_Set_Rotation+0x9c>)
 80045b4:	22f0      	movs	r2, #240	; 0xf0
 80045b6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80045b8:	4b16      	ldr	r3, [pc, #88]	; (8004614 <ILI9341_Set_Rotation+0xa0>)
 80045ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045be:	801a      	strh	r2, [r3, #0]
			break;
 80045c0:	e021      	b.n	8004606 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80045c2:	2028      	movs	r0, #40	; 0x28
 80045c4:	f7ff ff4a 	bl	800445c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <ILI9341_Set_Rotation+0x9c>)
 80045ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045ce:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80045d0:	4b10      	ldr	r3, [pc, #64]	; (8004614 <ILI9341_Set_Rotation+0xa0>)
 80045d2:	22f0      	movs	r2, #240	; 0xf0
 80045d4:	801a      	strh	r2, [r3, #0]
			break;
 80045d6:	e016      	b.n	8004606 <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80045d8:	2088      	movs	r0, #136	; 0x88
 80045da:	f7ff ff3f 	bl	800445c <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80045de:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <ILI9341_Set_Rotation+0x9c>)
 80045e0:	22f0      	movs	r2, #240	; 0xf0
 80045e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80045e4:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <ILI9341_Set_Rotation+0xa0>)
 80045e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045ea:	801a      	strh	r2, [r3, #0]
			break;
 80045ec:	e00b      	b.n	8004606 <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80045ee:	20e8      	movs	r0, #232	; 0xe8
 80045f0:	f7ff ff34 	bl	800445c <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80045f4:	4b06      	ldr	r3, [pc, #24]	; (8004610 <ILI9341_Set_Rotation+0x9c>)
 80045f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80045fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80045fc:	4b05      	ldr	r3, [pc, #20]	; (8004614 <ILI9341_Set_Rotation+0xa0>)
 80045fe:	22f0      	movs	r2, #240	; 0xf0
 8004600:	801a      	strh	r2, [r3, #0]
			break;
 8004602:	e000      	b.n	8004606 <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8004604:	bf00      	nop
	}
}
 8004606:	bf00      	nop
 8004608:	3710      	adds	r7, #16
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	2000000c 	.word	0x2000000c
 8004614:	2000000a 	.word	0x2000000a

08004618 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 800461c:	2201      	movs	r2, #1
 800461e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004622:	4802      	ldr	r0, [pc, #8]	; (800462c <ILI9341_Enable+0x14>)
 8004624:	f7fd f9a2 	bl	800196c <HAL_GPIO_WritePin>
}
 8004628:	bf00      	nop
 800462a:	bd80      	pop	{r7, pc}
 800462c:	40020800 	.word	0x40020800

08004630 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8004634:	f7ff fff0 	bl	8004618 <ILI9341_Enable>
ILI9341_SPI_Init();
 8004638:	f7ff fecc 	bl	80043d4 <ILI9341_SPI_Init>
ILI9341_Reset();
 800463c:	f7ff ff7c 	bl	8004538 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8004640:	2001      	movs	r0, #1
 8004642:	f7ff fee9 	bl	8004418 <ILI9341_Write_Command>
HAL_Delay(1000);
 8004646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800464a:	f7fc fec5 	bl	80013d8 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 800464e:	20cb      	movs	r0, #203	; 0xcb
 8004650:	f7ff fee2 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8004654:	2039      	movs	r0, #57	; 0x39
 8004656:	f7ff ff01 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 800465a:	202c      	movs	r0, #44	; 0x2c
 800465c:	f7ff fefe 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004660:	2000      	movs	r0, #0
 8004662:	f7ff fefb 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8004666:	2034      	movs	r0, #52	; 0x34
 8004668:	f7ff fef8 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 800466c:	2002      	movs	r0, #2
 800466e:	f7ff fef5 	bl	800445c <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8004672:	20cf      	movs	r0, #207	; 0xcf
 8004674:	f7ff fed0 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004678:	2000      	movs	r0, #0
 800467a:	f7ff feef 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 800467e:	20c1      	movs	r0, #193	; 0xc1
 8004680:	f7ff feec 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8004684:	2030      	movs	r0, #48	; 0x30
 8004686:	f7ff fee9 	bl	800445c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 800468a:	20e8      	movs	r0, #232	; 0xe8
 800468c:	f7ff fec4 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8004690:	2085      	movs	r0, #133	; 0x85
 8004692:	f7ff fee3 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8004696:	2000      	movs	r0, #0
 8004698:	f7ff fee0 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 800469c:	2078      	movs	r0, #120	; 0x78
 800469e:	f7ff fedd 	bl	800445c <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80046a2:	20ea      	movs	r0, #234	; 0xea
 80046a4:	f7ff feb8 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7ff fed7 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80046ae:	2000      	movs	r0, #0
 80046b0:	f7ff fed4 	bl	800445c <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80046b4:	20ed      	movs	r0, #237	; 0xed
 80046b6:	f7ff feaf 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80046ba:	2064      	movs	r0, #100	; 0x64
 80046bc:	f7ff fece 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80046c0:	2003      	movs	r0, #3
 80046c2:	f7ff fecb 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80046c6:	2012      	movs	r0, #18
 80046c8:	f7ff fec8 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80046cc:	2081      	movs	r0, #129	; 0x81
 80046ce:	f7ff fec5 	bl	800445c <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80046d2:	20f7      	movs	r0, #247	; 0xf7
 80046d4:	f7ff fea0 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 80046d8:	2020      	movs	r0, #32
 80046da:	f7ff febf 	bl	800445c <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 80046de:	20c0      	movs	r0, #192	; 0xc0
 80046e0:	f7ff fe9a 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 80046e4:	2023      	movs	r0, #35	; 0x23
 80046e6:	f7ff feb9 	bl	800445c <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 80046ea:	20c1      	movs	r0, #193	; 0xc1
 80046ec:	f7ff fe94 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 80046f0:	2010      	movs	r0, #16
 80046f2:	f7ff feb3 	bl	800445c <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 80046f6:	20c5      	movs	r0, #197	; 0xc5
 80046f8:	f7ff fe8e 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80046fc:	203e      	movs	r0, #62	; 0x3e
 80046fe:	f7ff fead 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8004702:	2028      	movs	r0, #40	; 0x28
 8004704:	f7ff feaa 	bl	800445c <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8004708:	20c7      	movs	r0, #199	; 0xc7
 800470a:	f7ff fe85 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 800470e:	2086      	movs	r0, #134	; 0x86
 8004710:	f7ff fea4 	bl	800445c <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8004714:	2036      	movs	r0, #54	; 0x36
 8004716:	f7ff fe7f 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 800471a:	2048      	movs	r0, #72	; 0x48
 800471c:	f7ff fe9e 	bl	800445c <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8004720:	203a      	movs	r0, #58	; 0x3a
 8004722:	f7ff fe79 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8004726:	2055      	movs	r0, #85	; 0x55
 8004728:	f7ff fe98 	bl	800445c <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 800472c:	20b1      	movs	r0, #177	; 0xb1
 800472e:	f7ff fe73 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8004732:	2000      	movs	r0, #0
 8004734:	f7ff fe92 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8004738:	2018      	movs	r0, #24
 800473a:	f7ff fe8f 	bl	800445c <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 800473e:	20b6      	movs	r0, #182	; 0xb6
 8004740:	f7ff fe6a 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8004744:	2008      	movs	r0, #8
 8004746:	f7ff fe89 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 800474a:	2082      	movs	r0, #130	; 0x82
 800474c:	f7ff fe86 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8004750:	2027      	movs	r0, #39	; 0x27
 8004752:	f7ff fe83 	bl	800445c <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8004756:	20f2      	movs	r0, #242	; 0xf2
 8004758:	f7ff fe5e 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800475c:	2000      	movs	r0, #0
 800475e:	f7ff fe7d 	bl	800445c <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8004762:	2026      	movs	r0, #38	; 0x26
 8004764:	f7ff fe58 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8004768:	2001      	movs	r0, #1
 800476a:	f7ff fe77 	bl	800445c <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 800476e:	20e0      	movs	r0, #224	; 0xe0
 8004770:	f7ff fe52 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8004774:	200f      	movs	r0, #15
 8004776:	f7ff fe71 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800477a:	2031      	movs	r0, #49	; 0x31
 800477c:	f7ff fe6e 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8004780:	202b      	movs	r0, #43	; 0x2b
 8004782:	f7ff fe6b 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004786:	200c      	movs	r0, #12
 8004788:	f7ff fe68 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 800478c:	200e      	movs	r0, #14
 800478e:	f7ff fe65 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8004792:	2008      	movs	r0, #8
 8004794:	f7ff fe62 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8004798:	204e      	movs	r0, #78	; 0x4e
 800479a:	f7ff fe5f 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 800479e:	20f1      	movs	r0, #241	; 0xf1
 80047a0:	f7ff fe5c 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80047a4:	2037      	movs	r0, #55	; 0x37
 80047a6:	f7ff fe59 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80047aa:	2007      	movs	r0, #7
 80047ac:	f7ff fe56 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80047b0:	2010      	movs	r0, #16
 80047b2:	f7ff fe53 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80047b6:	2003      	movs	r0, #3
 80047b8:	f7ff fe50 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80047bc:	200e      	movs	r0, #14
 80047be:	f7ff fe4d 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80047c2:	2009      	movs	r0, #9
 80047c4:	f7ff fe4a 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80047c8:	2000      	movs	r0, #0
 80047ca:	f7ff fe47 	bl	800445c <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80047ce:	20e1      	movs	r0, #225	; 0xe1
 80047d0:	f7ff fe22 	bl	8004418 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80047d4:	2000      	movs	r0, #0
 80047d6:	f7ff fe41 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80047da:	200e      	movs	r0, #14
 80047dc:	f7ff fe3e 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 80047e0:	2014      	movs	r0, #20
 80047e2:	f7ff fe3b 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80047e6:	2003      	movs	r0, #3
 80047e8:	f7ff fe38 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 80047ec:	2011      	movs	r0, #17
 80047ee:	f7ff fe35 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80047f2:	2007      	movs	r0, #7
 80047f4:	f7ff fe32 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80047f8:	2031      	movs	r0, #49	; 0x31
 80047fa:	f7ff fe2f 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80047fe:	20c1      	movs	r0, #193	; 0xc1
 8004800:	f7ff fe2c 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8004804:	2048      	movs	r0, #72	; 0x48
 8004806:	f7ff fe29 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800480a:	2008      	movs	r0, #8
 800480c:	f7ff fe26 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004810:	200f      	movs	r0, #15
 8004812:	f7ff fe23 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8004816:	200c      	movs	r0, #12
 8004818:	f7ff fe20 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 800481c:	2031      	movs	r0, #49	; 0x31
 800481e:	f7ff fe1d 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8004822:	2036      	movs	r0, #54	; 0x36
 8004824:	f7ff fe1a 	bl	800445c <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8004828:	200f      	movs	r0, #15
 800482a:	f7ff fe17 	bl	800445c <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 800482e:	2011      	movs	r0, #17
 8004830:	f7ff fdf2 	bl	8004418 <ILI9341_Write_Command>
HAL_Delay(120);
 8004834:	2078      	movs	r0, #120	; 0x78
 8004836:	f7fc fdcf 	bl	80013d8 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 800483a:	2029      	movs	r0, #41	; 0x29
 800483c:	f7ff fdec 	bl	8004418 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8004840:	2000      	movs	r0, #0
 8004842:	f7ff fe97 	bl	8004574 <ILI9341_Set_Rotation>
}
 8004846:	bf00      	nop
 8004848:	bd80      	pop	{r7, pc}
	...

0800484c <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 800484c:	b5b0      	push	{r4, r5, r7, lr}
 800484e:	b08c      	sub	sp, #48	; 0x30
 8004850:	af00      	add	r7, sp, #0
 8004852:	4603      	mov	r3, r0
 8004854:	6039      	str	r1, [r7, #0]
 8004856:	80fb      	strh	r3, [r7, #6]
 8004858:	466b      	mov	r3, sp
 800485a:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 800485c:	2300      	movs	r3, #0
 800485e:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004868:	d202      	bcs.n	8004870 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
 800486e:	e002      	b.n	8004876 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8004870:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004874:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004876:	2201      	movs	r2, #1
 8004878:	f44f 7100 	mov.w	r1, #512	; 0x200
 800487c:	483e      	ldr	r0, [pc, #248]	; (8004978 <ILI9341_Draw_Colour_Burst+0x12c>)
 800487e:	f7fd f875 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004882:	2200      	movs	r2, #0
 8004884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004888:	483b      	ldr	r0, [pc, #236]	; (8004978 <ILI9341_Draw_Colour_Burst+0x12c>)
 800488a:	f7fd f86f 	bl	800196c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 800488e:	88fb      	ldrh	r3, [r7, #6]
 8004890:	0a1b      	lsrs	r3, r3, #8
 8004892:	b29b      	uxth	r3, r3
 8004894:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8004898:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800489a:	4603      	mov	r3, r0
 800489c:	3b01      	subs	r3, #1
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	4601      	mov	r1, r0
 80048a2:	f04f 0200 	mov.w	r2, #0
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	00d4      	lsls	r4, r2, #3
 80048b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80048b4:	00cb      	lsls	r3, r1, #3
 80048b6:	4601      	mov	r1, r0
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	f04f 0400 	mov.w	r4, #0
 80048c4:	00d4      	lsls	r4, r2, #3
 80048c6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80048ca:	00cb      	lsls	r3, r1, #3
 80048cc:	1dc3      	adds	r3, r0, #7
 80048ce:	08db      	lsrs	r3, r3, #3
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	ebad 0d03 	sub.w	sp, sp, r3
 80048d6:	466b      	mov	r3, sp
 80048d8:	3300      	adds	r3, #0
 80048da:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80048dc:	2300      	movs	r3, #0
 80048de:	62bb      	str	r3, [r7, #40]	; 0x28
 80048e0:	e00e      	b.n	8004900 <ILI9341_Draw_Colour_Burst+0xb4>
	{
		burst_buffer[j] = 	chifted;
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	4413      	add	r3, r2
 80048e8:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80048ec:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	3301      	adds	r3, #1
 80048f2:	88fa      	ldrh	r2, [r7, #6]
 80048f4:	b2d1      	uxtb	r1, r2
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80048fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048fc:	3302      	adds	r3, #2
 80048fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004904:	429a      	cmp	r2, r3
 8004906:	d3ec      	bcc.n	80048e2 <ILI9341_Draw_Colour_Burst+0x96>
	}

uint32_t Sending_Size = Size*2;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004912:	fbb2 f3f3 	udiv	r3, r2, r3
 8004916:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800491c:	fbb3 f2f2 	udiv	r2, r3, r2
 8004920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004922:	fb01 f202 	mul.w	r2, r1, r2
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d010      	beq.n	8004952 <ILI9341_Draw_Colour_Burst+0x106>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004930:	2300      	movs	r3, #0
 8004932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004934:	e009      	b.n	800494a <ILI9341_Draw_Colour_Burst+0xfe>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8004936:	69b9      	ldr	r1, [r7, #24]
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	b29a      	uxth	r2, r3
 800493c:	230a      	movs	r3, #10
 800493e:	480f      	ldr	r0, [pc, #60]	; (800497c <ILI9341_Draw_Colour_Burst+0x130>)
 8004940:	f7fe fa16 	bl	8002d70 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8004944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004946:	3301      	adds	r3, #1
 8004948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d3f1      	bcc.n	8004936 <ILI9341_Draw_Colour_Burst+0xea>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	b29a      	uxth	r2, r3
 8004958:	230a      	movs	r3, #10
 800495a:	4808      	ldr	r0, [pc, #32]	; (800497c <ILI9341_Draw_Colour_Burst+0x130>)
 800495c:	f7fe fa08 	bl	8002d70 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004960:	2201      	movs	r2, #1
 8004962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004966:	4804      	ldr	r0, [pc, #16]	; (8004978 <ILI9341_Draw_Colour_Burst+0x12c>)
 8004968:	f7fd f800 	bl	800196c <HAL_GPIO_WritePin>
 800496c:	46ad      	mov	sp, r5
}
 800496e:	bf00      	nop
 8004970:	3730      	adds	r7, #48	; 0x30
 8004972:	46bd      	mov	sp, r7
 8004974:	bdb0      	pop	{r4, r5, r7, pc}
 8004976:	bf00      	nop
 8004978:	40020800 	.word	0x40020800
 800497c:	20000224 	.word	0x20000224

08004980 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800498a:	4b0e      	ldr	r3, [pc, #56]	; (80049c4 <ILI9341_Fill_Screen+0x44>)
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29a      	uxth	r2, r3
 8004990:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <ILI9341_Fill_Screen+0x48>)
 8004992:	881b      	ldrh	r3, [r3, #0]
 8004994:	b29b      	uxth	r3, r3
 8004996:	2100      	movs	r1, #0
 8004998:	2000      	movs	r0, #0
 800499a:	f7ff fd81 	bl	80044a0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <ILI9341_Fill_Screen+0x44>)
 80049a0:	881b      	ldrh	r3, [r3, #0]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	461a      	mov	r2, r3
 80049a6:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <ILI9341_Fill_Screen+0x48>)
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	fb03 f302 	mul.w	r3, r3, r2
 80049b0:	461a      	mov	r2, r3
 80049b2:	88fb      	ldrh	r3, [r7, #6]
 80049b4:	4611      	mov	r1, r2
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7ff ff48 	bl	800484c <ILI9341_Draw_Colour_Burst>
}
 80049bc:	bf00      	nop
 80049be:	3708      	adds	r7, #8
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	2000000c 	.word	0x2000000c
 80049c8:	2000000a 	.word	0x2000000a

080049cc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b086      	sub	sp, #24
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	4603      	mov	r3, r0
 80049d4:	80fb      	strh	r3, [r7, #6]
 80049d6:	460b      	mov	r3, r1
 80049d8:	80bb      	strh	r3, [r7, #4]
 80049da:	4613      	mov	r3, r2
 80049dc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80049de:	4b64      	ldr	r3, [pc, #400]	; (8004b70 <ILI9341_Draw_Pixel+0x1a4>)
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	88fa      	ldrh	r2, [r7, #6]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	f080 80be 	bcs.w	8004b68 <ILI9341_Draw_Pixel+0x19c>
 80049ec:	4b61      	ldr	r3, [pc, #388]	; (8004b74 <ILI9341_Draw_Pixel+0x1a8>)
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	88ba      	ldrh	r2, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	f080 80b7 	bcs.w	8004b68 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80049fa:	2200      	movs	r2, #0
 80049fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a00:	485d      	ldr	r0, [pc, #372]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a02:	f7fc ffb3 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004a06:	2200      	movs	r2, #0
 8004a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a0c:	485a      	ldr	r0, [pc, #360]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a0e:	f7fc ffad 	bl	800196c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8004a12:	202a      	movs	r0, #42	; 0x2a
 8004a14:	f7ff fcee 	bl	80043f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a1e:	4856      	ldr	r0, [pc, #344]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a20:	f7fc ffa4 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8004a24:	2201      	movs	r2, #1
 8004a26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a2a:	4853      	ldr	r0, [pc, #332]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a2c:	f7fc ff9e 	bl	800196c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a36:	4850      	ldr	r0, [pc, #320]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a38:	f7fc ff98 	bl	800196c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	753b      	strb	r3, [r7, #20]
 8004a46:	88fb      	ldrh	r3, [r7, #6]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	757b      	strb	r3, [r7, #21]
 8004a4c:	88fb      	ldrh	r3, [r7, #6]
 8004a4e:	3301      	adds	r3, #1
 8004a50:	121b      	asrs	r3, r3, #8
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	75bb      	strb	r3, [r7, #22]
 8004a56:	88fb      	ldrh	r3, [r7, #6]
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8004a60:	f107 0114 	add.w	r1, r7, #20
 8004a64:	2301      	movs	r3, #1
 8004a66:	2204      	movs	r2, #4
 8004a68:	4844      	ldr	r0, [pc, #272]	; (8004b7c <ILI9341_Draw_Pixel+0x1b0>)
 8004a6a:	f7fe f981 	bl	8002d70 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a74:	4840      	ldr	r0, [pc, #256]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a76:	f7fc ff79 	bl	800196c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a80:	483d      	ldr	r0, [pc, #244]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a82:	f7fc ff73 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004a86:	2200      	movs	r2, #0
 8004a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a8c:	483a      	ldr	r0, [pc, #232]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004a8e:	f7fc ff6d 	bl	800196c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8004a92:	202b      	movs	r0, #43	; 0x2b
 8004a94:	f7ff fcae 	bl	80043f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004a9e:	4836      	ldr	r0, [pc, #216]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004aa0:	f7fc ff64 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004aaa:	4833      	ldr	r0, [pc, #204]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004aac:	f7fc ff5e 	bl	800196c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ab6:	4830      	ldr	r0, [pc, #192]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004ab8:	f7fc ff58 	bl	800196c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8004abc:	88bb      	ldrh	r3, [r7, #4]
 8004abe:	0a1b      	lsrs	r3, r3, #8
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	b2db      	uxtb	r3, r3
 8004ac4:	743b      	strb	r3, [r7, #16]
 8004ac6:	88bb      	ldrh	r3, [r7, #4]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	747b      	strb	r3, [r7, #17]
 8004acc:	88bb      	ldrh	r3, [r7, #4]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	121b      	asrs	r3, r3, #8
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	74bb      	strb	r3, [r7, #18]
 8004ad6:	88bb      	ldrh	r3, [r7, #4]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8004ae0:	f107 0110 	add.w	r1, r7, #16
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	4824      	ldr	r0, [pc, #144]	; (8004b7c <ILI9341_Draw_Pixel+0x1b0>)
 8004aea:	f7fe f941 	bl	8002d70 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004aee:	2201      	movs	r2, #1
 8004af0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004af4:	4820      	ldr	r0, [pc, #128]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004af6:	f7fc ff39 	bl	800196c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8004afa:	2200      	movs	r2, #0
 8004afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b00:	481d      	ldr	r0, [pc, #116]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004b02:	f7fc ff33 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8004b06:	2200      	movs	r2, #0
 8004b08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b0c:	481a      	ldr	r0, [pc, #104]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004b0e:	f7fc ff2d 	bl	800196c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8004b12:	202c      	movs	r0, #44	; 0x2c
 8004b14:	f7ff fc6e 	bl	80043f4 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b1e:	4816      	ldr	r0, [pc, #88]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004b20:	f7fc ff24 	bl	800196c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8004b24:	2201      	movs	r2, #1
 8004b26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b2a:	4813      	ldr	r0, [pc, #76]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004b2c:	f7fc ff1e 	bl	800196c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b36:	4810      	ldr	r0, [pc, #64]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004b38:	f7fc ff18 	bl	800196c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8004b3c:	887b      	ldrh	r3, [r7, #2]
 8004b3e:	0a1b      	lsrs	r3, r3, #8
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	733b      	strb	r3, [r7, #12]
 8004b46:	887b      	ldrh	r3, [r7, #2]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8004b4c:	f107 010c 	add.w	r1, r7, #12
 8004b50:	2301      	movs	r3, #1
 8004b52:	2202      	movs	r2, #2
 8004b54:	4809      	ldr	r0, [pc, #36]	; (8004b7c <ILI9341_Draw_Pixel+0x1b0>)
 8004b56:	f7fe f90b 	bl	8002d70 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b60:	4805      	ldr	r0, [pc, #20]	; (8004b78 <ILI9341_Draw_Pixel+0x1ac>)
 8004b62:	f7fc ff03 	bl	800196c <HAL_GPIO_WritePin>
 8004b66:	e000      	b.n	8004b6a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8004b68:	bf00      	nop
	
}
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	2000000c 	.word	0x2000000c
 8004b74:	2000000a 	.word	0x2000000a
 8004b78:	40020800 	.word	0x40020800
 8004b7c:	20000224 	.word	0x20000224

08004b80 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4604      	mov	r4, r0
 8004b88:	4608      	mov	r0, r1
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4623      	mov	r3, r4
 8004b90:	80fb      	strh	r3, [r7, #6]
 8004b92:	4603      	mov	r3, r0
 8004b94:	80bb      	strh	r3, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	807b      	strh	r3, [r7, #2]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8004b9e:	4b25      	ldr	r3, [pc, #148]	; (8004c34 <ILI9341_Draw_Rectangle+0xb4>)
 8004ba0:	881b      	ldrh	r3, [r3, #0]
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	88fa      	ldrh	r2, [r7, #6]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d23f      	bcs.n	8004c2a <ILI9341_Draw_Rectangle+0xaa>
 8004baa:	4b23      	ldr	r3, [pc, #140]	; (8004c38 <ILI9341_Draw_Rectangle+0xb8>)
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	b29b      	uxth	r3, r3
 8004bb0:	88ba      	ldrh	r2, [r7, #4]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d239      	bcs.n	8004c2a <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 8004bb6:	88fa      	ldrh	r2, [r7, #6]
 8004bb8:	887b      	ldrh	r3, [r7, #2]
 8004bba:	4413      	add	r3, r2
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <ILI9341_Draw_Rectangle+0xb4>)
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	b292      	uxth	r2, r2
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	db05      	blt.n	8004bd4 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8004bc8:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <ILI9341_Draw_Rectangle+0xb4>)
 8004bca:	881b      	ldrh	r3, [r3, #0]
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	88fb      	ldrh	r3, [r7, #6]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8004bd4:	88ba      	ldrh	r2, [r7, #4]
 8004bd6:	883b      	ldrh	r3, [r7, #0]
 8004bd8:	4413      	add	r3, r2
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	4a16      	ldr	r2, [pc, #88]	; (8004c38 <ILI9341_Draw_Rectangle+0xb8>)
 8004bde:	8812      	ldrh	r2, [r2, #0]
 8004be0:	b292      	uxth	r2, r2
 8004be2:	4293      	cmp	r3, r2
 8004be4:	db05      	blt.n	8004bf2 <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <ILI9341_Draw_Rectangle+0xb8>)
 8004be8:	881b      	ldrh	r3, [r3, #0]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	88bb      	ldrh	r3, [r7, #4]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8004bf2:	88fa      	ldrh	r2, [r7, #6]
 8004bf4:	887b      	ldrh	r3, [r7, #2]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b29c      	uxth	r4, r3
 8004bfe:	88ba      	ldrh	r2, [r7, #4]
 8004c00:	883b      	ldrh	r3, [r7, #0]
 8004c02:	4413      	add	r3, r2
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	88b9      	ldrh	r1, [r7, #4]
 8004c0c:	88f8      	ldrh	r0, [r7, #6]
 8004c0e:	4622      	mov	r2, r4
 8004c10:	f7ff fc46 	bl	80044a0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8004c14:	883b      	ldrh	r3, [r7, #0]
 8004c16:	887a      	ldrh	r2, [r7, #2]
 8004c18:	fb02 f303 	mul.w	r3, r2, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	8b3b      	ldrh	r3, [r7, #24]
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7ff fe12 	bl	800484c <ILI9341_Draw_Colour_Burst>
 8004c28:	e000      	b.n	8004c2c <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8004c2a:	bf00      	nop
}
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd90      	pop	{r4, r7, pc}
 8004c32:	bf00      	nop
 8004c34:	2000000c 	.word	0x2000000c
 8004c38:	2000000a 	.word	0x2000000a

08004c3c <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8004c42:	2310      	movs	r3, #16
 8004c44:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8004c4a:	e019      	b.n	8004c80 <TP_Read+0x44>
    {
        value <<= 1;
 8004c4c:	88bb      	ldrh	r3, [r7, #4]
 8004c4e:	005b      	lsls	r3, r3, #1
 8004c50:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8004c52:	2201      	movs	r2, #1
 8004c54:	2108      	movs	r1, #8
 8004c56:	480e      	ldr	r0, [pc, #56]	; (8004c90 <TP_Read+0x54>)
 8004c58:	f7fc fe88 	bl	800196c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2108      	movs	r1, #8
 8004c60:	480b      	ldr	r0, [pc, #44]	; (8004c90 <TP_Read+0x54>)
 8004c62:	f7fc fe83 	bl	800196c <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8004c66:	2110      	movs	r1, #16
 8004c68:	4809      	ldr	r0, [pc, #36]	; (8004c90 <TP_Read+0x54>)
 8004c6a:	f7fc fe67 	bl	800193c <HAL_GPIO_ReadPin>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d002      	beq.n	8004c7a <TP_Read+0x3e>
        {
            value++;
 8004c74:	88bb      	ldrh	r3, [r7, #4]
 8004c76:	3301      	adds	r3, #1
 8004c78:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8004c7a:	79fb      	ldrb	r3, [r7, #7]
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8004c80:	79fb      	ldrb	r3, [r7, #7]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1e2      	bne.n	8004c4c <TP_Read+0x10>
    };

    return value;
 8004c86:	88bb      	ldrh	r3, [r7, #4]
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3708      	adds	r7, #8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000

08004c94 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	2108      	movs	r1, #8
 8004ca6:	4815      	ldr	r0, [pc, #84]	; (8004cfc <TP_Write+0x68>)
 8004ca8:	f7fc fe60 	bl	800196c <HAL_GPIO_WritePin>
	
    while(i > 0)
 8004cac:	e01e      	b.n	8004cec <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8004cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	da05      	bge.n	8004cc2 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	2120      	movs	r1, #32
 8004cba:	4810      	ldr	r0, [pc, #64]	; (8004cfc <TP_Write+0x68>)
 8004cbc:	f7fc fe56 	bl	800196c <HAL_GPIO_WritePin>
 8004cc0:	e004      	b.n	8004ccc <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	2120      	movs	r1, #32
 8004cc6:	480d      	ldr	r0, [pc, #52]	; (8004cfc <TP_Write+0x68>)
 8004cc8:	f7fc fe50 	bl	800196c <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	2108      	movs	r1, #8
 8004cd6:	4809      	ldr	r0, [pc, #36]	; (8004cfc <TP_Write+0x68>)
 8004cd8:	f7fc fe48 	bl	800196c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2108      	movs	r1, #8
 8004ce0:	4806      	ldr	r0, [pc, #24]	; (8004cfc <TP_Write+0x68>)
 8004ce2:	f7fc fe43 	bl	800196c <HAL_GPIO_WritePin>
        i--;
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d1dd      	bne.n	8004cae <TP_Write+0x1a>
    };
}
 8004cf2:	bf00      	nop
 8004cf4:	3710      	adds	r7, #16
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000

08004d00 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08a      	sub	sp, #40	; 0x28
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8004d08:	2201      	movs	r2, #1
 8004d0a:	2108      	movs	r1, #8
 8004d0c:	485a      	ldr	r0, [pc, #360]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004d0e:	f7fc fe2d 	bl	800196c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8004d12:	2201      	movs	r2, #1
 8004d14:	2120      	movs	r1, #32
 8004d16:	4858      	ldr	r0, [pc, #352]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004d18:	f7fc fe28 	bl	800196c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2140      	movs	r1, #64	; 0x40
 8004d20:	4855      	ldr	r0, [pc, #340]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004d22:	f7fc fe23 	bl	800196c <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8004d26:	2300      	movs	r3, #0
 8004d28:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8004d32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d36:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	2140      	movs	r1, #64	; 0x40
 8004d40:	484d      	ldr	r0, [pc, #308]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004d42:	f7fc fe13 	bl	800196c <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8004d46:	e023      	b.n	8004d90 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8004d48:	2090      	movs	r0, #144	; 0x90
 8004d4a:	f7ff ffa3 	bl	8004c94 <TP_Write>

				rawy = TP_Read();	
 8004d4e:	f7ff ff75 	bl	8004c3c <TP_Read>
 8004d52:	4603      	mov	r3, r0
 8004d54:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8004d56:	89fb      	ldrh	r3, [r7, #14]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8004d5e:	89fb      	ldrh	r3, [r7, #14]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	4413      	add	r3, r2
 8004d64:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8004d66:	20d0      	movs	r0, #208	; 0xd0
 8004d68:	f7ff ff94 	bl	8004c94 <TP_Write>
        rawx = TP_Read();
 8004d6c:	f7ff ff66 	bl	8004c3c <TP_Read>
 8004d70:	4603      	mov	r3, r0
 8004d72:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8004d74:	89bb      	ldrh	r3, [r7, #12]
 8004d76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d78:	4413      	add	r3, r2
 8004d7a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8004d7c:	89bb      	ldrh	r3, [r7, #12]
 8004d7e:	69fa      	ldr	r2, [r7, #28]
 8004d80:	4413      	add	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
        samples--;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	3b01      	subs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d006      	beq.n	8004da4 <TP_Read_Coordinates+0xa4>
 8004d96:	2104      	movs	r1, #4
 8004d98:	4837      	ldr	r0, [pc, #220]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004d9a:	f7fc fdcf 	bl	800193c <HAL_GPIO_ReadPin>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0d1      	beq.n	8004d48 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8004da4:	2201      	movs	r2, #1
 8004da6:	2140      	movs	r1, #64	; 0x40
 8004da8:	4833      	ldr	r0, [pc, #204]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004daa:	f7fc fddf 	bl	800196c <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db4:	d14d      	bne.n	8004e52 <TP_Read_Coordinates+0x152>
 8004db6:	2104      	movs	r1, #4
 8004db8:	482f      	ldr	r0, [pc, #188]	; (8004e78 <TP_Read_Coordinates+0x178>)
 8004dba:	f7fc fdbf 	bl	800193c <HAL_GPIO_ReadPin>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d146      	bne.n	8004e52 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8004dc4:	69fa      	ldr	r2, [r7, #28]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dcc:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8004dce:	69ba      	ldr	r2, [r7, #24]
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd6:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8004dd8:	69fb      	ldr	r3, [r7, #28]
 8004dda:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8004de0:	89bb      	ldrh	r3, [r7, #12]
 8004de2:	425b      	negs	r3, r3
 8004de4:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8004de6:	89fb      	ldrh	r3, [r7, #14]
 8004de8:	425b      	negs	r3, r3
 8004dea:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8004dec:	89ba      	ldrh	r2, [r7, #12]
 8004dee:	4b23      	ldr	r3, [pc, #140]	; (8004e7c <TP_Read_Coordinates+0x17c>)
 8004df0:	fba3 1302 	umull	r1, r3, r3, r2
 8004df4:	1ad2      	subs	r2, r2, r3
 8004df6:	0852      	lsrs	r2, r2, #1
 8004df8:	4413      	add	r3, r2
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8004e02:	ee07 3a90 	vmov	s15, r3
 8004e06:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e0a:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8004e70 <TP_Read_Coordinates+0x170>
 8004e0e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e12:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e16:	ee17 3a90 	vmov	r3, s15
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8004e20:	89fb      	ldrh	r3, [r7, #14]
 8004e22:	4a17      	ldr	r2, [pc, #92]	; (8004e80 <TP_Read_Coordinates+0x180>)
 8004e24:	fba2 2303 	umull	r2, r3, r2, r3
 8004e28:	09db      	lsrs	r3, r3, #7
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b0f      	subs	r3, #15
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004e36:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8004e70 <TP_Read_Coordinates+0x170>
 8004e3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	3302      	adds	r3, #2
 8004e42:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8004e46:	ee17 2a90 	vmov	r2, s15
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e007      	b.n	8004e62 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3302      	adds	r3, #2
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8004e60:	2300      	movs	r3, #0
		}
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3728      	adds	r7, #40	; 0x28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	f3af 8000 	nop.w
 8004e70:	28f5c28f 	.word	0x28f5c28f
 8004e74:	3ff28f5c 	.word	0x3ff28f5c
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	e01e01e1 	.word	0xe01e01e1
 8004e80:	a0a0a0a1 	.word	0xa0a0a0a1

08004e84 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8004e88:	2104      	movs	r1, #4
 8004e8a:	4805      	ldr	r0, [pc, #20]	; (8004ea0 <TP_Touchpad_Pressed+0x1c>)
 8004e8c:	f7fc fd56 	bl	800193c <HAL_GPIO_ReadPin>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8004e9a:	2300      	movs	r3, #0
	}
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	40021000 	.word	0x40021000

08004ea4 <__errno>:
 8004ea4:	4b01      	ldr	r3, [pc, #4]	; (8004eac <__errno+0x8>)
 8004ea6:	6818      	ldr	r0, [r3, #0]
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	20000010 	.word	0x20000010

08004eb0 <__libc_init_array>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	4e0d      	ldr	r6, [pc, #52]	; (8004ee8 <__libc_init_array+0x38>)
 8004eb4:	4c0d      	ldr	r4, [pc, #52]	; (8004eec <__libc_init_array+0x3c>)
 8004eb6:	1ba4      	subs	r4, r4, r6
 8004eb8:	10a4      	asrs	r4, r4, #2
 8004eba:	2500      	movs	r5, #0
 8004ebc:	42a5      	cmp	r5, r4
 8004ebe:	d109      	bne.n	8004ed4 <__libc_init_array+0x24>
 8004ec0:	4e0b      	ldr	r6, [pc, #44]	; (8004ef0 <__libc_init_array+0x40>)
 8004ec2:	4c0c      	ldr	r4, [pc, #48]	; (8004ef4 <__libc_init_array+0x44>)
 8004ec4:	f003 fc92 	bl	80087ec <_init>
 8004ec8:	1ba4      	subs	r4, r4, r6
 8004eca:	10a4      	asrs	r4, r4, #2
 8004ecc:	2500      	movs	r5, #0
 8004ece:	42a5      	cmp	r5, r4
 8004ed0:	d105      	bne.n	8004ede <__libc_init_array+0x2e>
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ed8:	4798      	blx	r3
 8004eda:	3501      	adds	r5, #1
 8004edc:	e7ee      	b.n	8004ebc <__libc_init_array+0xc>
 8004ede:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ee2:	4798      	blx	r3
 8004ee4:	3501      	adds	r5, #1
 8004ee6:	e7f2      	b.n	8004ece <__libc_init_array+0x1e>
 8004ee8:	08008d28 	.word	0x08008d28
 8004eec:	08008d28 	.word	0x08008d28
 8004ef0:	08008d28 	.word	0x08008d28
 8004ef4:	08008d2c 	.word	0x08008d2c

08004ef8 <memset>:
 8004ef8:	4402      	add	r2, r0
 8004efa:	4603      	mov	r3, r0
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d100      	bne.n	8004f02 <memset+0xa>
 8004f00:	4770      	bx	lr
 8004f02:	f803 1b01 	strb.w	r1, [r3], #1
 8004f06:	e7f9      	b.n	8004efc <memset+0x4>

08004f08 <__cvt>:
 8004f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0a:	ed2d 8b02 	vpush	{d8}
 8004f0e:	eeb0 8b40 	vmov.f64	d8, d0
 8004f12:	b085      	sub	sp, #20
 8004f14:	4617      	mov	r7, r2
 8004f16:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004f18:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004f1a:	ee18 2a90 	vmov	r2, s17
 8004f1e:	f025 0520 	bic.w	r5, r5, #32
 8004f22:	2a00      	cmp	r2, #0
 8004f24:	bfb6      	itet	lt
 8004f26:	222d      	movlt	r2, #45	; 0x2d
 8004f28:	2200      	movge	r2, #0
 8004f2a:	eeb1 8b40 	vneglt.f64	d8, d0
 8004f2e:	2d46      	cmp	r5, #70	; 0x46
 8004f30:	460c      	mov	r4, r1
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	d004      	beq.n	8004f40 <__cvt+0x38>
 8004f36:	2d45      	cmp	r5, #69	; 0x45
 8004f38:	d100      	bne.n	8004f3c <__cvt+0x34>
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	2102      	movs	r1, #2
 8004f3e:	e000      	b.n	8004f42 <__cvt+0x3a>
 8004f40:	2103      	movs	r1, #3
 8004f42:	ab03      	add	r3, sp, #12
 8004f44:	9301      	str	r3, [sp, #4]
 8004f46:	ab02      	add	r3, sp, #8
 8004f48:	9300      	str	r3, [sp, #0]
 8004f4a:	4622      	mov	r2, r4
 8004f4c:	4633      	mov	r3, r6
 8004f4e:	eeb0 0b48 	vmov.f64	d0, d8
 8004f52:	f001 fd21 	bl	8006998 <_dtoa_r>
 8004f56:	2d47      	cmp	r5, #71	; 0x47
 8004f58:	d101      	bne.n	8004f5e <__cvt+0x56>
 8004f5a:	07fb      	lsls	r3, r7, #31
 8004f5c:	d51e      	bpl.n	8004f9c <__cvt+0x94>
 8004f5e:	2d46      	cmp	r5, #70	; 0x46
 8004f60:	eb00 0304 	add.w	r3, r0, r4
 8004f64:	d10c      	bne.n	8004f80 <__cvt+0x78>
 8004f66:	7802      	ldrb	r2, [r0, #0]
 8004f68:	2a30      	cmp	r2, #48	; 0x30
 8004f6a:	d107      	bne.n	8004f7c <__cvt+0x74>
 8004f6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f74:	bf1c      	itt	ne
 8004f76:	f1c4 0401 	rsbne	r4, r4, #1
 8004f7a:	6034      	strne	r4, [r6, #0]
 8004f7c:	6832      	ldr	r2, [r6, #0]
 8004f7e:	4413      	add	r3, r2
 8004f80:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f88:	d007      	beq.n	8004f9a <__cvt+0x92>
 8004f8a:	2130      	movs	r1, #48	; 0x30
 8004f8c:	9a03      	ldr	r2, [sp, #12]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d204      	bcs.n	8004f9c <__cvt+0x94>
 8004f92:	1c54      	adds	r4, r2, #1
 8004f94:	9403      	str	r4, [sp, #12]
 8004f96:	7011      	strb	r1, [r2, #0]
 8004f98:	e7f8      	b.n	8004f8c <__cvt+0x84>
 8004f9a:	9303      	str	r3, [sp, #12]
 8004f9c:	9b03      	ldr	r3, [sp, #12]
 8004f9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004fa0:	1a1b      	subs	r3, r3, r0
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	b005      	add	sp, #20
 8004fa6:	ecbd 8b02 	vpop	{d8}
 8004faa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004fac <__exponent>:
 8004fac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004fae:	2900      	cmp	r1, #0
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	bfba      	itte	lt
 8004fb4:	4249      	neglt	r1, r1
 8004fb6:	232d      	movlt	r3, #45	; 0x2d
 8004fb8:	232b      	movge	r3, #43	; 0x2b
 8004fba:	2909      	cmp	r1, #9
 8004fbc:	f804 2b02 	strb.w	r2, [r4], #2
 8004fc0:	7043      	strb	r3, [r0, #1]
 8004fc2:	dd20      	ble.n	8005006 <__exponent+0x5a>
 8004fc4:	f10d 0307 	add.w	r3, sp, #7
 8004fc8:	461f      	mov	r7, r3
 8004fca:	260a      	movs	r6, #10
 8004fcc:	fb91 f5f6 	sdiv	r5, r1, r6
 8004fd0:	fb06 1115 	mls	r1, r6, r5, r1
 8004fd4:	3130      	adds	r1, #48	; 0x30
 8004fd6:	2d09      	cmp	r5, #9
 8004fd8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004fdc:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	dc09      	bgt.n	8004ff8 <__exponent+0x4c>
 8004fe4:	3130      	adds	r1, #48	; 0x30
 8004fe6:	3b02      	subs	r3, #2
 8004fe8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004fec:	42bb      	cmp	r3, r7
 8004fee:	4622      	mov	r2, r4
 8004ff0:	d304      	bcc.n	8004ffc <__exponent+0x50>
 8004ff2:	1a10      	subs	r0, r2, r0
 8004ff4:	b003      	add	sp, #12
 8004ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	e7e7      	b.n	8004fcc <__exponent+0x20>
 8004ffc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005000:	f804 2b01 	strb.w	r2, [r4], #1
 8005004:	e7f2      	b.n	8004fec <__exponent+0x40>
 8005006:	2330      	movs	r3, #48	; 0x30
 8005008:	4419      	add	r1, r3
 800500a:	7083      	strb	r3, [r0, #2]
 800500c:	1d02      	adds	r2, r0, #4
 800500e:	70c1      	strb	r1, [r0, #3]
 8005010:	e7ef      	b.n	8004ff2 <__exponent+0x46>
 8005012:	0000      	movs	r0, r0
 8005014:	0000      	movs	r0, r0
	...

08005018 <_printf_float>:
 8005018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800501c:	b08d      	sub	sp, #52	; 0x34
 800501e:	460c      	mov	r4, r1
 8005020:	4616      	mov	r6, r2
 8005022:	461f      	mov	r7, r3
 8005024:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005028:	4605      	mov	r5, r0
 800502a:	f002 fd2d 	bl	8007a88 <_localeconv_r>
 800502e:	f8d0 b000 	ldr.w	fp, [r0]
 8005032:	4658      	mov	r0, fp
 8005034:	f7fb f904 	bl	8000240 <strlen>
 8005038:	2300      	movs	r3, #0
 800503a:	930a      	str	r3, [sp, #40]	; 0x28
 800503c:	f8d8 3000 	ldr.w	r3, [r8]
 8005040:	9005      	str	r0, [sp, #20]
 8005042:	3307      	adds	r3, #7
 8005044:	f023 0307 	bic.w	r3, r3, #7
 8005048:	f103 0108 	add.w	r1, r3, #8
 800504c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005050:	6822      	ldr	r2, [r4, #0]
 8005052:	f8c8 1000 	str.w	r1, [r8]
 8005056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800505a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800505e:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 80052e8 <_printf_float+0x2d0>
 8005062:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8005066:	eeb0 6bc0 	vabs.f64	d6, d0
 800506a:	eeb4 6b47 	vcmp.f64	d6, d7
 800506e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005072:	dd24      	ble.n	80050be <_printf_float+0xa6>
 8005074:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8005078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507c:	d502      	bpl.n	8005084 <_printf_float+0x6c>
 800507e:	232d      	movs	r3, #45	; 0x2d
 8005080:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005084:	499a      	ldr	r1, [pc, #616]	; (80052f0 <_printf_float+0x2d8>)
 8005086:	4b9b      	ldr	r3, [pc, #620]	; (80052f4 <_printf_float+0x2dc>)
 8005088:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800508c:	bf8c      	ite	hi
 800508e:	4688      	movhi	r8, r1
 8005090:	4698      	movls	r8, r3
 8005092:	f022 0204 	bic.w	r2, r2, #4
 8005096:	2303      	movs	r3, #3
 8005098:	6123      	str	r3, [r4, #16]
 800509a:	6022      	str	r2, [r4, #0]
 800509c:	f04f 0a00 	mov.w	sl, #0
 80050a0:	9700      	str	r7, [sp, #0]
 80050a2:	4633      	mov	r3, r6
 80050a4:	aa0b      	add	r2, sp, #44	; 0x2c
 80050a6:	4621      	mov	r1, r4
 80050a8:	4628      	mov	r0, r5
 80050aa:	f000 f9e1 	bl	8005470 <_printf_common>
 80050ae:	3001      	adds	r0, #1
 80050b0:	f040 8089 	bne.w	80051c6 <_printf_float+0x1ae>
 80050b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80050b8:	b00d      	add	sp, #52	; 0x34
 80050ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050be:	eeb4 0b40 	vcmp.f64	d0, d0
 80050c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050c6:	d702      	bvc.n	80050ce <_printf_float+0xb6>
 80050c8:	498b      	ldr	r1, [pc, #556]	; (80052f8 <_printf_float+0x2e0>)
 80050ca:	4b8c      	ldr	r3, [pc, #560]	; (80052fc <_printf_float+0x2e4>)
 80050cc:	e7dc      	b.n	8005088 <_printf_float+0x70>
 80050ce:	6861      	ldr	r1, [r4, #4]
 80050d0:	1c4b      	adds	r3, r1, #1
 80050d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050d6:	ab0a      	add	r3, sp, #40	; 0x28
 80050d8:	a809      	add	r0, sp, #36	; 0x24
 80050da:	d13b      	bne.n	8005154 <_printf_float+0x13c>
 80050dc:	2106      	movs	r1, #6
 80050de:	6061      	str	r1, [r4, #4]
 80050e0:	f04f 0c00 	mov.w	ip, #0
 80050e4:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80050e8:	e9cd 0900 	strd	r0, r9, [sp]
 80050ec:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050f0:	6022      	str	r2, [r4, #0]
 80050f2:	6861      	ldr	r1, [r4, #4]
 80050f4:	4628      	mov	r0, r5
 80050f6:	f7ff ff07 	bl	8004f08 <__cvt>
 80050fa:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 80050fe:	2b47      	cmp	r3, #71	; 0x47
 8005100:	4680      	mov	r8, r0
 8005102:	d109      	bne.n	8005118 <_printf_float+0x100>
 8005104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005106:	1cd8      	adds	r0, r3, #3
 8005108:	db02      	blt.n	8005110 <_printf_float+0xf8>
 800510a:	6862      	ldr	r2, [r4, #4]
 800510c:	4293      	cmp	r3, r2
 800510e:	dd47      	ble.n	80051a0 <_printf_float+0x188>
 8005110:	f1a9 0902 	sub.w	r9, r9, #2
 8005114:	fa5f f989 	uxtb.w	r9, r9
 8005118:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800511c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800511e:	d824      	bhi.n	800516a <_printf_float+0x152>
 8005120:	3901      	subs	r1, #1
 8005122:	464a      	mov	r2, r9
 8005124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005128:	9109      	str	r1, [sp, #36]	; 0x24
 800512a:	f7ff ff3f 	bl	8004fac <__exponent>
 800512e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005130:	1813      	adds	r3, r2, r0
 8005132:	2a01      	cmp	r2, #1
 8005134:	4682      	mov	sl, r0
 8005136:	6123      	str	r3, [r4, #16]
 8005138:	dc02      	bgt.n	8005140 <_printf_float+0x128>
 800513a:	6822      	ldr	r2, [r4, #0]
 800513c:	07d1      	lsls	r1, r2, #31
 800513e:	d501      	bpl.n	8005144 <_printf_float+0x12c>
 8005140:	3301      	adds	r3, #1
 8005142:	6123      	str	r3, [r4, #16]
 8005144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0a9      	beq.n	80050a0 <_printf_float+0x88>
 800514c:	232d      	movs	r3, #45	; 0x2d
 800514e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005152:	e7a5      	b.n	80050a0 <_printf_float+0x88>
 8005154:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8005158:	f000 8178 	beq.w	800544c <_printf_float+0x434>
 800515c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005160:	d1be      	bne.n	80050e0 <_printf_float+0xc8>
 8005162:	2900      	cmp	r1, #0
 8005164:	d1bc      	bne.n	80050e0 <_printf_float+0xc8>
 8005166:	2101      	movs	r1, #1
 8005168:	e7b9      	b.n	80050de <_printf_float+0xc6>
 800516a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800516e:	d119      	bne.n	80051a4 <_printf_float+0x18c>
 8005170:	2900      	cmp	r1, #0
 8005172:	6863      	ldr	r3, [r4, #4]
 8005174:	dd0c      	ble.n	8005190 <_printf_float+0x178>
 8005176:	6121      	str	r1, [r4, #16]
 8005178:	b913      	cbnz	r3, 8005180 <_printf_float+0x168>
 800517a:	6822      	ldr	r2, [r4, #0]
 800517c:	07d2      	lsls	r2, r2, #31
 800517e:	d502      	bpl.n	8005186 <_printf_float+0x16e>
 8005180:	3301      	adds	r3, #1
 8005182:	440b      	add	r3, r1
 8005184:	6123      	str	r3, [r4, #16]
 8005186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005188:	65a3      	str	r3, [r4, #88]	; 0x58
 800518a:	f04f 0a00 	mov.w	sl, #0
 800518e:	e7d9      	b.n	8005144 <_printf_float+0x12c>
 8005190:	b913      	cbnz	r3, 8005198 <_printf_float+0x180>
 8005192:	6822      	ldr	r2, [r4, #0]
 8005194:	07d0      	lsls	r0, r2, #31
 8005196:	d501      	bpl.n	800519c <_printf_float+0x184>
 8005198:	3302      	adds	r3, #2
 800519a:	e7f3      	b.n	8005184 <_printf_float+0x16c>
 800519c:	2301      	movs	r3, #1
 800519e:	e7f1      	b.n	8005184 <_printf_float+0x16c>
 80051a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80051a4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051a8:	4293      	cmp	r3, r2
 80051aa:	db05      	blt.n	80051b8 <_printf_float+0x1a0>
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	07d1      	lsls	r1, r2, #31
 80051b2:	d5e8      	bpl.n	8005186 <_printf_float+0x16e>
 80051b4:	3301      	adds	r3, #1
 80051b6:	e7e5      	b.n	8005184 <_printf_float+0x16c>
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	bfd4      	ite	le
 80051bc:	f1c3 0302 	rsble	r3, r3, #2
 80051c0:	2301      	movgt	r3, #1
 80051c2:	4413      	add	r3, r2
 80051c4:	e7de      	b.n	8005184 <_printf_float+0x16c>
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	055a      	lsls	r2, r3, #21
 80051ca:	d407      	bmi.n	80051dc <_printf_float+0x1c4>
 80051cc:	6923      	ldr	r3, [r4, #16]
 80051ce:	4642      	mov	r2, r8
 80051d0:	4631      	mov	r1, r6
 80051d2:	4628      	mov	r0, r5
 80051d4:	47b8      	blx	r7
 80051d6:	3001      	adds	r0, #1
 80051d8:	d12a      	bne.n	8005230 <_printf_float+0x218>
 80051da:	e76b      	b.n	80050b4 <_printf_float+0x9c>
 80051dc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80051e0:	f240 80de 	bls.w	80053a0 <_printf_float+0x388>
 80051e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80051e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80051ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051f0:	d133      	bne.n	800525a <_printf_float+0x242>
 80051f2:	2301      	movs	r3, #1
 80051f4:	4a42      	ldr	r2, [pc, #264]	; (8005300 <_printf_float+0x2e8>)
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	f43f af59 	beq.w	80050b4 <_printf_float+0x9c>
 8005202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005206:	429a      	cmp	r2, r3
 8005208:	db02      	blt.n	8005210 <_printf_float+0x1f8>
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	07d8      	lsls	r0, r3, #31
 800520e:	d50f      	bpl.n	8005230 <_printf_float+0x218>
 8005210:	9b05      	ldr	r3, [sp, #20]
 8005212:	465a      	mov	r2, fp
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af4a 	beq.w	80050b4 <_printf_float+0x9c>
 8005220:	f04f 0800 	mov.w	r8, #0
 8005224:	f104 091a 	add.w	r9, r4, #26
 8005228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522a:	3b01      	subs	r3, #1
 800522c:	4543      	cmp	r3, r8
 800522e:	dc09      	bgt.n	8005244 <_printf_float+0x22c>
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	079b      	lsls	r3, r3, #30
 8005234:	f100 8105 	bmi.w	8005442 <_printf_float+0x42a>
 8005238:	68e0      	ldr	r0, [r4, #12]
 800523a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800523c:	4298      	cmp	r0, r3
 800523e:	bfb8      	it	lt
 8005240:	4618      	movlt	r0, r3
 8005242:	e739      	b.n	80050b8 <_printf_float+0xa0>
 8005244:	2301      	movs	r3, #1
 8005246:	464a      	mov	r2, r9
 8005248:	4631      	mov	r1, r6
 800524a:	4628      	mov	r0, r5
 800524c:	47b8      	blx	r7
 800524e:	3001      	adds	r0, #1
 8005250:	f43f af30 	beq.w	80050b4 <_printf_float+0x9c>
 8005254:	f108 0801 	add.w	r8, r8, #1
 8005258:	e7e6      	b.n	8005228 <_printf_float+0x210>
 800525a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800525c:	2b00      	cmp	r3, #0
 800525e:	dc2b      	bgt.n	80052b8 <_printf_float+0x2a0>
 8005260:	2301      	movs	r3, #1
 8005262:	4a27      	ldr	r2, [pc, #156]	; (8005300 <_printf_float+0x2e8>)
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af22 	beq.w	80050b4 <_printf_float+0x9c>
 8005270:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005272:	b923      	cbnz	r3, 800527e <_printf_float+0x266>
 8005274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005276:	b913      	cbnz	r3, 800527e <_printf_float+0x266>
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	07d9      	lsls	r1, r3, #31
 800527c:	d5d8      	bpl.n	8005230 <_printf_float+0x218>
 800527e:	9b05      	ldr	r3, [sp, #20]
 8005280:	465a      	mov	r2, fp
 8005282:	4631      	mov	r1, r6
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	3001      	adds	r0, #1
 800528a:	f43f af13 	beq.w	80050b4 <_printf_float+0x9c>
 800528e:	f04f 0900 	mov.w	r9, #0
 8005292:	f104 0a1a 	add.w	sl, r4, #26
 8005296:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005298:	425b      	negs	r3, r3
 800529a:	454b      	cmp	r3, r9
 800529c:	dc01      	bgt.n	80052a2 <_printf_float+0x28a>
 800529e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a0:	e795      	b.n	80051ce <_printf_float+0x1b6>
 80052a2:	2301      	movs	r3, #1
 80052a4:	4652      	mov	r2, sl
 80052a6:	4631      	mov	r1, r6
 80052a8:	4628      	mov	r0, r5
 80052aa:	47b8      	blx	r7
 80052ac:	3001      	adds	r0, #1
 80052ae:	f43f af01 	beq.w	80050b4 <_printf_float+0x9c>
 80052b2:	f109 0901 	add.w	r9, r9, #1
 80052b6:	e7ee      	b.n	8005296 <_printf_float+0x27e>
 80052b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052bc:	429a      	cmp	r2, r3
 80052be:	bfa8      	it	ge
 80052c0:	461a      	movge	r2, r3
 80052c2:	2a00      	cmp	r2, #0
 80052c4:	4691      	mov	r9, r2
 80052c6:	dd07      	ble.n	80052d8 <_printf_float+0x2c0>
 80052c8:	4613      	mov	r3, r2
 80052ca:	4631      	mov	r1, r6
 80052cc:	4642      	mov	r2, r8
 80052ce:	4628      	mov	r0, r5
 80052d0:	47b8      	blx	r7
 80052d2:	3001      	adds	r0, #1
 80052d4:	f43f aeee 	beq.w	80050b4 <_printf_float+0x9c>
 80052d8:	f104 031a 	add.w	r3, r4, #26
 80052dc:	f04f 0a00 	mov.w	sl, #0
 80052e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052e4:	9307      	str	r3, [sp, #28]
 80052e6:	e017      	b.n	8005318 <_printf_float+0x300>
 80052e8:	ffffffff 	.word	0xffffffff
 80052ec:	7fefffff 	.word	0x7fefffff
 80052f0:	08008a70 	.word	0x08008a70
 80052f4:	08008a6c 	.word	0x08008a6c
 80052f8:	08008a78 	.word	0x08008a78
 80052fc:	08008a74 	.word	0x08008a74
 8005300:	08008a7c 	.word	0x08008a7c
 8005304:	2301      	movs	r3, #1
 8005306:	9a07      	ldr	r2, [sp, #28]
 8005308:	4631      	mov	r1, r6
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	f43f aed0 	beq.w	80050b4 <_printf_float+0x9c>
 8005314:	f10a 0a01 	add.w	sl, sl, #1
 8005318:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800531a:	9306      	str	r3, [sp, #24]
 800531c:	eba3 0309 	sub.w	r3, r3, r9
 8005320:	4553      	cmp	r3, sl
 8005322:	dcef      	bgt.n	8005304 <_printf_float+0x2ec>
 8005324:	9b06      	ldr	r3, [sp, #24]
 8005326:	4498      	add	r8, r3
 8005328:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800532c:	429a      	cmp	r2, r3
 800532e:	db15      	blt.n	800535c <_printf_float+0x344>
 8005330:	6823      	ldr	r3, [r4, #0]
 8005332:	07da      	lsls	r2, r3, #31
 8005334:	d412      	bmi.n	800535c <_printf_float+0x344>
 8005336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005338:	9a06      	ldr	r2, [sp, #24]
 800533a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800533c:	1a9a      	subs	r2, r3, r2
 800533e:	eba3 0a01 	sub.w	sl, r3, r1
 8005342:	4592      	cmp	sl, r2
 8005344:	bfa8      	it	ge
 8005346:	4692      	movge	sl, r2
 8005348:	f1ba 0f00 	cmp.w	sl, #0
 800534c:	dc0e      	bgt.n	800536c <_printf_float+0x354>
 800534e:	f04f 0800 	mov.w	r8, #0
 8005352:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005356:	f104 091a 	add.w	r9, r4, #26
 800535a:	e019      	b.n	8005390 <_printf_float+0x378>
 800535c:	9b05      	ldr	r3, [sp, #20]
 800535e:	465a      	mov	r2, fp
 8005360:	4631      	mov	r1, r6
 8005362:	4628      	mov	r0, r5
 8005364:	47b8      	blx	r7
 8005366:	3001      	adds	r0, #1
 8005368:	d1e5      	bne.n	8005336 <_printf_float+0x31e>
 800536a:	e6a3      	b.n	80050b4 <_printf_float+0x9c>
 800536c:	4653      	mov	r3, sl
 800536e:	4642      	mov	r2, r8
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	d1e9      	bne.n	800534e <_printf_float+0x336>
 800537a:	e69b      	b.n	80050b4 <_printf_float+0x9c>
 800537c:	2301      	movs	r3, #1
 800537e:	464a      	mov	r2, r9
 8005380:	4631      	mov	r1, r6
 8005382:	4628      	mov	r0, r5
 8005384:	47b8      	blx	r7
 8005386:	3001      	adds	r0, #1
 8005388:	f43f ae94 	beq.w	80050b4 <_printf_float+0x9c>
 800538c:	f108 0801 	add.w	r8, r8, #1
 8005390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	eba3 030a 	sub.w	r3, r3, sl
 800539a:	4543      	cmp	r3, r8
 800539c:	dcee      	bgt.n	800537c <_printf_float+0x364>
 800539e:	e747      	b.n	8005230 <_printf_float+0x218>
 80053a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053a2:	2a01      	cmp	r2, #1
 80053a4:	dc01      	bgt.n	80053aa <_printf_float+0x392>
 80053a6:	07db      	lsls	r3, r3, #31
 80053a8:	d539      	bpl.n	800541e <_printf_float+0x406>
 80053aa:	2301      	movs	r3, #1
 80053ac:	4642      	mov	r2, r8
 80053ae:	4631      	mov	r1, r6
 80053b0:	4628      	mov	r0, r5
 80053b2:	47b8      	blx	r7
 80053b4:	3001      	adds	r0, #1
 80053b6:	f43f ae7d 	beq.w	80050b4 <_printf_float+0x9c>
 80053ba:	9b05      	ldr	r3, [sp, #20]
 80053bc:	465a      	mov	r2, fp
 80053be:	4631      	mov	r1, r6
 80053c0:	4628      	mov	r0, r5
 80053c2:	47b8      	blx	r7
 80053c4:	3001      	adds	r0, #1
 80053c6:	f108 0801 	add.w	r8, r8, #1
 80053ca:	f43f ae73 	beq.w	80050b4 <_printf_float+0x9c>
 80053ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80053d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80053e0:	d018      	beq.n	8005414 <_printf_float+0x3fc>
 80053e2:	4642      	mov	r2, r8
 80053e4:	4631      	mov	r1, r6
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b8      	blx	r7
 80053ea:	3001      	adds	r0, #1
 80053ec:	d10e      	bne.n	800540c <_printf_float+0x3f4>
 80053ee:	e661      	b.n	80050b4 <_printf_float+0x9c>
 80053f0:	2301      	movs	r3, #1
 80053f2:	464a      	mov	r2, r9
 80053f4:	4631      	mov	r1, r6
 80053f6:	4628      	mov	r0, r5
 80053f8:	47b8      	blx	r7
 80053fa:	3001      	adds	r0, #1
 80053fc:	f43f ae5a 	beq.w	80050b4 <_printf_float+0x9c>
 8005400:	f108 0801 	add.w	r8, r8, #1
 8005404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005406:	3b01      	subs	r3, #1
 8005408:	4543      	cmp	r3, r8
 800540a:	dcf1      	bgt.n	80053f0 <_printf_float+0x3d8>
 800540c:	4653      	mov	r3, sl
 800540e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005412:	e6dd      	b.n	80051d0 <_printf_float+0x1b8>
 8005414:	f04f 0800 	mov.w	r8, #0
 8005418:	f104 091a 	add.w	r9, r4, #26
 800541c:	e7f2      	b.n	8005404 <_printf_float+0x3ec>
 800541e:	2301      	movs	r3, #1
 8005420:	e7df      	b.n	80053e2 <_printf_float+0x3ca>
 8005422:	2301      	movs	r3, #1
 8005424:	464a      	mov	r2, r9
 8005426:	4631      	mov	r1, r6
 8005428:	4628      	mov	r0, r5
 800542a:	47b8      	blx	r7
 800542c:	3001      	adds	r0, #1
 800542e:	f43f ae41 	beq.w	80050b4 <_printf_float+0x9c>
 8005432:	f108 0801 	add.w	r8, r8, #1
 8005436:	68e3      	ldr	r3, [r4, #12]
 8005438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800543a:	1a9b      	subs	r3, r3, r2
 800543c:	4543      	cmp	r3, r8
 800543e:	dcf0      	bgt.n	8005422 <_printf_float+0x40a>
 8005440:	e6fa      	b.n	8005238 <_printf_float+0x220>
 8005442:	f04f 0800 	mov.w	r8, #0
 8005446:	f104 0919 	add.w	r9, r4, #25
 800544a:	e7f4      	b.n	8005436 <_printf_float+0x41e>
 800544c:	2900      	cmp	r1, #0
 800544e:	f43f ae8a 	beq.w	8005166 <_printf_float+0x14e>
 8005452:	f04f 0c00 	mov.w	ip, #0
 8005456:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 800545a:	e9cd 0900 	strd	r0, r9, [sp]
 800545e:	6022      	str	r2, [r4, #0]
 8005460:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005464:	4628      	mov	r0, r5
 8005466:	f7ff fd4f 	bl	8004f08 <__cvt>
 800546a:	4680      	mov	r8, r0
 800546c:	e64a      	b.n	8005104 <_printf_float+0xec>
 800546e:	bf00      	nop

08005470 <_printf_common>:
 8005470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005474:	4691      	mov	r9, r2
 8005476:	461f      	mov	r7, r3
 8005478:	688a      	ldr	r2, [r1, #8]
 800547a:	690b      	ldr	r3, [r1, #16]
 800547c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005480:	4293      	cmp	r3, r2
 8005482:	bfb8      	it	lt
 8005484:	4613      	movlt	r3, r2
 8005486:	f8c9 3000 	str.w	r3, [r9]
 800548a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800548e:	4606      	mov	r6, r0
 8005490:	460c      	mov	r4, r1
 8005492:	b112      	cbz	r2, 800549a <_printf_common+0x2a>
 8005494:	3301      	adds	r3, #1
 8005496:	f8c9 3000 	str.w	r3, [r9]
 800549a:	6823      	ldr	r3, [r4, #0]
 800549c:	0699      	lsls	r1, r3, #26
 800549e:	bf42      	ittt	mi
 80054a0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054a4:	3302      	addmi	r3, #2
 80054a6:	f8c9 3000 	strmi.w	r3, [r9]
 80054aa:	6825      	ldr	r5, [r4, #0]
 80054ac:	f015 0506 	ands.w	r5, r5, #6
 80054b0:	d107      	bne.n	80054c2 <_printf_common+0x52>
 80054b2:	f104 0a19 	add.w	sl, r4, #25
 80054b6:	68e3      	ldr	r3, [r4, #12]
 80054b8:	f8d9 2000 	ldr.w	r2, [r9]
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	42ab      	cmp	r3, r5
 80054c0:	dc28      	bgt.n	8005514 <_printf_common+0xa4>
 80054c2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054c6:	6822      	ldr	r2, [r4, #0]
 80054c8:	3300      	adds	r3, #0
 80054ca:	bf18      	it	ne
 80054cc:	2301      	movne	r3, #1
 80054ce:	0692      	lsls	r2, r2, #26
 80054d0:	d42d      	bmi.n	800552e <_printf_common+0xbe>
 80054d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054d6:	4639      	mov	r1, r7
 80054d8:	4630      	mov	r0, r6
 80054da:	47c0      	blx	r8
 80054dc:	3001      	adds	r0, #1
 80054de:	d020      	beq.n	8005522 <_printf_common+0xb2>
 80054e0:	6823      	ldr	r3, [r4, #0]
 80054e2:	68e5      	ldr	r5, [r4, #12]
 80054e4:	f8d9 2000 	ldr.w	r2, [r9]
 80054e8:	f003 0306 	and.w	r3, r3, #6
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	bf08      	it	eq
 80054f0:	1aad      	subeq	r5, r5, r2
 80054f2:	68a3      	ldr	r3, [r4, #8]
 80054f4:	6922      	ldr	r2, [r4, #16]
 80054f6:	bf0c      	ite	eq
 80054f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054fc:	2500      	movne	r5, #0
 80054fe:	4293      	cmp	r3, r2
 8005500:	bfc4      	itt	gt
 8005502:	1a9b      	subgt	r3, r3, r2
 8005504:	18ed      	addgt	r5, r5, r3
 8005506:	f04f 0900 	mov.w	r9, #0
 800550a:	341a      	adds	r4, #26
 800550c:	454d      	cmp	r5, r9
 800550e:	d11a      	bne.n	8005546 <_printf_common+0xd6>
 8005510:	2000      	movs	r0, #0
 8005512:	e008      	b.n	8005526 <_printf_common+0xb6>
 8005514:	2301      	movs	r3, #1
 8005516:	4652      	mov	r2, sl
 8005518:	4639      	mov	r1, r7
 800551a:	4630      	mov	r0, r6
 800551c:	47c0      	blx	r8
 800551e:	3001      	adds	r0, #1
 8005520:	d103      	bne.n	800552a <_printf_common+0xba>
 8005522:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800552a:	3501      	adds	r5, #1
 800552c:	e7c3      	b.n	80054b6 <_printf_common+0x46>
 800552e:	18e1      	adds	r1, r4, r3
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	2030      	movs	r0, #48	; 0x30
 8005534:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005538:	4422      	add	r2, r4
 800553a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800553e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005542:	3302      	adds	r3, #2
 8005544:	e7c5      	b.n	80054d2 <_printf_common+0x62>
 8005546:	2301      	movs	r3, #1
 8005548:	4622      	mov	r2, r4
 800554a:	4639      	mov	r1, r7
 800554c:	4630      	mov	r0, r6
 800554e:	47c0      	blx	r8
 8005550:	3001      	adds	r0, #1
 8005552:	d0e6      	beq.n	8005522 <_printf_common+0xb2>
 8005554:	f109 0901 	add.w	r9, r9, #1
 8005558:	e7d8      	b.n	800550c <_printf_common+0x9c>
	...

0800555c <_printf_i>:
 800555c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005560:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005564:	460c      	mov	r4, r1
 8005566:	7e09      	ldrb	r1, [r1, #24]
 8005568:	b085      	sub	sp, #20
 800556a:	296e      	cmp	r1, #110	; 0x6e
 800556c:	4617      	mov	r7, r2
 800556e:	4606      	mov	r6, r0
 8005570:	4698      	mov	r8, r3
 8005572:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005574:	f000 80b3 	beq.w	80056de <_printf_i+0x182>
 8005578:	d822      	bhi.n	80055c0 <_printf_i+0x64>
 800557a:	2963      	cmp	r1, #99	; 0x63
 800557c:	d036      	beq.n	80055ec <_printf_i+0x90>
 800557e:	d80a      	bhi.n	8005596 <_printf_i+0x3a>
 8005580:	2900      	cmp	r1, #0
 8005582:	f000 80b9 	beq.w	80056f8 <_printf_i+0x19c>
 8005586:	2958      	cmp	r1, #88	; 0x58
 8005588:	f000 8083 	beq.w	8005692 <_printf_i+0x136>
 800558c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005590:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005594:	e032      	b.n	80055fc <_printf_i+0xa0>
 8005596:	2964      	cmp	r1, #100	; 0x64
 8005598:	d001      	beq.n	800559e <_printf_i+0x42>
 800559a:	2969      	cmp	r1, #105	; 0x69
 800559c:	d1f6      	bne.n	800558c <_printf_i+0x30>
 800559e:	6820      	ldr	r0, [r4, #0]
 80055a0:	6813      	ldr	r3, [r2, #0]
 80055a2:	0605      	lsls	r5, r0, #24
 80055a4:	f103 0104 	add.w	r1, r3, #4
 80055a8:	d52a      	bpl.n	8005600 <_printf_i+0xa4>
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6011      	str	r1, [r2, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da03      	bge.n	80055ba <_printf_i+0x5e>
 80055b2:	222d      	movs	r2, #45	; 0x2d
 80055b4:	425b      	negs	r3, r3
 80055b6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055ba:	486f      	ldr	r0, [pc, #444]	; (8005778 <_printf_i+0x21c>)
 80055bc:	220a      	movs	r2, #10
 80055be:	e039      	b.n	8005634 <_printf_i+0xd8>
 80055c0:	2973      	cmp	r1, #115	; 0x73
 80055c2:	f000 809d 	beq.w	8005700 <_printf_i+0x1a4>
 80055c6:	d808      	bhi.n	80055da <_printf_i+0x7e>
 80055c8:	296f      	cmp	r1, #111	; 0x6f
 80055ca:	d020      	beq.n	800560e <_printf_i+0xb2>
 80055cc:	2970      	cmp	r1, #112	; 0x70
 80055ce:	d1dd      	bne.n	800558c <_printf_i+0x30>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	f043 0320 	orr.w	r3, r3, #32
 80055d6:	6023      	str	r3, [r4, #0]
 80055d8:	e003      	b.n	80055e2 <_printf_i+0x86>
 80055da:	2975      	cmp	r1, #117	; 0x75
 80055dc:	d017      	beq.n	800560e <_printf_i+0xb2>
 80055de:	2978      	cmp	r1, #120	; 0x78
 80055e0:	d1d4      	bne.n	800558c <_printf_i+0x30>
 80055e2:	2378      	movs	r3, #120	; 0x78
 80055e4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055e8:	4864      	ldr	r0, [pc, #400]	; (800577c <_printf_i+0x220>)
 80055ea:	e055      	b.n	8005698 <_printf_i+0x13c>
 80055ec:	6813      	ldr	r3, [r2, #0]
 80055ee:	1d19      	adds	r1, r3, #4
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6011      	str	r1, [r2, #0]
 80055f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055fc:	2301      	movs	r3, #1
 80055fe:	e08c      	b.n	800571a <_printf_i+0x1be>
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6011      	str	r1, [r2, #0]
 8005604:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005608:	bf18      	it	ne
 800560a:	b21b      	sxthne	r3, r3
 800560c:	e7cf      	b.n	80055ae <_printf_i+0x52>
 800560e:	6813      	ldr	r3, [r2, #0]
 8005610:	6825      	ldr	r5, [r4, #0]
 8005612:	1d18      	adds	r0, r3, #4
 8005614:	6010      	str	r0, [r2, #0]
 8005616:	0628      	lsls	r0, r5, #24
 8005618:	d501      	bpl.n	800561e <_printf_i+0xc2>
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	e002      	b.n	8005624 <_printf_i+0xc8>
 800561e:	0668      	lsls	r0, r5, #25
 8005620:	d5fb      	bpl.n	800561a <_printf_i+0xbe>
 8005622:	881b      	ldrh	r3, [r3, #0]
 8005624:	4854      	ldr	r0, [pc, #336]	; (8005778 <_printf_i+0x21c>)
 8005626:	296f      	cmp	r1, #111	; 0x6f
 8005628:	bf14      	ite	ne
 800562a:	220a      	movne	r2, #10
 800562c:	2208      	moveq	r2, #8
 800562e:	2100      	movs	r1, #0
 8005630:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005634:	6865      	ldr	r5, [r4, #4]
 8005636:	60a5      	str	r5, [r4, #8]
 8005638:	2d00      	cmp	r5, #0
 800563a:	f2c0 8095 	blt.w	8005768 <_printf_i+0x20c>
 800563e:	6821      	ldr	r1, [r4, #0]
 8005640:	f021 0104 	bic.w	r1, r1, #4
 8005644:	6021      	str	r1, [r4, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d13d      	bne.n	80056c6 <_printf_i+0x16a>
 800564a:	2d00      	cmp	r5, #0
 800564c:	f040 808e 	bne.w	800576c <_printf_i+0x210>
 8005650:	4665      	mov	r5, ip
 8005652:	2a08      	cmp	r2, #8
 8005654:	d10b      	bne.n	800566e <_printf_i+0x112>
 8005656:	6823      	ldr	r3, [r4, #0]
 8005658:	07db      	lsls	r3, r3, #31
 800565a:	d508      	bpl.n	800566e <_printf_i+0x112>
 800565c:	6923      	ldr	r3, [r4, #16]
 800565e:	6862      	ldr	r2, [r4, #4]
 8005660:	429a      	cmp	r2, r3
 8005662:	bfde      	ittt	le
 8005664:	2330      	movle	r3, #48	; 0x30
 8005666:	f805 3c01 	strble.w	r3, [r5, #-1]
 800566a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800566e:	ebac 0305 	sub.w	r3, ip, r5
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	f8cd 8000 	str.w	r8, [sp]
 8005678:	463b      	mov	r3, r7
 800567a:	aa03      	add	r2, sp, #12
 800567c:	4621      	mov	r1, r4
 800567e:	4630      	mov	r0, r6
 8005680:	f7ff fef6 	bl	8005470 <_printf_common>
 8005684:	3001      	adds	r0, #1
 8005686:	d14d      	bne.n	8005724 <_printf_i+0x1c8>
 8005688:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800568c:	b005      	add	sp, #20
 800568e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005692:	4839      	ldr	r0, [pc, #228]	; (8005778 <_printf_i+0x21c>)
 8005694:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005698:	6813      	ldr	r3, [r2, #0]
 800569a:	6821      	ldr	r1, [r4, #0]
 800569c:	1d1d      	adds	r5, r3, #4
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6015      	str	r5, [r2, #0]
 80056a2:	060a      	lsls	r2, r1, #24
 80056a4:	d50b      	bpl.n	80056be <_printf_i+0x162>
 80056a6:	07ca      	lsls	r2, r1, #31
 80056a8:	bf44      	itt	mi
 80056aa:	f041 0120 	orrmi.w	r1, r1, #32
 80056ae:	6021      	strmi	r1, [r4, #0]
 80056b0:	b91b      	cbnz	r3, 80056ba <_printf_i+0x15e>
 80056b2:	6822      	ldr	r2, [r4, #0]
 80056b4:	f022 0220 	bic.w	r2, r2, #32
 80056b8:	6022      	str	r2, [r4, #0]
 80056ba:	2210      	movs	r2, #16
 80056bc:	e7b7      	b.n	800562e <_printf_i+0xd2>
 80056be:	064d      	lsls	r5, r1, #25
 80056c0:	bf48      	it	mi
 80056c2:	b29b      	uxthmi	r3, r3
 80056c4:	e7ef      	b.n	80056a6 <_printf_i+0x14a>
 80056c6:	4665      	mov	r5, ip
 80056c8:	fbb3 f1f2 	udiv	r1, r3, r2
 80056cc:	fb02 3311 	mls	r3, r2, r1, r3
 80056d0:	5cc3      	ldrb	r3, [r0, r3]
 80056d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056d6:	460b      	mov	r3, r1
 80056d8:	2900      	cmp	r1, #0
 80056da:	d1f5      	bne.n	80056c8 <_printf_i+0x16c>
 80056dc:	e7b9      	b.n	8005652 <_printf_i+0xf6>
 80056de:	6813      	ldr	r3, [r2, #0]
 80056e0:	6825      	ldr	r5, [r4, #0]
 80056e2:	6961      	ldr	r1, [r4, #20]
 80056e4:	1d18      	adds	r0, r3, #4
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	0628      	lsls	r0, r5, #24
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	d501      	bpl.n	80056f2 <_printf_i+0x196>
 80056ee:	6019      	str	r1, [r3, #0]
 80056f0:	e002      	b.n	80056f8 <_printf_i+0x19c>
 80056f2:	066a      	lsls	r2, r5, #25
 80056f4:	d5fb      	bpl.n	80056ee <_printf_i+0x192>
 80056f6:	8019      	strh	r1, [r3, #0]
 80056f8:	2300      	movs	r3, #0
 80056fa:	6123      	str	r3, [r4, #16]
 80056fc:	4665      	mov	r5, ip
 80056fe:	e7b9      	b.n	8005674 <_printf_i+0x118>
 8005700:	6813      	ldr	r3, [r2, #0]
 8005702:	1d19      	adds	r1, r3, #4
 8005704:	6011      	str	r1, [r2, #0]
 8005706:	681d      	ldr	r5, [r3, #0]
 8005708:	6862      	ldr	r2, [r4, #4]
 800570a:	2100      	movs	r1, #0
 800570c:	4628      	mov	r0, r5
 800570e:	f7fa fd9f 	bl	8000250 <memchr>
 8005712:	b108      	cbz	r0, 8005718 <_printf_i+0x1bc>
 8005714:	1b40      	subs	r0, r0, r5
 8005716:	6060      	str	r0, [r4, #4]
 8005718:	6863      	ldr	r3, [r4, #4]
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	2300      	movs	r3, #0
 800571e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005722:	e7a7      	b.n	8005674 <_printf_i+0x118>
 8005724:	6923      	ldr	r3, [r4, #16]
 8005726:	462a      	mov	r2, r5
 8005728:	4639      	mov	r1, r7
 800572a:	4630      	mov	r0, r6
 800572c:	47c0      	blx	r8
 800572e:	3001      	adds	r0, #1
 8005730:	d0aa      	beq.n	8005688 <_printf_i+0x12c>
 8005732:	6823      	ldr	r3, [r4, #0]
 8005734:	079b      	lsls	r3, r3, #30
 8005736:	d413      	bmi.n	8005760 <_printf_i+0x204>
 8005738:	68e0      	ldr	r0, [r4, #12]
 800573a:	9b03      	ldr	r3, [sp, #12]
 800573c:	4298      	cmp	r0, r3
 800573e:	bfb8      	it	lt
 8005740:	4618      	movlt	r0, r3
 8005742:	e7a3      	b.n	800568c <_printf_i+0x130>
 8005744:	2301      	movs	r3, #1
 8005746:	464a      	mov	r2, r9
 8005748:	4639      	mov	r1, r7
 800574a:	4630      	mov	r0, r6
 800574c:	47c0      	blx	r8
 800574e:	3001      	adds	r0, #1
 8005750:	d09a      	beq.n	8005688 <_printf_i+0x12c>
 8005752:	3501      	adds	r5, #1
 8005754:	68e3      	ldr	r3, [r4, #12]
 8005756:	9a03      	ldr	r2, [sp, #12]
 8005758:	1a9b      	subs	r3, r3, r2
 800575a:	42ab      	cmp	r3, r5
 800575c:	dcf2      	bgt.n	8005744 <_printf_i+0x1e8>
 800575e:	e7eb      	b.n	8005738 <_printf_i+0x1dc>
 8005760:	2500      	movs	r5, #0
 8005762:	f104 0919 	add.w	r9, r4, #25
 8005766:	e7f5      	b.n	8005754 <_printf_i+0x1f8>
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ac      	bne.n	80056c6 <_printf_i+0x16a>
 800576c:	7803      	ldrb	r3, [r0, #0]
 800576e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005772:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005776:	e76c      	b.n	8005652 <_printf_i+0xf6>
 8005778:	08008a7e 	.word	0x08008a7e
 800577c:	08008a8f 	.word	0x08008a8f

08005780 <_scanf_float>:
 8005780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005784:	469a      	mov	sl, r3
 8005786:	688b      	ldr	r3, [r1, #8]
 8005788:	4616      	mov	r6, r2
 800578a:	1e5a      	subs	r2, r3, #1
 800578c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005790:	b087      	sub	sp, #28
 8005792:	bf83      	ittte	hi
 8005794:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005798:	189b      	addhi	r3, r3, r2
 800579a:	9301      	strhi	r3, [sp, #4]
 800579c:	2300      	movls	r3, #0
 800579e:	bf86      	itte	hi
 80057a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80057a4:	608b      	strhi	r3, [r1, #8]
 80057a6:	9301      	strls	r3, [sp, #4]
 80057a8:	680b      	ldr	r3, [r1, #0]
 80057aa:	4688      	mov	r8, r1
 80057ac:	f04f 0b00 	mov.w	fp, #0
 80057b0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80057b4:	f848 3b1c 	str.w	r3, [r8], #28
 80057b8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80057bc:	4607      	mov	r7, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	4645      	mov	r5, r8
 80057c2:	465a      	mov	r2, fp
 80057c4:	46d9      	mov	r9, fp
 80057c6:	f8cd b008 	str.w	fp, [sp, #8]
 80057ca:	68a1      	ldr	r1, [r4, #8]
 80057cc:	b181      	cbz	r1, 80057f0 <_scanf_float+0x70>
 80057ce:	6833      	ldr	r3, [r6, #0]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	2b49      	cmp	r3, #73	; 0x49
 80057d4:	d071      	beq.n	80058ba <_scanf_float+0x13a>
 80057d6:	d84d      	bhi.n	8005874 <_scanf_float+0xf4>
 80057d8:	2b39      	cmp	r3, #57	; 0x39
 80057da:	d840      	bhi.n	800585e <_scanf_float+0xde>
 80057dc:	2b31      	cmp	r3, #49	; 0x31
 80057de:	f080 8088 	bcs.w	80058f2 <_scanf_float+0x172>
 80057e2:	2b2d      	cmp	r3, #45	; 0x2d
 80057e4:	f000 8090 	beq.w	8005908 <_scanf_float+0x188>
 80057e8:	d815      	bhi.n	8005816 <_scanf_float+0x96>
 80057ea:	2b2b      	cmp	r3, #43	; 0x2b
 80057ec:	f000 808c 	beq.w	8005908 <_scanf_float+0x188>
 80057f0:	f1b9 0f00 	cmp.w	r9, #0
 80057f4:	d003      	beq.n	80057fe <_scanf_float+0x7e>
 80057f6:	6823      	ldr	r3, [r4, #0]
 80057f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057fc:	6023      	str	r3, [r4, #0]
 80057fe:	3a01      	subs	r2, #1
 8005800:	2a01      	cmp	r2, #1
 8005802:	f200 80ea 	bhi.w	80059da <_scanf_float+0x25a>
 8005806:	4545      	cmp	r5, r8
 8005808:	f200 80dc 	bhi.w	80059c4 <_scanf_float+0x244>
 800580c:	2601      	movs	r6, #1
 800580e:	4630      	mov	r0, r6
 8005810:	b007      	add	sp, #28
 8005812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005816:	2b2e      	cmp	r3, #46	; 0x2e
 8005818:	f000 809f 	beq.w	800595a <_scanf_float+0x1da>
 800581c:	2b30      	cmp	r3, #48	; 0x30
 800581e:	d1e7      	bne.n	80057f0 <_scanf_float+0x70>
 8005820:	6820      	ldr	r0, [r4, #0]
 8005822:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005826:	d064      	beq.n	80058f2 <_scanf_float+0x172>
 8005828:	9b01      	ldr	r3, [sp, #4]
 800582a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800582e:	6020      	str	r0, [r4, #0]
 8005830:	f109 0901 	add.w	r9, r9, #1
 8005834:	b11b      	cbz	r3, 800583e <_scanf_float+0xbe>
 8005836:	3b01      	subs	r3, #1
 8005838:	3101      	adds	r1, #1
 800583a:	9301      	str	r3, [sp, #4]
 800583c:	60a1      	str	r1, [r4, #8]
 800583e:	68a3      	ldr	r3, [r4, #8]
 8005840:	3b01      	subs	r3, #1
 8005842:	60a3      	str	r3, [r4, #8]
 8005844:	6923      	ldr	r3, [r4, #16]
 8005846:	3301      	adds	r3, #1
 8005848:	6123      	str	r3, [r4, #16]
 800584a:	6873      	ldr	r3, [r6, #4]
 800584c:	3b01      	subs	r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	6073      	str	r3, [r6, #4]
 8005852:	f340 80ac 	ble.w	80059ae <_scanf_float+0x22e>
 8005856:	6833      	ldr	r3, [r6, #0]
 8005858:	3301      	adds	r3, #1
 800585a:	6033      	str	r3, [r6, #0]
 800585c:	e7b5      	b.n	80057ca <_scanf_float+0x4a>
 800585e:	2b45      	cmp	r3, #69	; 0x45
 8005860:	f000 8085 	beq.w	800596e <_scanf_float+0x1ee>
 8005864:	2b46      	cmp	r3, #70	; 0x46
 8005866:	d06a      	beq.n	800593e <_scanf_float+0x1be>
 8005868:	2b41      	cmp	r3, #65	; 0x41
 800586a:	d1c1      	bne.n	80057f0 <_scanf_float+0x70>
 800586c:	2a01      	cmp	r2, #1
 800586e:	d1bf      	bne.n	80057f0 <_scanf_float+0x70>
 8005870:	2202      	movs	r2, #2
 8005872:	e046      	b.n	8005902 <_scanf_float+0x182>
 8005874:	2b65      	cmp	r3, #101	; 0x65
 8005876:	d07a      	beq.n	800596e <_scanf_float+0x1ee>
 8005878:	d818      	bhi.n	80058ac <_scanf_float+0x12c>
 800587a:	2b54      	cmp	r3, #84	; 0x54
 800587c:	d066      	beq.n	800594c <_scanf_float+0x1cc>
 800587e:	d811      	bhi.n	80058a4 <_scanf_float+0x124>
 8005880:	2b4e      	cmp	r3, #78	; 0x4e
 8005882:	d1b5      	bne.n	80057f0 <_scanf_float+0x70>
 8005884:	2a00      	cmp	r2, #0
 8005886:	d146      	bne.n	8005916 <_scanf_float+0x196>
 8005888:	f1b9 0f00 	cmp.w	r9, #0
 800588c:	d145      	bne.n	800591a <_scanf_float+0x19a>
 800588e:	6821      	ldr	r1, [r4, #0]
 8005890:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005894:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005898:	d13f      	bne.n	800591a <_scanf_float+0x19a>
 800589a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800589e:	6021      	str	r1, [r4, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	e02e      	b.n	8005902 <_scanf_float+0x182>
 80058a4:	2b59      	cmp	r3, #89	; 0x59
 80058a6:	d01e      	beq.n	80058e6 <_scanf_float+0x166>
 80058a8:	2b61      	cmp	r3, #97	; 0x61
 80058aa:	e7de      	b.n	800586a <_scanf_float+0xea>
 80058ac:	2b6e      	cmp	r3, #110	; 0x6e
 80058ae:	d0e9      	beq.n	8005884 <_scanf_float+0x104>
 80058b0:	d815      	bhi.n	80058de <_scanf_float+0x15e>
 80058b2:	2b66      	cmp	r3, #102	; 0x66
 80058b4:	d043      	beq.n	800593e <_scanf_float+0x1be>
 80058b6:	2b69      	cmp	r3, #105	; 0x69
 80058b8:	d19a      	bne.n	80057f0 <_scanf_float+0x70>
 80058ba:	f1bb 0f00 	cmp.w	fp, #0
 80058be:	d138      	bne.n	8005932 <_scanf_float+0x1b2>
 80058c0:	f1b9 0f00 	cmp.w	r9, #0
 80058c4:	d197      	bne.n	80057f6 <_scanf_float+0x76>
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80058cc:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80058d0:	d195      	bne.n	80057fe <_scanf_float+0x7e>
 80058d2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80058d6:	6021      	str	r1, [r4, #0]
 80058d8:	f04f 0b01 	mov.w	fp, #1
 80058dc:	e011      	b.n	8005902 <_scanf_float+0x182>
 80058de:	2b74      	cmp	r3, #116	; 0x74
 80058e0:	d034      	beq.n	800594c <_scanf_float+0x1cc>
 80058e2:	2b79      	cmp	r3, #121	; 0x79
 80058e4:	d184      	bne.n	80057f0 <_scanf_float+0x70>
 80058e6:	f1bb 0f07 	cmp.w	fp, #7
 80058ea:	d181      	bne.n	80057f0 <_scanf_float+0x70>
 80058ec:	f04f 0b08 	mov.w	fp, #8
 80058f0:	e007      	b.n	8005902 <_scanf_float+0x182>
 80058f2:	eb12 0f0b 	cmn.w	r2, fp
 80058f6:	f47f af7b 	bne.w	80057f0 <_scanf_float+0x70>
 80058fa:	6821      	ldr	r1, [r4, #0]
 80058fc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005900:	6021      	str	r1, [r4, #0]
 8005902:	702b      	strb	r3, [r5, #0]
 8005904:	3501      	adds	r5, #1
 8005906:	e79a      	b.n	800583e <_scanf_float+0xbe>
 8005908:	6821      	ldr	r1, [r4, #0]
 800590a:	0608      	lsls	r0, r1, #24
 800590c:	f57f af70 	bpl.w	80057f0 <_scanf_float+0x70>
 8005910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005914:	e7f4      	b.n	8005900 <_scanf_float+0x180>
 8005916:	2a02      	cmp	r2, #2
 8005918:	d047      	beq.n	80059aa <_scanf_float+0x22a>
 800591a:	f1bb 0f01 	cmp.w	fp, #1
 800591e:	d003      	beq.n	8005928 <_scanf_float+0x1a8>
 8005920:	f1bb 0f04 	cmp.w	fp, #4
 8005924:	f47f af64 	bne.w	80057f0 <_scanf_float+0x70>
 8005928:	f10b 0b01 	add.w	fp, fp, #1
 800592c:	fa5f fb8b 	uxtb.w	fp, fp
 8005930:	e7e7      	b.n	8005902 <_scanf_float+0x182>
 8005932:	f1bb 0f03 	cmp.w	fp, #3
 8005936:	d0f7      	beq.n	8005928 <_scanf_float+0x1a8>
 8005938:	f1bb 0f05 	cmp.w	fp, #5
 800593c:	e7f2      	b.n	8005924 <_scanf_float+0x1a4>
 800593e:	f1bb 0f02 	cmp.w	fp, #2
 8005942:	f47f af55 	bne.w	80057f0 <_scanf_float+0x70>
 8005946:	f04f 0b03 	mov.w	fp, #3
 800594a:	e7da      	b.n	8005902 <_scanf_float+0x182>
 800594c:	f1bb 0f06 	cmp.w	fp, #6
 8005950:	f47f af4e 	bne.w	80057f0 <_scanf_float+0x70>
 8005954:	f04f 0b07 	mov.w	fp, #7
 8005958:	e7d3      	b.n	8005902 <_scanf_float+0x182>
 800595a:	6821      	ldr	r1, [r4, #0]
 800595c:	0588      	lsls	r0, r1, #22
 800595e:	f57f af47 	bpl.w	80057f0 <_scanf_float+0x70>
 8005962:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005966:	6021      	str	r1, [r4, #0]
 8005968:	f8cd 9008 	str.w	r9, [sp, #8]
 800596c:	e7c9      	b.n	8005902 <_scanf_float+0x182>
 800596e:	6821      	ldr	r1, [r4, #0]
 8005970:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005974:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005978:	d006      	beq.n	8005988 <_scanf_float+0x208>
 800597a:	0548      	lsls	r0, r1, #21
 800597c:	f57f af38 	bpl.w	80057f0 <_scanf_float+0x70>
 8005980:	f1b9 0f00 	cmp.w	r9, #0
 8005984:	f43f af3b 	beq.w	80057fe <_scanf_float+0x7e>
 8005988:	0588      	lsls	r0, r1, #22
 800598a:	bf58      	it	pl
 800598c:	9802      	ldrpl	r0, [sp, #8]
 800598e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005992:	bf58      	it	pl
 8005994:	eba9 0000 	subpl.w	r0, r9, r0
 8005998:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800599c:	bf58      	it	pl
 800599e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80059a2:	6021      	str	r1, [r4, #0]
 80059a4:	f04f 0900 	mov.w	r9, #0
 80059a8:	e7ab      	b.n	8005902 <_scanf_float+0x182>
 80059aa:	2203      	movs	r2, #3
 80059ac:	e7a9      	b.n	8005902 <_scanf_float+0x182>
 80059ae:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80059b2:	9205      	str	r2, [sp, #20]
 80059b4:	4631      	mov	r1, r6
 80059b6:	4638      	mov	r0, r7
 80059b8:	4798      	blx	r3
 80059ba:	9a05      	ldr	r2, [sp, #20]
 80059bc:	2800      	cmp	r0, #0
 80059be:	f43f af04 	beq.w	80057ca <_scanf_float+0x4a>
 80059c2:	e715      	b.n	80057f0 <_scanf_float+0x70>
 80059c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80059c8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80059cc:	4632      	mov	r2, r6
 80059ce:	4638      	mov	r0, r7
 80059d0:	4798      	blx	r3
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	6123      	str	r3, [r4, #16]
 80059d8:	e715      	b.n	8005806 <_scanf_float+0x86>
 80059da:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80059de:	2b06      	cmp	r3, #6
 80059e0:	d80a      	bhi.n	80059f8 <_scanf_float+0x278>
 80059e2:	f1bb 0f02 	cmp.w	fp, #2
 80059e6:	d966      	bls.n	8005ab6 <_scanf_float+0x336>
 80059e8:	f1ab 0b03 	sub.w	fp, fp, #3
 80059ec:	fa5f fb8b 	uxtb.w	fp, fp
 80059f0:	eba5 0b0b 	sub.w	fp, r5, fp
 80059f4:	455d      	cmp	r5, fp
 80059f6:	d149      	bne.n	8005a8c <_scanf_float+0x30c>
 80059f8:	6823      	ldr	r3, [r4, #0]
 80059fa:	05da      	lsls	r2, r3, #23
 80059fc:	d51f      	bpl.n	8005a3e <_scanf_float+0x2be>
 80059fe:	055b      	lsls	r3, r3, #21
 8005a00:	d466      	bmi.n	8005ad0 <_scanf_float+0x350>
 8005a02:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005a06:	6923      	ldr	r3, [r4, #16]
 8005a08:	2965      	cmp	r1, #101	; 0x65
 8005a0a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8005a0e:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8005a12:	6123      	str	r3, [r4, #16]
 8005a14:	d00d      	beq.n	8005a32 <_scanf_float+0x2b2>
 8005a16:	2945      	cmp	r1, #69	; 0x45
 8005a18:	d00b      	beq.n	8005a32 <_scanf_float+0x2b2>
 8005a1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a1e:	4632      	mov	r2, r6
 8005a20:	4638      	mov	r0, r7
 8005a22:	4798      	blx	r3
 8005a24:	6923      	ldr	r3, [r4, #16]
 8005a26:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	f1a5 0b02 	sub.w	fp, r5, #2
 8005a30:	6123      	str	r3, [r4, #16]
 8005a32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a36:	4632      	mov	r2, r6
 8005a38:	4638      	mov	r0, r7
 8005a3a:	4798      	blx	r3
 8005a3c:	465d      	mov	r5, fp
 8005a3e:	6826      	ldr	r6, [r4, #0]
 8005a40:	f016 0610 	ands.w	r6, r6, #16
 8005a44:	d170      	bne.n	8005b28 <_scanf_float+0x3a8>
 8005a46:	702e      	strb	r6, [r5, #0]
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a52:	d140      	bne.n	8005ad6 <_scanf_float+0x356>
 8005a54:	9b02      	ldr	r3, [sp, #8]
 8005a56:	eba9 0303 	sub.w	r3, r9, r3
 8005a5a:	425a      	negs	r2, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d147      	bne.n	8005af0 <_scanf_float+0x370>
 8005a60:	2200      	movs	r2, #0
 8005a62:	4638      	mov	r0, r7
 8005a64:	4641      	mov	r1, r8
 8005a66:	f000 fe6b 	bl	8006740 <_strtod_r>
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	f8da 3000 	ldr.w	r3, [sl]
 8005a70:	f010 0f02 	tst.w	r0, #2
 8005a74:	f103 0204 	add.w	r2, r3, #4
 8005a78:	f8ca 2000 	str.w	r2, [sl]
 8005a7c:	d043      	beq.n	8005b06 <_scanf_float+0x386>
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	ed83 0b00 	vstr	d0, [r3]
 8005a84:	68e3      	ldr	r3, [r4, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60e3      	str	r3, [r4, #12]
 8005a8a:	e6c0      	b.n	800580e <_scanf_float+0x8e>
 8005a8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005a90:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005a94:	4632      	mov	r2, r6
 8005a96:	4638      	mov	r0, r7
 8005a98:	4798      	blx	r3
 8005a9a:	6923      	ldr	r3, [r4, #16]
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	6123      	str	r3, [r4, #16]
 8005aa0:	e7a8      	b.n	80059f4 <_scanf_float+0x274>
 8005aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005aa6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005aaa:	4632      	mov	r2, r6
 8005aac:	4638      	mov	r0, r7
 8005aae:	4798      	blx	r3
 8005ab0:	6923      	ldr	r3, [r4, #16]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	6123      	str	r3, [r4, #16]
 8005ab6:	4545      	cmp	r5, r8
 8005ab8:	d8f3      	bhi.n	8005aa2 <_scanf_float+0x322>
 8005aba:	e6a7      	b.n	800580c <_scanf_float+0x8c>
 8005abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ac0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	4798      	blx	r3
 8005aca:	6923      	ldr	r3, [r4, #16]
 8005acc:	3b01      	subs	r3, #1
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	4545      	cmp	r5, r8
 8005ad2:	d8f3      	bhi.n	8005abc <_scanf_float+0x33c>
 8005ad4:	e69a      	b.n	800580c <_scanf_float+0x8c>
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0c1      	beq.n	8005a60 <_scanf_float+0x2e0>
 8005adc:	9904      	ldr	r1, [sp, #16]
 8005ade:	230a      	movs	r3, #10
 8005ae0:	4632      	mov	r2, r6
 8005ae2:	3101      	adds	r1, #1
 8005ae4:	4638      	mov	r0, r7
 8005ae6:	f000 feb7 	bl	8006858 <_strtol_r>
 8005aea:	9b03      	ldr	r3, [sp, #12]
 8005aec:	9d04      	ldr	r5, [sp, #16]
 8005aee:	1ac2      	subs	r2, r0, r3
 8005af0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005af4:	429d      	cmp	r5, r3
 8005af6:	bf28      	it	cs
 8005af8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005afc:	490b      	ldr	r1, [pc, #44]	; (8005b2c <_scanf_float+0x3ac>)
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 f81c 	bl	8005b3c <siprintf>
 8005b04:	e7ac      	b.n	8005a60 <_scanf_float+0x2e0>
 8005b06:	f010 0004 	ands.w	r0, r0, #4
 8005b0a:	d1b8      	bne.n	8005a7e <_scanf_float+0x2fe>
 8005b0c:	eeb4 0b40 	vcmp.f64	d0, d0
 8005b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b14:	681d      	ldr	r5, [r3, #0]
 8005b16:	d704      	bvc.n	8005b22 <_scanf_float+0x3a2>
 8005b18:	f000 f80a 	bl	8005b30 <nanf>
 8005b1c:	ed85 0a00 	vstr	s0, [r5]
 8005b20:	e7b0      	b.n	8005a84 <_scanf_float+0x304>
 8005b22:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005b26:	e7f9      	b.n	8005b1c <_scanf_float+0x39c>
 8005b28:	2600      	movs	r6, #0
 8005b2a:	e670      	b.n	800580e <_scanf_float+0x8e>
 8005b2c:	08008aa0 	.word	0x08008aa0

08005b30 <nanf>:
 8005b30:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005b38 <nanf+0x8>
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop
 8005b38:	7fc00000 	.word	0x7fc00000

08005b3c <siprintf>:
 8005b3c:	b40e      	push	{r1, r2, r3}
 8005b3e:	b500      	push	{lr}
 8005b40:	b09c      	sub	sp, #112	; 0x70
 8005b42:	ab1d      	add	r3, sp, #116	; 0x74
 8005b44:	9002      	str	r0, [sp, #8]
 8005b46:	9006      	str	r0, [sp, #24]
 8005b48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b4c:	4809      	ldr	r0, [pc, #36]	; (8005b74 <siprintf+0x38>)
 8005b4e:	9107      	str	r1, [sp, #28]
 8005b50:	9104      	str	r1, [sp, #16]
 8005b52:	4909      	ldr	r1, [pc, #36]	; (8005b78 <siprintf+0x3c>)
 8005b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b58:	9105      	str	r1, [sp, #20]
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	9301      	str	r3, [sp, #4]
 8005b5e:	a902      	add	r1, sp, #8
 8005b60:	f002 fcd4 	bl	800850c <_svfiprintf_r>
 8005b64:	9b02      	ldr	r3, [sp, #8]
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
 8005b6a:	b01c      	add	sp, #112	; 0x70
 8005b6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b70:	b003      	add	sp, #12
 8005b72:	4770      	bx	lr
 8005b74:	20000010 	.word	0x20000010
 8005b78:	ffff0208 	.word	0xffff0208

08005b7c <sulp>:
 8005b7c:	b570      	push	{r4, r5, r6, lr}
 8005b7e:	4604      	mov	r4, r0
 8005b80:	460d      	mov	r5, r1
 8005b82:	4616      	mov	r6, r2
 8005b84:	ec45 4b10 	vmov	d0, r4, r5
 8005b88:	f002 fa7c 	bl	8008084 <__ulp>
 8005b8c:	b17e      	cbz	r6, 8005bae <sulp+0x32>
 8005b8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005b92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	dd09      	ble.n	8005bae <sulp+0x32>
 8005b9a:	051b      	lsls	r3, r3, #20
 8005b9c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8005ba6:	ec41 0b17 	vmov	d7, r0, r1
 8005baa:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005bae:	bd70      	pop	{r4, r5, r6, pc}

08005bb0 <_strtod_l>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	ed2d 8b0c 	vpush	{d8-d13}
 8005bb8:	4698      	mov	r8, r3
 8005bba:	b09d      	sub	sp, #116	; 0x74
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	4604      	mov	r4, r0
 8005bc0:	4640      	mov	r0, r8
 8005bc2:	460e      	mov	r6, r1
 8005bc4:	9214      	str	r2, [sp, #80]	; 0x50
 8005bc6:	9318      	str	r3, [sp, #96]	; 0x60
 8005bc8:	f001 ff5b 	bl	8007a82 <__localeconv_l>
 8005bcc:	4681      	mov	r9, r0
 8005bce:	6800      	ldr	r0, [r0, #0]
 8005bd0:	f7fa fb36 	bl	8000240 <strlen>
 8005bd4:	f04f 0a00 	mov.w	sl, #0
 8005bd8:	4607      	mov	r7, r0
 8005bda:	f04f 0b00 	mov.w	fp, #0
 8005bde:	9617      	str	r6, [sp, #92]	; 0x5c
 8005be0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005be2:	781a      	ldrb	r2, [r3, #0]
 8005be4:	2a0d      	cmp	r2, #13
 8005be6:	d834      	bhi.n	8005c52 <_strtod_l+0xa2>
 8005be8:	2a09      	cmp	r2, #9
 8005bea:	d238      	bcs.n	8005c5e <_strtod_l+0xae>
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	d040      	beq.n	8005c72 <_strtod_l+0xc2>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	930d      	str	r3, [sp, #52]	; 0x34
 8005bf4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8005bf6:	782b      	ldrb	r3, [r5, #0]
 8005bf8:	2b30      	cmp	r3, #48	; 0x30
 8005bfa:	f040 80b3 	bne.w	8005d64 <_strtod_l+0x1b4>
 8005bfe:	786b      	ldrb	r3, [r5, #1]
 8005c00:	2b58      	cmp	r3, #88	; 0x58
 8005c02:	d001      	beq.n	8005c08 <_strtod_l+0x58>
 8005c04:	2b78      	cmp	r3, #120	; 0x78
 8005c06:	d169      	bne.n	8005cdc <_strtod_l+0x12c>
 8005c08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0a:	9301      	str	r3, [sp, #4]
 8005c0c:	ab18      	add	r3, sp, #96	; 0x60
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	f8cd 8008 	str.w	r8, [sp, #8]
 8005c14:	ab19      	add	r3, sp, #100	; 0x64
 8005c16:	4a8f      	ldr	r2, [pc, #572]	; (8005e54 <_strtod_l+0x2a4>)
 8005c18:	a917      	add	r1, sp, #92	; 0x5c
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	f001 fc57 	bl	80074ce <__gethex>
 8005c20:	f010 0607 	ands.w	r6, r0, #7
 8005c24:	4607      	mov	r7, r0
 8005c26:	d005      	beq.n	8005c34 <_strtod_l+0x84>
 8005c28:	2e06      	cmp	r6, #6
 8005c2a:	d12c      	bne.n	8005c86 <_strtod_l+0xd6>
 8005c2c:	3501      	adds	r5, #1
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9517      	str	r5, [sp, #92]	; 0x5c
 8005c32:	930d      	str	r3, [sp, #52]	; 0x34
 8005c34:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f040 855e 	bne.w	80066f8 <_strtod_l+0xb48>
 8005c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c3e:	b1eb      	cbz	r3, 8005c7c <_strtod_l+0xcc>
 8005c40:	ec4b ab17 	vmov	d7, sl, fp
 8005c44:	eeb1 0b47 	vneg.f64	d0, d7
 8005c48:	b01d      	add	sp, #116	; 0x74
 8005c4a:	ecbd 8b0c 	vpop	{d8-d13}
 8005c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c52:	2a2b      	cmp	r2, #43	; 0x2b
 8005c54:	d015      	beq.n	8005c82 <_strtod_l+0xd2>
 8005c56:	2a2d      	cmp	r2, #45	; 0x2d
 8005c58:	d004      	beq.n	8005c64 <_strtod_l+0xb4>
 8005c5a:	2a20      	cmp	r2, #32
 8005c5c:	d1c8      	bne.n	8005bf0 <_strtod_l+0x40>
 8005c5e:	3301      	adds	r3, #1
 8005c60:	9317      	str	r3, [sp, #92]	; 0x5c
 8005c62:	e7bd      	b.n	8005be0 <_strtod_l+0x30>
 8005c64:	2201      	movs	r2, #1
 8005c66:	920d      	str	r2, [sp, #52]	; 0x34
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1c0      	bne.n	8005bf4 <_strtod_l+0x44>
 8005c72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005c74:	9617      	str	r6, [sp, #92]	; 0x5c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 853c 	bne.w	80066f4 <_strtod_l+0xb44>
 8005c7c:	ec4b ab10 	vmov	d0, sl, fp
 8005c80:	e7e2      	b.n	8005c48 <_strtod_l+0x98>
 8005c82:	2200      	movs	r2, #0
 8005c84:	e7ef      	b.n	8005c66 <_strtod_l+0xb6>
 8005c86:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005c88:	b13a      	cbz	r2, 8005c9a <_strtod_l+0xea>
 8005c8a:	2135      	movs	r1, #53	; 0x35
 8005c8c:	a81a      	add	r0, sp, #104	; 0x68
 8005c8e:	f002 faf2 	bl	8008276 <__copybits>
 8005c92:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005c94:	4620      	mov	r0, r4
 8005c96:	f001 ff5e 	bl	8007b56 <_Bfree>
 8005c9a:	3e01      	subs	r6, #1
 8005c9c:	2e04      	cmp	r6, #4
 8005c9e:	d806      	bhi.n	8005cae <_strtod_l+0xfe>
 8005ca0:	e8df f006 	tbb	[pc, r6]
 8005ca4:	1714030a 	.word	0x1714030a
 8005ca8:	0a          	.byte	0x0a
 8005ca9:	00          	.byte	0x00
 8005caa:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005cae:	073b      	lsls	r3, r7, #28
 8005cb0:	d5c0      	bpl.n	8005c34 <_strtod_l+0x84>
 8005cb2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005cb6:	e7bd      	b.n	8005c34 <_strtod_l+0x84>
 8005cb8:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005cbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005cbe:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005cc2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005cc6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005cca:	e7f0      	b.n	8005cae <_strtod_l+0xfe>
 8005ccc:	f8df b188 	ldr.w	fp, [pc, #392]	; 8005e58 <_strtod_l+0x2a8>
 8005cd0:	e7ed      	b.n	8005cae <_strtod_l+0xfe>
 8005cd2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005cd6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8005cda:	e7e8      	b.n	8005cae <_strtod_l+0xfe>
 8005cdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ce2:	785b      	ldrb	r3, [r3, #1]
 8005ce4:	2b30      	cmp	r3, #48	; 0x30
 8005ce6:	d0f9      	beq.n	8005cdc <_strtod_l+0x12c>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0a3      	beq.n	8005c34 <_strtod_l+0x84>
 8005cec:	2301      	movs	r3, #1
 8005cee:	930a      	str	r3, [sp, #40]	; 0x28
 8005cf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cf2:	930c      	str	r3, [sp, #48]	; 0x30
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9306      	str	r3, [sp, #24]
 8005cf8:	9308      	str	r3, [sp, #32]
 8005cfa:	461d      	mov	r5, r3
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005d00:	f890 8000 	ldrb.w	r8, [r0]
 8005d04:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
 8005d08:	b2d9      	uxtb	r1, r3
 8005d0a:	2909      	cmp	r1, #9
 8005d0c:	d92c      	bls.n	8005d68 <_strtod_l+0x1b8>
 8005d0e:	463a      	mov	r2, r7
 8005d10:	f8d9 1000 	ldr.w	r1, [r9]
 8005d14:	f002 fd02 	bl	800871c <strncmp>
 8005d18:	2800      	cmp	r0, #0
 8005d1a:	d035      	beq.n	8005d88 <_strtod_l+0x1d8>
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	4642      	mov	r2, r8
 8005d20:	462b      	mov	r3, r5
 8005d22:	4601      	mov	r1, r0
 8005d24:	9004      	str	r0, [sp, #16]
 8005d26:	2a65      	cmp	r2, #101	; 0x65
 8005d28:	d001      	beq.n	8005d2e <_strtod_l+0x17e>
 8005d2a:	2a45      	cmp	r2, #69	; 0x45
 8005d2c:	d117      	bne.n	8005d5e <_strtod_l+0x1ae>
 8005d2e:	b923      	cbnz	r3, 8005d3a <_strtod_l+0x18a>
 8005d30:	b910      	cbnz	r0, 8005d38 <_strtod_l+0x188>
 8005d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d09c      	beq.n	8005c72 <_strtod_l+0xc2>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005d3c:	1c72      	adds	r2, r6, #1
 8005d3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d40:	7872      	ldrb	r2, [r6, #1]
 8005d42:	2a2b      	cmp	r2, #43	; 0x2b
 8005d44:	f000 8082 	beq.w	8005e4c <_strtod_l+0x29c>
 8005d48:	2a2d      	cmp	r2, #45	; 0x2d
 8005d4a:	d079      	beq.n	8005e40 <_strtod_l+0x290>
 8005d4c:	f04f 0e00 	mov.w	lr, #0
 8005d50:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8005d54:	f1bc 0f09 	cmp.w	ip, #9
 8005d58:	f240 8086 	bls.w	8005e68 <_strtod_l+0x2b8>
 8005d5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8005d5e:	f04f 0800 	mov.w	r8, #0
 8005d62:	e0a8      	b.n	8005eb6 <_strtod_l+0x306>
 8005d64:	2300      	movs	r3, #0
 8005d66:	e7c2      	b.n	8005cee <_strtod_l+0x13e>
 8005d68:	2d08      	cmp	r5, #8
 8005d6a:	bfd5      	itete	le
 8005d6c:	9908      	ldrle	r1, [sp, #32]
 8005d6e:	9906      	ldrgt	r1, [sp, #24]
 8005d70:	fb02 3301 	mlale	r3, r2, r1, r3
 8005d74:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005d78:	f100 0001 	add.w	r0, r0, #1
 8005d7c:	bfd4      	ite	le
 8005d7e:	9308      	strle	r3, [sp, #32]
 8005d80:	9306      	strgt	r3, [sp, #24]
 8005d82:	3501      	adds	r5, #1
 8005d84:	9017      	str	r0, [sp, #92]	; 0x5c
 8005d86:	e7ba      	b.n	8005cfe <_strtod_l+0x14e>
 8005d88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d8a:	19da      	adds	r2, r3, r7
 8005d8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005d8e:	5dda      	ldrb	r2, [r3, r7]
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	d038      	beq.n	8005e06 <_strtod_l+0x256>
 8005d94:	4601      	mov	r1, r0
 8005d96:	462b      	mov	r3, r5
 8005d98:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8005d9c:	2f09      	cmp	r7, #9
 8005d9e:	d913      	bls.n	8005dc8 <_strtod_l+0x218>
 8005da0:	2701      	movs	r7, #1
 8005da2:	9704      	str	r7, [sp, #16]
 8005da4:	e7bf      	b.n	8005d26 <_strtod_l+0x176>
 8005da6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	9217      	str	r2, [sp, #92]	; 0x5c
 8005dac:	785a      	ldrb	r2, [r3, #1]
 8005dae:	3001      	adds	r0, #1
 8005db0:	2a30      	cmp	r2, #48	; 0x30
 8005db2:	d0f8      	beq.n	8005da6 <_strtod_l+0x1f6>
 8005db4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005db8:	2b08      	cmp	r3, #8
 8005dba:	f200 84a2 	bhi.w	8006702 <_strtod_l+0xb52>
 8005dbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005dc0:	930c      	str	r3, [sp, #48]	; 0x30
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	f1b2 0830 	subs.w	r8, r2, #48	; 0x30
 8005dcc:	f100 0701 	add.w	r7, r0, #1
 8005dd0:	d013      	beq.n	8005dfa <_strtod_l+0x24a>
 8005dd2:	4439      	add	r1, r7
 8005dd4:	eb00 0e03 	add.w	lr, r0, r3
 8005dd8:	461f      	mov	r7, r3
 8005dda:	f04f 0c0a 	mov.w	ip, #10
 8005dde:	45be      	cmp	lr, r7
 8005de0:	d113      	bne.n	8005e0a <_strtod_l+0x25a>
 8005de2:	181f      	adds	r7, r3, r0
 8005de4:	2f08      	cmp	r7, #8
 8005de6:	f103 0301 	add.w	r3, r3, #1
 8005dea:	4403      	add	r3, r0
 8005dec:	dc1d      	bgt.n	8005e2a <_strtod_l+0x27a>
 8005dee:	9a08      	ldr	r2, [sp, #32]
 8005df0:	200a      	movs	r0, #10
 8005df2:	fb00 8202 	mla	r2, r0, r2, r8
 8005df6:	9208      	str	r2, [sp, #32]
 8005df8:	2700      	movs	r7, #0
 8005dfa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005dfc:	1c50      	adds	r0, r2, #1
 8005dfe:	9017      	str	r0, [sp, #92]	; 0x5c
 8005e00:	7852      	ldrb	r2, [r2, #1]
 8005e02:	4638      	mov	r0, r7
 8005e04:	e7c8      	b.n	8005d98 <_strtod_l+0x1e8>
 8005e06:	4628      	mov	r0, r5
 8005e08:	e7d2      	b.n	8005db0 <_strtod_l+0x200>
 8005e0a:	2f08      	cmp	r7, #8
 8005e0c:	f107 0701 	add.w	r7, r7, #1
 8005e10:	dc04      	bgt.n	8005e1c <_strtod_l+0x26c>
 8005e12:	9a08      	ldr	r2, [sp, #32]
 8005e14:	fb0c f202 	mul.w	r2, ip, r2
 8005e18:	9208      	str	r2, [sp, #32]
 8005e1a:	e7e0      	b.n	8005dde <_strtod_l+0x22e>
 8005e1c:	2f10      	cmp	r7, #16
 8005e1e:	bfde      	ittt	le
 8005e20:	9a06      	ldrle	r2, [sp, #24]
 8005e22:	fb0c f202 	mulle.w	r2, ip, r2
 8005e26:	9206      	strle	r2, [sp, #24]
 8005e28:	e7d9      	b.n	8005dde <_strtod_l+0x22e>
 8005e2a:	2b10      	cmp	r3, #16
 8005e2c:	bfdf      	itttt	le
 8005e2e:	9a06      	ldrle	r2, [sp, #24]
 8005e30:	200a      	movle	r0, #10
 8005e32:	fb00 8202 	mlale	r2, r0, r2, r8
 8005e36:	9206      	strle	r2, [sp, #24]
 8005e38:	e7de      	b.n	8005df8 <_strtod_l+0x248>
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	9304      	str	r3, [sp, #16]
 8005e3e:	e777      	b.n	8005d30 <_strtod_l+0x180>
 8005e40:	f04f 0e01 	mov.w	lr, #1
 8005e44:	1cb2      	adds	r2, r6, #2
 8005e46:	9217      	str	r2, [sp, #92]	; 0x5c
 8005e48:	78b2      	ldrb	r2, [r6, #2]
 8005e4a:	e781      	b.n	8005d50 <_strtod_l+0x1a0>
 8005e4c:	f04f 0e00 	mov.w	lr, #0
 8005e50:	e7f8      	b.n	8005e44 <_strtod_l+0x294>
 8005e52:	bf00      	nop
 8005e54:	08008aa8 	.word	0x08008aa8
 8005e58:	7ff00000 	.word	0x7ff00000
 8005e5c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e5e:	f102 0c01 	add.w	ip, r2, #1
 8005e62:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8005e66:	7852      	ldrb	r2, [r2, #1]
 8005e68:	2a30      	cmp	r2, #48	; 0x30
 8005e6a:	d0f7      	beq.n	8005e5c <_strtod_l+0x2ac>
 8005e6c:	f1a2 0c31 	sub.w	ip, r2, #49	; 0x31
 8005e70:	f1bc 0f08 	cmp.w	ip, #8
 8005e74:	f63f af73 	bhi.w	8005d5e <_strtod_l+0x1ae>
 8005e78:	f1a2 0830 	sub.w	r8, r2, #48	; 0x30
 8005e7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e7e:	920e      	str	r2, [sp, #56]	; 0x38
 8005e80:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005e82:	f102 0c01 	add.w	ip, r2, #1
 8005e86:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
 8005e8a:	7852      	ldrb	r2, [r2, #1]
 8005e8c:	f1a2 0930 	sub.w	r9, r2, #48	; 0x30
 8005e90:	f1b9 0f09 	cmp.w	r9, #9
 8005e94:	d939      	bls.n	8005f0a <_strtod_l+0x35a>
 8005e96:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005e98:	ebac 0c07 	sub.w	ip, ip, r7
 8005e9c:	f1bc 0f08 	cmp.w	ip, #8
 8005ea0:	f644 6c1f 	movw	ip, #19999	; 0x4e1f
 8005ea4:	dc37      	bgt.n	8005f16 <_strtod_l+0x366>
 8005ea6:	45e0      	cmp	r8, ip
 8005ea8:	bfa8      	it	ge
 8005eaa:	46e0      	movge	r8, ip
 8005eac:	f1be 0f00 	cmp.w	lr, #0
 8005eb0:	d001      	beq.n	8005eb6 <_strtod_l+0x306>
 8005eb2:	f1c8 0800 	rsb	r8, r8, #0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d151      	bne.n	8005f5e <_strtod_l+0x3ae>
 8005eba:	2800      	cmp	r0, #0
 8005ebc:	f47f aeba 	bne.w	8005c34 <_strtod_l+0x84>
 8005ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f47f aeb6 	bne.w	8005c34 <_strtod_l+0x84>
 8005ec8:	9b04      	ldr	r3, [sp, #16]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	f47f aed1 	bne.w	8005c72 <_strtod_l+0xc2>
 8005ed0:	2a4e      	cmp	r2, #78	; 0x4e
 8005ed2:	d027      	beq.n	8005f24 <_strtod_l+0x374>
 8005ed4:	dc21      	bgt.n	8005f1a <_strtod_l+0x36a>
 8005ed6:	2a49      	cmp	r2, #73	; 0x49
 8005ed8:	f47f aecb 	bne.w	8005c72 <_strtod_l+0xc2>
 8005edc:	499a      	ldr	r1, [pc, #616]	; (8006148 <_strtod_l+0x598>)
 8005ede:	a817      	add	r0, sp, #92	; 0x5c
 8005ee0:	f001 fd28 	bl	8007934 <__match>
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	f43f aec4 	beq.w	8005c72 <_strtod_l+0xc2>
 8005eea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005eec:	4997      	ldr	r1, [pc, #604]	; (800614c <_strtod_l+0x59c>)
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	a817      	add	r0, sp, #92	; 0x5c
 8005ef2:	9317      	str	r3, [sp, #92]	; 0x5c
 8005ef4:	f001 fd1e 	bl	8007934 <__match>
 8005ef8:	b910      	cbnz	r0, 8005f00 <_strtod_l+0x350>
 8005efa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005efc:	3301      	adds	r3, #1
 8005efe:	9317      	str	r3, [sp, #92]	; 0x5c
 8005f00:	f8df b260 	ldr.w	fp, [pc, #608]	; 8006164 <_strtod_l+0x5b4>
 8005f04:	f04f 0a00 	mov.w	sl, #0
 8005f08:	e694      	b.n	8005c34 <_strtod_l+0x84>
 8005f0a:	270a      	movs	r7, #10
 8005f0c:	fb07 2808 	mla	r8, r7, r8, r2
 8005f10:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
 8005f14:	e7b4      	b.n	8005e80 <_strtod_l+0x2d0>
 8005f16:	46e0      	mov	r8, ip
 8005f18:	e7c8      	b.n	8005eac <_strtod_l+0x2fc>
 8005f1a:	2a69      	cmp	r2, #105	; 0x69
 8005f1c:	d0de      	beq.n	8005edc <_strtod_l+0x32c>
 8005f1e:	2a6e      	cmp	r2, #110	; 0x6e
 8005f20:	f47f aea7 	bne.w	8005c72 <_strtod_l+0xc2>
 8005f24:	498a      	ldr	r1, [pc, #552]	; (8006150 <_strtod_l+0x5a0>)
 8005f26:	a817      	add	r0, sp, #92	; 0x5c
 8005f28:	f001 fd04 	bl	8007934 <__match>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f43f aea0 	beq.w	8005c72 <_strtod_l+0xc2>
 8005f32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b28      	cmp	r3, #40	; 0x28
 8005f38:	d10e      	bne.n	8005f58 <_strtod_l+0x3a8>
 8005f3a:	aa1a      	add	r2, sp, #104	; 0x68
 8005f3c:	4985      	ldr	r1, [pc, #532]	; (8006154 <_strtod_l+0x5a4>)
 8005f3e:	a817      	add	r0, sp, #92	; 0x5c
 8005f40:	f001 fd0c 	bl	800795c <__hexnan>
 8005f44:	2805      	cmp	r0, #5
 8005f46:	d107      	bne.n	8005f58 <_strtod_l+0x3a8>
 8005f48:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005f4a:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005f4e:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005f52:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005f56:	e66d      	b.n	8005c34 <_strtod_l+0x84>
 8005f58:	f8df b20c 	ldr.w	fp, [pc, #524]	; 8006168 <_strtod_l+0x5b8>
 8005f5c:	e7d2      	b.n	8005f04 <_strtod_l+0x354>
 8005f5e:	eddd 7a08 	vldr	s15, [sp, #32]
 8005f62:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005f66:	eba8 0201 	sub.w	r2, r8, r1
 8005f6a:	2d00      	cmp	r5, #0
 8005f6c:	bf08      	it	eq
 8005f6e:	461d      	moveq	r5, r3
 8005f70:	2b10      	cmp	r3, #16
 8005f72:	9204      	str	r2, [sp, #16]
 8005f74:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8005f78:	461a      	mov	r2, r3
 8005f7a:	bfa8      	it	ge
 8005f7c:	2210      	movge	r2, #16
 8005f7e:	2b09      	cmp	r3, #9
 8005f80:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005f84:	dc14      	bgt.n	8005fb0 <_strtod_l+0x400>
 8005f86:	9904      	ldr	r1, [sp, #16]
 8005f88:	2900      	cmp	r1, #0
 8005f8a:	f43f ae53 	beq.w	8005c34 <_strtod_l+0x84>
 8005f8e:	9904      	ldr	r1, [sp, #16]
 8005f90:	dd72      	ble.n	8006078 <_strtod_l+0x4c8>
 8005f92:	2916      	cmp	r1, #22
 8005f94:	dc5a      	bgt.n	800604c <_strtod_l+0x49c>
 8005f96:	4970      	ldr	r1, [pc, #448]	; (8006158 <_strtod_l+0x5a8>)
 8005f98:	9b04      	ldr	r3, [sp, #16]
 8005f9a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f9e:	ed91 7b00 	vldr	d7, [r1]
 8005fa2:	ec4b ab16 	vmov	d6, sl, fp
 8005fa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005faa:	ec5b ab17 	vmov	sl, fp, d7
 8005fae:	e641      	b.n	8005c34 <_strtod_l+0x84>
 8005fb0:	4969      	ldr	r1, [pc, #420]	; (8006158 <_strtod_l+0x5a8>)
 8005fb2:	eddd 7a06 	vldr	s15, [sp, #24]
 8005fb6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005fba:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8005fbe:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8005fc2:	2b0f      	cmp	r3, #15
 8005fc4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005fc8:	eea5 7b06 	vfma.f64	d7, d5, d6
 8005fcc:	ec5b ab17 	vmov	sl, fp, d7
 8005fd0:	ddd9      	ble.n	8005f86 <_strtod_l+0x3d6>
 8005fd2:	9904      	ldr	r1, [sp, #16]
 8005fd4:	1a9a      	subs	r2, r3, r2
 8005fd6:	440a      	add	r2, r1
 8005fd8:	2a00      	cmp	r2, #0
 8005fda:	f340 8096 	ble.w	800610a <_strtod_l+0x55a>
 8005fde:	f012 000f 	ands.w	r0, r2, #15
 8005fe2:	d00a      	beq.n	8005ffa <_strtod_l+0x44a>
 8005fe4:	495c      	ldr	r1, [pc, #368]	; (8006158 <_strtod_l+0x5a8>)
 8005fe6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005fea:	ed91 7b00 	vldr	d7, [r1]
 8005fee:	ec4b ab16 	vmov	d6, sl, fp
 8005ff2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ff6:	ec5b ab17 	vmov	sl, fp, d7
 8005ffa:	f032 020f 	bics.w	r2, r2, #15
 8005ffe:	d072      	beq.n	80060e6 <_strtod_l+0x536>
 8006000:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8006004:	dd45      	ble.n	8006092 <_strtod_l+0x4e2>
 8006006:	2500      	movs	r5, #0
 8006008:	46a8      	mov	r8, r5
 800600a:	9506      	str	r5, [sp, #24]
 800600c:	46a9      	mov	r9, r5
 800600e:	2322      	movs	r3, #34	; 0x22
 8006010:	f8df b150 	ldr.w	fp, [pc, #336]	; 8006164 <_strtod_l+0x5b4>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	f04f 0a00 	mov.w	sl, #0
 800601a:	9b06      	ldr	r3, [sp, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f43f ae09 	beq.w	8005c34 <_strtod_l+0x84>
 8006022:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006024:	4620      	mov	r0, r4
 8006026:	f001 fd96 	bl	8007b56 <_Bfree>
 800602a:	4649      	mov	r1, r9
 800602c:	4620      	mov	r0, r4
 800602e:	f001 fd92 	bl	8007b56 <_Bfree>
 8006032:	4641      	mov	r1, r8
 8006034:	4620      	mov	r0, r4
 8006036:	f001 fd8e 	bl	8007b56 <_Bfree>
 800603a:	9906      	ldr	r1, [sp, #24]
 800603c:	4620      	mov	r0, r4
 800603e:	f001 fd8a 	bl	8007b56 <_Bfree>
 8006042:	4629      	mov	r1, r5
 8006044:	4620      	mov	r0, r4
 8006046:	f001 fd86 	bl	8007b56 <_Bfree>
 800604a:	e5f3      	b.n	8005c34 <_strtod_l+0x84>
 800604c:	9804      	ldr	r0, [sp, #16]
 800604e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8006052:	4281      	cmp	r1, r0
 8006054:	dbbd      	blt.n	8005fd2 <_strtod_l+0x422>
 8006056:	4a40      	ldr	r2, [pc, #256]	; (8006158 <_strtod_l+0x5a8>)
 8006058:	f1c3 030f 	rsb	r3, r3, #15
 800605c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8006060:	ed91 7b00 	vldr	d7, [r1]
 8006064:	ec4b ab16 	vmov	d6, sl, fp
 8006068:	1ac3      	subs	r3, r0, r3
 800606a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800606e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006072:	ed92 6b00 	vldr	d6, [r2]
 8006076:	e796      	b.n	8005fa6 <_strtod_l+0x3f6>
 8006078:	3116      	adds	r1, #22
 800607a:	dbaa      	blt.n	8005fd2 <_strtod_l+0x422>
 800607c:	4936      	ldr	r1, [pc, #216]	; (8006158 <_strtod_l+0x5a8>)
 800607e:	9b04      	ldr	r3, [sp, #16]
 8006080:	eba1 01c3 	sub.w	r1, r1, r3, lsl #3
 8006084:	ed91 7b00 	vldr	d7, [r1]
 8006088:	ec4b ab16 	vmov	d6, sl, fp
 800608c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006090:	e78b      	b.n	8005faa <_strtod_l+0x3fa>
 8006092:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8006096:	2000      	movs	r0, #0
 8006098:	4e30      	ldr	r6, [pc, #192]	; (800615c <_strtod_l+0x5ac>)
 800609a:	1112      	asrs	r2, r2, #4
 800609c:	4601      	mov	r1, r0
 800609e:	2a01      	cmp	r2, #1
 80060a0:	dc23      	bgt.n	80060ea <_strtod_l+0x53a>
 80060a2:	b108      	cbz	r0, 80060a8 <_strtod_l+0x4f8>
 80060a4:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80060a8:	4a2c      	ldr	r2, [pc, #176]	; (800615c <_strtod_l+0x5ac>)
 80060aa:	482d      	ldr	r0, [pc, #180]	; (8006160 <_strtod_l+0x5b0>)
 80060ac:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80060b0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80060b4:	ed91 7b00 	vldr	d7, [r1]
 80060b8:	ec4b ab16 	vmov	d6, sl, fp
 80060bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060c0:	ed8d 7b06 	vstr	d7, [sp, #24]
 80060c4:	9907      	ldr	r1, [sp, #28]
 80060c6:	4a27      	ldr	r2, [pc, #156]	; (8006164 <_strtod_l+0x5b4>)
 80060c8:	400a      	ands	r2, r1
 80060ca:	4282      	cmp	r2, r0
 80060cc:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 80060d0:	d899      	bhi.n	8006006 <_strtod_l+0x456>
 80060d2:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80060d6:	4282      	cmp	r2, r0
 80060d8:	bf86      	itte	hi
 80060da:	f8df b090 	ldrhi.w	fp, [pc, #144]	; 800616c <_strtod_l+0x5bc>
 80060de:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 80060e2:	f101 7b54 	addls.w	fp, r1, #55574528	; 0x3500000
 80060e6:	2700      	movs	r7, #0
 80060e8:	e070      	b.n	80061cc <_strtod_l+0x61c>
 80060ea:	07d7      	lsls	r7, r2, #31
 80060ec:	d50a      	bpl.n	8006104 <_strtod_l+0x554>
 80060ee:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
 80060f2:	ed90 7b00 	vldr	d7, [r0]
 80060f6:	ed9d 6b06 	vldr	d6, [sp, #24]
 80060fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80060fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006102:	2001      	movs	r0, #1
 8006104:	3101      	adds	r1, #1
 8006106:	1052      	asrs	r2, r2, #1
 8006108:	e7c9      	b.n	800609e <_strtod_l+0x4ee>
 800610a:	d0ec      	beq.n	80060e6 <_strtod_l+0x536>
 800610c:	4252      	negs	r2, r2
 800610e:	f012 000f 	ands.w	r0, r2, #15
 8006112:	d00a      	beq.n	800612a <_strtod_l+0x57a>
 8006114:	4910      	ldr	r1, [pc, #64]	; (8006158 <_strtod_l+0x5a8>)
 8006116:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800611a:	ed91 7b00 	vldr	d7, [r1]
 800611e:	ec4b ab16 	vmov	d6, sl, fp
 8006122:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006126:	ec5b ab17 	vmov	sl, fp, d7
 800612a:	1112      	asrs	r2, r2, #4
 800612c:	d0db      	beq.n	80060e6 <_strtod_l+0x536>
 800612e:	2a1f      	cmp	r2, #31
 8006130:	dd1e      	ble.n	8006170 <_strtod_l+0x5c0>
 8006132:	2500      	movs	r5, #0
 8006134:	46a8      	mov	r8, r5
 8006136:	9506      	str	r5, [sp, #24]
 8006138:	46a9      	mov	r9, r5
 800613a:	2322      	movs	r3, #34	; 0x22
 800613c:	f04f 0a00 	mov.w	sl, #0
 8006140:	f04f 0b00 	mov.w	fp, #0
 8006144:	6023      	str	r3, [r4, #0]
 8006146:	e768      	b.n	800601a <_strtod_l+0x46a>
 8006148:	08008a71 	.word	0x08008a71
 800614c:	08008afb 	.word	0x08008afb
 8006150:	08008a79 	.word	0x08008a79
 8006154:	08008abc 	.word	0x08008abc
 8006158:	08008b38 	.word	0x08008b38
 800615c:	08008b10 	.word	0x08008b10
 8006160:	7ca00000 	.word	0x7ca00000
 8006164:	7ff00000 	.word	0x7ff00000
 8006168:	fff80000 	.word	0xfff80000
 800616c:	7fefffff 	.word	0x7fefffff
 8006170:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8006174:	f012 0710 	ands.w	r7, r2, #16
 8006178:	49ab      	ldr	r1, [pc, #684]	; (8006428 <_strtod_l+0x878>)
 800617a:	bf18      	it	ne
 800617c:	276a      	movne	r7, #106	; 0x6a
 800617e:	2000      	movs	r0, #0
 8006180:	2a00      	cmp	r2, #0
 8006182:	f300 8113 	bgt.w	80063ac <_strtod_l+0x7fc>
 8006186:	b108      	cbz	r0, 800618c <_strtod_l+0x5dc>
 8006188:	e9dd ab06 	ldrd	sl, fp, [sp, #24]
 800618c:	b1bf      	cbz	r7, 80061be <_strtod_l+0x60e>
 800618e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006192:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8006196:	2a00      	cmp	r2, #0
 8006198:	4659      	mov	r1, fp
 800619a:	dd10      	ble.n	80061be <_strtod_l+0x60e>
 800619c:	2a1f      	cmp	r2, #31
 800619e:	f340 8113 	ble.w	80063c8 <_strtod_l+0x818>
 80061a2:	2a34      	cmp	r2, #52	; 0x34
 80061a4:	bfde      	ittt	le
 80061a6:	3a20      	suble	r2, #32
 80061a8:	f04f 30ff 	movle.w	r0, #4294967295	; 0xffffffff
 80061ac:	fa00 f202 	lslle.w	r2, r0, r2
 80061b0:	f04f 0a00 	mov.w	sl, #0
 80061b4:	bfcc      	ite	gt
 80061b6:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80061ba:	ea02 0b01 	andle.w	fp, r2, r1
 80061be:	ec4b ab17 	vmov	d7, sl, fp
 80061c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80061c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ca:	d0b2      	beq.n	8006132 <_strtod_l+0x582>
 80061cc:	9a08      	ldr	r2, [sp, #32]
 80061ce:	9200      	str	r2, [sp, #0]
 80061d0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061d2:	462a      	mov	r2, r5
 80061d4:	4620      	mov	r0, r4
 80061d6:	f001 fd10 	bl	8007bfa <__s2b>
 80061da:	9006      	str	r0, [sp, #24]
 80061dc:	2800      	cmp	r0, #0
 80061de:	f43f af12 	beq.w	8006006 <_strtod_l+0x456>
 80061e2:	9a04      	ldr	r2, [sp, #16]
 80061e4:	9b04      	ldr	r3, [sp, #16]
 80061e6:	2a00      	cmp	r2, #0
 80061e8:	f1c3 0300 	rsb	r3, r3, #0
 80061ec:	ed9f 9b88 	vldr	d9, [pc, #544]	; 8006410 <_strtod_l+0x860>
 80061f0:	bfa8      	it	ge
 80061f2:	2300      	movge	r3, #0
 80061f4:	ed9f ab88 	vldr	d10, [pc, #544]	; 8006418 <_strtod_l+0x868>
 80061f8:	ed9f bb89 	vldr	d11, [pc, #548]	; 8006420 <_strtod_l+0x870>
 80061fc:	930e      	str	r3, [sp, #56]	; 0x38
 80061fe:	2500      	movs	r5, #0
 8006200:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006204:	9310      	str	r3, [sp, #64]	; 0x40
 8006206:	46a8      	mov	r8, r5
 8006208:	9b06      	ldr	r3, [sp, #24]
 800620a:	4620      	mov	r0, r4
 800620c:	6859      	ldr	r1, [r3, #4]
 800620e:	f001 fc6e 	bl	8007aee <_Balloc>
 8006212:	4681      	mov	r9, r0
 8006214:	2800      	cmp	r0, #0
 8006216:	f43f aefa 	beq.w	800600e <_strtod_l+0x45e>
 800621a:	9b06      	ldr	r3, [sp, #24]
 800621c:	691a      	ldr	r2, [r3, #16]
 800621e:	3202      	adds	r2, #2
 8006220:	f103 010c 	add.w	r1, r3, #12
 8006224:	0092      	lsls	r2, r2, #2
 8006226:	300c      	adds	r0, #12
 8006228:	f001 fc56 	bl	8007ad8 <memcpy>
 800622c:	aa1a      	add	r2, sp, #104	; 0x68
 800622e:	a919      	add	r1, sp, #100	; 0x64
 8006230:	ec4b ab10 	vmov	d0, sl, fp
 8006234:	4620      	mov	r0, r4
 8006236:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800623a:	f001 ff99 	bl	8008170 <__d2b>
 800623e:	9018      	str	r0, [sp, #96]	; 0x60
 8006240:	2800      	cmp	r0, #0
 8006242:	f43f aee4 	beq.w	800600e <_strtod_l+0x45e>
 8006246:	2101      	movs	r1, #1
 8006248:	4620      	mov	r0, r4
 800624a:	f001 fd62 	bl	8007d12 <__i2b>
 800624e:	4680      	mov	r8, r0
 8006250:	2800      	cmp	r0, #0
 8006252:	f43f aedc 	beq.w	800600e <_strtod_l+0x45e>
 8006256:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8006258:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800625a:	2e00      	cmp	r6, #0
 800625c:	bfb1      	iteee	lt
 800625e:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8006260:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006262:	9810      	ldrge	r0, [sp, #64]	; 0x40
 8006264:	18f3      	addge	r3, r6, r3
 8006266:	bfba      	itte	lt
 8006268:	1b98      	sublt	r0, r3, r6
 800626a:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800626c:	9308      	strge	r3, [sp, #32]
 800626e:	eba6 0607 	sub.w	r6, r6, r7
 8006272:	bfb8      	it	lt
 8006274:	9308      	strlt	r3, [sp, #32]
 8006276:	4416      	add	r6, r2
 8006278:	4b6c      	ldr	r3, [pc, #432]	; (800642c <_strtod_l+0x87c>)
 800627a:	3e01      	subs	r6, #1
 800627c:	429e      	cmp	r6, r3
 800627e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006282:	f280 80b4 	bge.w	80063ee <_strtod_l+0x83e>
 8006286:	1b9b      	subs	r3, r3, r6
 8006288:	2b1f      	cmp	r3, #31
 800628a:	eba2 0203 	sub.w	r2, r2, r3
 800628e:	f04f 0101 	mov.w	r1, #1
 8006292:	f300 80a0 	bgt.w	80063d6 <_strtod_l+0x826>
 8006296:	fa01 f303 	lsl.w	r3, r1, r3
 800629a:	9311      	str	r3, [sp, #68]	; 0x44
 800629c:	2300      	movs	r3, #0
 800629e:	930f      	str	r3, [sp, #60]	; 0x3c
 80062a0:	9b08      	ldr	r3, [sp, #32]
 80062a2:	4413      	add	r3, r2
 80062a4:	4402      	add	r2, r0
 80062a6:	18be      	adds	r6, r7, r2
 80062a8:	9a08      	ldr	r2, [sp, #32]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	bfa8      	it	ge
 80062ae:	461a      	movge	r2, r3
 80062b0:	42b2      	cmp	r2, r6
 80062b2:	bfa8      	it	ge
 80062b4:	4632      	movge	r2, r6
 80062b6:	2a00      	cmp	r2, #0
 80062b8:	dd04      	ble.n	80062c4 <_strtod_l+0x714>
 80062ba:	9908      	ldr	r1, [sp, #32]
 80062bc:	1a9b      	subs	r3, r3, r2
 80062be:	1ab6      	subs	r6, r6, r2
 80062c0:	1a8a      	subs	r2, r1, r2
 80062c2:	9208      	str	r2, [sp, #32]
 80062c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80062c6:	b1c2      	cbz	r2, 80062fa <_strtod_l+0x74a>
 80062c8:	4641      	mov	r1, r8
 80062ca:	4620      	mov	r0, r4
 80062cc:	9315      	str	r3, [sp, #84]	; 0x54
 80062ce:	f001 fdbf 	bl	8007e50 <__pow5mult>
 80062d2:	4680      	mov	r8, r0
 80062d4:	2800      	cmp	r0, #0
 80062d6:	f43f ae9a 	beq.w	800600e <_strtod_l+0x45e>
 80062da:	4601      	mov	r1, r0
 80062dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80062de:	4620      	mov	r0, r4
 80062e0:	f001 fd20 	bl	8007d24 <__multiply>
 80062e4:	900c      	str	r0, [sp, #48]	; 0x30
 80062e6:	2800      	cmp	r0, #0
 80062e8:	f43f ae91 	beq.w	800600e <_strtod_l+0x45e>
 80062ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80062ee:	4620      	mov	r0, r4
 80062f0:	f001 fc31 	bl	8007b56 <_Bfree>
 80062f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80062f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062f8:	9218      	str	r2, [sp, #96]	; 0x60
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dc7c      	bgt.n	80063f8 <_strtod_l+0x848>
 80062fe:	9b04      	ldr	r3, [sp, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	dd08      	ble.n	8006316 <_strtod_l+0x766>
 8006304:	4649      	mov	r1, r9
 8006306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006308:	4620      	mov	r0, r4
 800630a:	f001 fda1 	bl	8007e50 <__pow5mult>
 800630e:	4681      	mov	r9, r0
 8006310:	2800      	cmp	r0, #0
 8006312:	f43f ae7c 	beq.w	800600e <_strtod_l+0x45e>
 8006316:	2e00      	cmp	r6, #0
 8006318:	dd08      	ble.n	800632c <_strtod_l+0x77c>
 800631a:	4649      	mov	r1, r9
 800631c:	4632      	mov	r2, r6
 800631e:	4620      	mov	r0, r4
 8006320:	f001 fde4 	bl	8007eec <__lshift>
 8006324:	4681      	mov	r9, r0
 8006326:	2800      	cmp	r0, #0
 8006328:	f43f ae71 	beq.w	800600e <_strtod_l+0x45e>
 800632c:	9b08      	ldr	r3, [sp, #32]
 800632e:	2b00      	cmp	r3, #0
 8006330:	dd08      	ble.n	8006344 <_strtod_l+0x794>
 8006332:	4641      	mov	r1, r8
 8006334:	461a      	mov	r2, r3
 8006336:	4620      	mov	r0, r4
 8006338:	f001 fdd8 	bl	8007eec <__lshift>
 800633c:	4680      	mov	r8, r0
 800633e:	2800      	cmp	r0, #0
 8006340:	f43f ae65 	beq.w	800600e <_strtod_l+0x45e>
 8006344:	464a      	mov	r2, r9
 8006346:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006348:	4620      	mov	r0, r4
 800634a:	f001 fe3d 	bl	8007fc8 <__mdiff>
 800634e:	4605      	mov	r5, r0
 8006350:	2800      	cmp	r0, #0
 8006352:	f43f ae5c 	beq.w	800600e <_strtod_l+0x45e>
 8006356:	68c3      	ldr	r3, [r0, #12]
 8006358:	930c      	str	r3, [sp, #48]	; 0x30
 800635a:	2300      	movs	r3, #0
 800635c:	60c3      	str	r3, [r0, #12]
 800635e:	4641      	mov	r1, r8
 8006360:	f001 fe18 	bl	8007f94 <__mcmp>
 8006364:	2800      	cmp	r0, #0
 8006366:	da63      	bge.n	8006430 <_strtod_l+0x880>
 8006368:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800636a:	b9e3      	cbnz	r3, 80063a6 <_strtod_l+0x7f6>
 800636c:	f1ba 0f00 	cmp.w	sl, #0
 8006370:	d119      	bne.n	80063a6 <_strtod_l+0x7f6>
 8006372:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006376:	b9b3      	cbnz	r3, 80063a6 <_strtod_l+0x7f6>
 8006378:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800637c:	0d1b      	lsrs	r3, r3, #20
 800637e:	051b      	lsls	r3, r3, #20
 8006380:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006384:	d90f      	bls.n	80063a6 <_strtod_l+0x7f6>
 8006386:	696b      	ldr	r3, [r5, #20]
 8006388:	b913      	cbnz	r3, 8006390 <_strtod_l+0x7e0>
 800638a:	692b      	ldr	r3, [r5, #16]
 800638c:	2b01      	cmp	r3, #1
 800638e:	dd0a      	ble.n	80063a6 <_strtod_l+0x7f6>
 8006390:	4629      	mov	r1, r5
 8006392:	2201      	movs	r2, #1
 8006394:	4620      	mov	r0, r4
 8006396:	f001 fda9 	bl	8007eec <__lshift>
 800639a:	4641      	mov	r1, r8
 800639c:	4605      	mov	r5, r0
 800639e:	f001 fdf9 	bl	8007f94 <__mcmp>
 80063a2:	2800      	cmp	r0, #0
 80063a4:	dc75      	bgt.n	8006492 <_strtod_l+0x8e2>
 80063a6:	2f00      	cmp	r7, #0
 80063a8:	d17f      	bne.n	80064aa <_strtod_l+0x8fa>
 80063aa:	e63a      	b.n	8006022 <_strtod_l+0x472>
 80063ac:	07d6      	lsls	r6, r2, #31
 80063ae:	d508      	bpl.n	80063c2 <_strtod_l+0x812>
 80063b0:	ed9d 6b06 	vldr	d6, [sp, #24]
 80063b4:	ed91 7b00 	vldr	d7, [r1]
 80063b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80063bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80063c0:	2001      	movs	r0, #1
 80063c2:	1052      	asrs	r2, r2, #1
 80063c4:	3108      	adds	r1, #8
 80063c6:	e6db      	b.n	8006180 <_strtod_l+0x5d0>
 80063c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80063cc:	fa01 f202 	lsl.w	r2, r1, r2
 80063d0:	ea02 0a0a 	and.w	sl, r2, sl
 80063d4:	e6f3      	b.n	80061be <_strtod_l+0x60e>
 80063d6:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80063da:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80063de:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80063e2:	36e2      	adds	r6, #226	; 0xe2
 80063e4:	fa01 f306 	lsl.w	r3, r1, r6
 80063e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80063ea:	9111      	str	r1, [sp, #68]	; 0x44
 80063ec:	e758      	b.n	80062a0 <_strtod_l+0x6f0>
 80063ee:	2300      	movs	r3, #0
 80063f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80063f2:	2301      	movs	r3, #1
 80063f4:	9311      	str	r3, [sp, #68]	; 0x44
 80063f6:	e753      	b.n	80062a0 <_strtod_l+0x6f0>
 80063f8:	461a      	mov	r2, r3
 80063fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063fc:	4620      	mov	r0, r4
 80063fe:	f001 fd75 	bl	8007eec <__lshift>
 8006402:	9018      	str	r0, [sp, #96]	; 0x60
 8006404:	2800      	cmp	r0, #0
 8006406:	f47f af7a 	bne.w	80062fe <_strtod_l+0x74e>
 800640a:	e600      	b.n	800600e <_strtod_l+0x45e>
 800640c:	f3af 8000 	nop.w
 8006410:	94a03595 	.word	0x94a03595
 8006414:	3fdfffff 	.word	0x3fdfffff
 8006418:	35afe535 	.word	0x35afe535
 800641c:	3fe00000 	.word	0x3fe00000
 8006420:	94a03595 	.word	0x94a03595
 8006424:	3fcfffff 	.word	0x3fcfffff
 8006428:	08008ad0 	.word	0x08008ad0
 800642c:	fffffc02 	.word	0xfffffc02
 8006430:	f8cd b020 	str.w	fp, [sp, #32]
 8006434:	f040 8085 	bne.w	8006542 <_strtod_l+0x992>
 8006438:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800643a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800643e:	b322      	cbz	r2, 800648a <_strtod_l+0x8da>
 8006440:	4ab7      	ldr	r2, [pc, #732]	; (8006720 <_strtod_l+0xb70>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d154      	bne.n	80064f0 <_strtod_l+0x940>
 8006446:	4651      	mov	r1, sl
 8006448:	b1e7      	cbz	r7, 8006484 <_strtod_l+0x8d4>
 800644a:	4bb6      	ldr	r3, [pc, #728]	; (8006724 <_strtod_l+0xb74>)
 800644c:	465a      	mov	r2, fp
 800644e:	4013      	ands	r3, r2
 8006450:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006458:	d803      	bhi.n	8006462 <_strtod_l+0x8b2>
 800645a:	0d1b      	lsrs	r3, r3, #20
 800645c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006460:	409a      	lsls	r2, r3
 8006462:	4291      	cmp	r1, r2
 8006464:	d144      	bne.n	80064f0 <_strtod_l+0x940>
 8006466:	4bb0      	ldr	r3, [pc, #704]	; (8006728 <_strtod_l+0xb78>)
 8006468:	9a08      	ldr	r2, [sp, #32]
 800646a:	429a      	cmp	r2, r3
 800646c:	d102      	bne.n	8006474 <_strtod_l+0x8c4>
 800646e:	3101      	adds	r1, #1
 8006470:	f43f adcd 	beq.w	800600e <_strtod_l+0x45e>
 8006474:	4bab      	ldr	r3, [pc, #684]	; (8006724 <_strtod_l+0xb74>)
 8006476:	9a08      	ldr	r2, [sp, #32]
 8006478:	401a      	ands	r2, r3
 800647a:	f502 1b80 	add.w	fp, r2, #1048576	; 0x100000
 800647e:	f04f 0a00 	mov.w	sl, #0
 8006482:	e790      	b.n	80063a6 <_strtod_l+0x7f6>
 8006484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006488:	e7eb      	b.n	8006462 <_strtod_l+0x8b2>
 800648a:	bb8b      	cbnz	r3, 80064f0 <_strtod_l+0x940>
 800648c:	f1ba 0f00 	cmp.w	sl, #0
 8006490:	d12e      	bne.n	80064f0 <_strtod_l+0x940>
 8006492:	465b      	mov	r3, fp
 8006494:	4aa3      	ldr	r2, [pc, #652]	; (8006724 <_strtod_l+0xb74>)
 8006496:	b30f      	cbz	r7, 80064dc <_strtod_l+0x92c>
 8006498:	ea02 010b 	and.w	r1, r2, fp
 800649c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80064a0:	dc1c      	bgt.n	80064dc <_strtod_l+0x92c>
 80064a2:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80064a6:	f77f ae48 	ble.w	800613a <_strtod_l+0x58a>
 80064aa:	4aa0      	ldr	r2, [pc, #640]	; (800672c <_strtod_l+0xb7c>)
 80064ac:	2300      	movs	r3, #0
 80064ae:	e9cd 3212 	strd	r3, r2, [sp, #72]	; 0x48
 80064b2:	ed9d 6b12 	vldr	d6, [sp, #72]	; 0x48
 80064b6:	ec4b ab17 	vmov	d7, sl, fp
 80064ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80064be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80064c2:	9b05      	ldr	r3, [sp, #20]
 80064c4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f adaa 	bne.w	8006022 <_strtod_l+0x472>
 80064ce:	9b04      	ldr	r3, [sp, #16]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f47f ada6 	bne.w	8006022 <_strtod_l+0x472>
 80064d6:	2322      	movs	r3, #34	; 0x22
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	e5a2      	b.n	8006022 <_strtod_l+0x472>
 80064dc:	4013      	ands	r3, r2
 80064de:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80064e2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80064e6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80064ea:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80064ee:	e75a      	b.n	80063a6 <_strtod_l+0x7f6>
 80064f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80064f2:	b18b      	cbz	r3, 8006518 <_strtod_l+0x968>
 80064f4:	9a08      	ldr	r2, [sp, #32]
 80064f6:	4213      	tst	r3, r2
 80064f8:	f43f af55 	beq.w	80063a6 <_strtod_l+0x7f6>
 80064fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064fe:	463a      	mov	r2, r7
 8006500:	4650      	mov	r0, sl
 8006502:	4659      	mov	r1, fp
 8006504:	b163      	cbz	r3, 8006520 <_strtod_l+0x970>
 8006506:	f7ff fb39 	bl	8005b7c <sulp>
 800650a:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800650e:	ee37 7b00 	vadd.f64	d7, d7, d0
 8006512:	ec5b ab17 	vmov	sl, fp, d7
 8006516:	e746      	b.n	80063a6 <_strtod_l+0x7f6>
 8006518:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800651a:	ea13 0f0a 	tst.w	r3, sl
 800651e:	e7eb      	b.n	80064f8 <_strtod_l+0x948>
 8006520:	f7ff fb2c 	bl	8005b7c <sulp>
 8006524:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 8006528:	ee37 7b40 	vsub.f64	d7, d7, d0
 800652c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006530:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006538:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800653c:	f43f adfd 	beq.w	800613a <_strtod_l+0x58a>
 8006540:	e731      	b.n	80063a6 <_strtod_l+0x7f6>
 8006542:	4641      	mov	r1, r8
 8006544:	4628      	mov	r0, r5
 8006546:	f001 fe62 	bl	800820e <__ratio>
 800654a:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800654e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8006552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006556:	d869      	bhi.n	800662c <_strtod_l+0xa7c>
 8006558:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800655a:	2b00      	cmp	r3, #0
 800655c:	d045      	beq.n	80065ea <_strtod_l+0xa3a>
 800655e:	4b74      	ldr	r3, [pc, #464]	; (8006730 <_strtod_l+0xb80>)
 8006560:	2200      	movs	r2, #0
 8006562:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8006566:	9808      	ldr	r0, [sp, #32]
 8006568:	496e      	ldr	r1, [pc, #440]	; (8006724 <_strtod_l+0xb74>)
 800656a:	ea00 0601 	and.w	r6, r0, r1
 800656e:	4871      	ldr	r0, [pc, #452]	; (8006734 <_strtod_l+0xb84>)
 8006570:	4286      	cmp	r6, r0
 8006572:	f040 8089 	bne.w	8006688 <_strtod_l+0xad8>
 8006576:	910f      	str	r1, [sp, #60]	; 0x3c
 8006578:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800657c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8006580:	9908      	ldr	r1, [sp, #32]
 8006582:	f1a1 7b54 	sub.w	fp, r1, #55574528	; 0x3500000
 8006586:	ec4b ab10 	vmov	d0, sl, fp
 800658a:	ec43 2b1c 	vmov	d12, r2, r3
 800658e:	f001 fd79 	bl	8008084 <__ulp>
 8006592:	ec4b ab1d 	vmov	d13, sl, fp
 8006596:	eeac db00 	vfma.f64	d13, d12, d0
 800659a:	ed8d db08 	vstr	d13, [sp, #32]
 800659e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80065a2:	4a65      	ldr	r2, [pc, #404]	; (8006738 <_strtod_l+0xb88>)
 80065a4:	4019      	ands	r1, r3
 80065a6:	4291      	cmp	r1, r2
 80065a8:	e9dd ab08 	ldrd	sl, fp, [sp, #32]
 80065ac:	d948      	bls.n	8006640 <_strtod_l+0xa90>
 80065ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <_strtod_l+0xa10>
 80065b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ba:	3301      	adds	r3, #1
 80065bc:	f43f ad27 	beq.w	800600e <_strtod_l+0x45e>
 80065c0:	f8df b164 	ldr.w	fp, [pc, #356]	; 8006728 <_strtod_l+0xb78>
 80065c4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80065c8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80065ca:	4620      	mov	r0, r4
 80065cc:	f001 fac3 	bl	8007b56 <_Bfree>
 80065d0:	4649      	mov	r1, r9
 80065d2:	4620      	mov	r0, r4
 80065d4:	f001 fabf 	bl	8007b56 <_Bfree>
 80065d8:	4641      	mov	r1, r8
 80065da:	4620      	mov	r0, r4
 80065dc:	f001 fabb 	bl	8007b56 <_Bfree>
 80065e0:	4629      	mov	r1, r5
 80065e2:	4620      	mov	r0, r4
 80065e4:	f001 fab7 	bl	8007b56 <_Bfree>
 80065e8:	e60e      	b.n	8006208 <_strtod_l+0x658>
 80065ea:	f1ba 0f00 	cmp.w	sl, #0
 80065ee:	d113      	bne.n	8006618 <_strtod_l+0xa68>
 80065f0:	9b08      	ldr	r3, [sp, #32]
 80065f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f6:	b9b3      	cbnz	r3, 8006626 <_strtod_l+0xa76>
 80065f8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80065fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8006600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006604:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8006608:	d401      	bmi.n	800660e <_strtod_l+0xa5e>
 800660a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800660e:	eeb1 7b48 	vneg.f64	d7, d8
 8006612:	ec53 2b17 	vmov	r2, r3, d7
 8006616:	e7a6      	b.n	8006566 <_strtod_l+0x9b6>
 8006618:	f1ba 0f01 	cmp.w	sl, #1
 800661c:	d103      	bne.n	8006626 <_strtod_l+0xa76>
 800661e:	9b08      	ldr	r3, [sp, #32]
 8006620:	2b00      	cmp	r3, #0
 8006622:	f43f ad8a 	beq.w	800613a <_strtod_l+0x58a>
 8006626:	2200      	movs	r2, #0
 8006628:	4b44      	ldr	r3, [pc, #272]	; (800673c <_strtod_l+0xb8c>)
 800662a:	e79a      	b.n	8006562 <_strtod_l+0x9b2>
 800662c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800662e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8006632:	ee20 8b08 	vmul.f64	d8, d0, d8
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0e9      	beq.n	800660e <_strtod_l+0xa5e>
 800663a:	ec53 2b18 	vmov	r2, r3, d8
 800663e:	e792      	b.n	8006566 <_strtod_l+0x9b6>
 8006640:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006644:	2f00      	cmp	r7, #0
 8006646:	d1bf      	bne.n	80065c8 <_strtod_l+0xa18>
 8006648:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800664c:	0d1b      	lsrs	r3, r3, #20
 800664e:	051b      	lsls	r3, r3, #20
 8006650:	429e      	cmp	r6, r3
 8006652:	d1b9      	bne.n	80065c8 <_strtod_l+0xa18>
 8006654:	eebd 0bc8 	vcvt.s32.f64	s0, d8
 8006658:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800665a:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800665e:	ee38 8b40 	vsub.f64	d8, d8, d0
 8006662:	b92b      	cbnz	r3, 8006670 <_strtod_l+0xac0>
 8006664:	f1ba 0f00 	cmp.w	sl, #0
 8006668:	d102      	bne.n	8006670 <_strtod_l+0xac0>
 800666a:	f3cb 0213 	ubfx	r2, fp, #0, #20
 800666e:	b3d2      	cbz	r2, 80066e6 <_strtod_l+0xb36>
 8006670:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8006674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006678:	f53f acd3 	bmi.w	8006022 <_strtod_l+0x472>
 800667c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8006680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006684:	dda0      	ble.n	80065c8 <_strtod_l+0xa18>
 8006686:	e4cc      	b.n	8006022 <_strtod_l+0x472>
 8006688:	b1ef      	cbz	r7, 80066c6 <_strtod_l+0xb16>
 800668a:	f1b6 6fd4 	cmp.w	r6, #111149056	; 0x6a00000
 800668e:	d81a      	bhi.n	80066c6 <_strtod_l+0xb16>
 8006690:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8006718 <_strtod_l+0xb68>
 8006694:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669c:	d810      	bhi.n	80066c0 <_strtod_l+0xb10>
 800669e:	eefc 7bc8 	vcvt.u32.f64	s15, d8
 80066a2:	ee17 3a90 	vmov	r3, s15
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	bf08      	it	eq
 80066aa:	2301      	moveq	r3, #1
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80066b2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80066b6:	b99b      	cbnz	r3, 80066e0 <_strtod_l+0xb30>
 80066b8:	eeb1 7b48 	vneg.f64	d7, d8
 80066bc:	ec53 2b17 	vmov	r2, r3, d7
 80066c0:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 80066c4:	1b8b      	subs	r3, r1, r6
 80066c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80066ca:	ec43 2b1c 	vmov	d12, r2, r3
 80066ce:	f001 fcd9 	bl	8008084 <__ulp>
 80066d2:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80066d6:	eeac 7b00 	vfma.f64	d7, d12, d0
 80066da:	ec5b ab17 	vmov	sl, fp, d7
 80066de:	e7b1      	b.n	8006644 <_strtod_l+0xa94>
 80066e0:	ec53 2b18 	vmov	r2, r3, d8
 80066e4:	e7ec      	b.n	80066c0 <_strtod_l+0xb10>
 80066e6:	eeb4 8bcb 	vcmpe.f64	d8, d11
 80066ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ee:	f57f af6b 	bpl.w	80065c8 <_strtod_l+0xa18>
 80066f2:	e496      	b.n	8006022 <_strtod_l+0x472>
 80066f4:	2300      	movs	r3, #0
 80066f6:	930d      	str	r3, [sp, #52]	; 0x34
 80066f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80066fa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	f7ff ba9d 	b.w	8005c3c <_strtod_l+0x8c>
 8006702:	2a65      	cmp	r2, #101	; 0x65
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	f43f ab97 	beq.w	8005e3a <_strtod_l+0x28a>
 800670c:	2701      	movs	r7, #1
 800670e:	460b      	mov	r3, r1
 8006710:	9704      	str	r7, [sp, #16]
 8006712:	f7ff bb0a 	b.w	8005d2a <_strtod_l+0x17a>
 8006716:	bf00      	nop
 8006718:	ffc00000 	.word	0xffc00000
 800671c:	41dfffff 	.word	0x41dfffff
 8006720:	000fffff 	.word	0x000fffff
 8006724:	7ff00000 	.word	0x7ff00000
 8006728:	7fefffff 	.word	0x7fefffff
 800672c:	39500000 	.word	0x39500000
 8006730:	3ff00000 	.word	0x3ff00000
 8006734:	7fe00000 	.word	0x7fe00000
 8006738:	7c9fffff 	.word	0x7c9fffff
 800673c:	bff00000 	.word	0xbff00000

08006740 <_strtod_r>:
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <_strtod_r+0x18>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	b410      	push	{r4}
 8006746:	6a1b      	ldr	r3, [r3, #32]
 8006748:	4c04      	ldr	r4, [pc, #16]	; (800675c <_strtod_r+0x1c>)
 800674a:	2b00      	cmp	r3, #0
 800674c:	bf08      	it	eq
 800674e:	4623      	moveq	r3, r4
 8006750:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006754:	f7ff ba2c 	b.w	8005bb0 <_strtod_l>
 8006758:	20000010 	.word	0x20000010
 800675c:	20000074 	.word	0x20000074

08006760 <_strtol_l.isra.0>:
 8006760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006764:	4680      	mov	r8, r0
 8006766:	4689      	mov	r9, r1
 8006768:	4692      	mov	sl, r2
 800676a:	461e      	mov	r6, r3
 800676c:	460f      	mov	r7, r1
 800676e:	463d      	mov	r5, r7
 8006770:	9808      	ldr	r0, [sp, #32]
 8006772:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006776:	f001 f981 	bl	8007a7c <__locale_ctype_ptr_l>
 800677a:	4420      	add	r0, r4
 800677c:	7843      	ldrb	r3, [r0, #1]
 800677e:	f013 0308 	ands.w	r3, r3, #8
 8006782:	d132      	bne.n	80067ea <_strtol_l.isra.0+0x8a>
 8006784:	2c2d      	cmp	r4, #45	; 0x2d
 8006786:	d132      	bne.n	80067ee <_strtol_l.isra.0+0x8e>
 8006788:	787c      	ldrb	r4, [r7, #1]
 800678a:	1cbd      	adds	r5, r7, #2
 800678c:	2201      	movs	r2, #1
 800678e:	2e00      	cmp	r6, #0
 8006790:	d05d      	beq.n	800684e <_strtol_l.isra.0+0xee>
 8006792:	2e10      	cmp	r6, #16
 8006794:	d109      	bne.n	80067aa <_strtol_l.isra.0+0x4a>
 8006796:	2c30      	cmp	r4, #48	; 0x30
 8006798:	d107      	bne.n	80067aa <_strtol_l.isra.0+0x4a>
 800679a:	782b      	ldrb	r3, [r5, #0]
 800679c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80067a0:	2b58      	cmp	r3, #88	; 0x58
 80067a2:	d14f      	bne.n	8006844 <_strtol_l.isra.0+0xe4>
 80067a4:	786c      	ldrb	r4, [r5, #1]
 80067a6:	2610      	movs	r6, #16
 80067a8:	3502      	adds	r5, #2
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	bf14      	ite	ne
 80067ae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80067b2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80067b6:	2700      	movs	r7, #0
 80067b8:	fbb1 fcf6 	udiv	ip, r1, r6
 80067bc:	4638      	mov	r0, r7
 80067be:	fb06 1e1c 	mls	lr, r6, ip, r1
 80067c2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80067c6:	2b09      	cmp	r3, #9
 80067c8:	d817      	bhi.n	80067fa <_strtol_l.isra.0+0x9a>
 80067ca:	461c      	mov	r4, r3
 80067cc:	42a6      	cmp	r6, r4
 80067ce:	dd23      	ble.n	8006818 <_strtol_l.isra.0+0xb8>
 80067d0:	1c7b      	adds	r3, r7, #1
 80067d2:	d007      	beq.n	80067e4 <_strtol_l.isra.0+0x84>
 80067d4:	4584      	cmp	ip, r0
 80067d6:	d31c      	bcc.n	8006812 <_strtol_l.isra.0+0xb2>
 80067d8:	d101      	bne.n	80067de <_strtol_l.isra.0+0x7e>
 80067da:	45a6      	cmp	lr, r4
 80067dc:	db19      	blt.n	8006812 <_strtol_l.isra.0+0xb2>
 80067de:	fb00 4006 	mla	r0, r0, r6, r4
 80067e2:	2701      	movs	r7, #1
 80067e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067e8:	e7eb      	b.n	80067c2 <_strtol_l.isra.0+0x62>
 80067ea:	462f      	mov	r7, r5
 80067ec:	e7bf      	b.n	800676e <_strtol_l.isra.0+0xe>
 80067ee:	2c2b      	cmp	r4, #43	; 0x2b
 80067f0:	bf04      	itt	eq
 80067f2:	1cbd      	addeq	r5, r7, #2
 80067f4:	787c      	ldrbeq	r4, [r7, #1]
 80067f6:	461a      	mov	r2, r3
 80067f8:	e7c9      	b.n	800678e <_strtol_l.isra.0+0x2e>
 80067fa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80067fe:	2b19      	cmp	r3, #25
 8006800:	d801      	bhi.n	8006806 <_strtol_l.isra.0+0xa6>
 8006802:	3c37      	subs	r4, #55	; 0x37
 8006804:	e7e2      	b.n	80067cc <_strtol_l.isra.0+0x6c>
 8006806:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800680a:	2b19      	cmp	r3, #25
 800680c:	d804      	bhi.n	8006818 <_strtol_l.isra.0+0xb8>
 800680e:	3c57      	subs	r4, #87	; 0x57
 8006810:	e7dc      	b.n	80067cc <_strtol_l.isra.0+0x6c>
 8006812:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006816:	e7e5      	b.n	80067e4 <_strtol_l.isra.0+0x84>
 8006818:	1c7b      	adds	r3, r7, #1
 800681a:	d108      	bne.n	800682e <_strtol_l.isra.0+0xce>
 800681c:	2322      	movs	r3, #34	; 0x22
 800681e:	f8c8 3000 	str.w	r3, [r8]
 8006822:	4608      	mov	r0, r1
 8006824:	f1ba 0f00 	cmp.w	sl, #0
 8006828:	d107      	bne.n	800683a <_strtol_l.isra.0+0xda>
 800682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682e:	b102      	cbz	r2, 8006832 <_strtol_l.isra.0+0xd2>
 8006830:	4240      	negs	r0, r0
 8006832:	f1ba 0f00 	cmp.w	sl, #0
 8006836:	d0f8      	beq.n	800682a <_strtol_l.isra.0+0xca>
 8006838:	b10f      	cbz	r7, 800683e <_strtol_l.isra.0+0xde>
 800683a:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800683e:	f8ca 9000 	str.w	r9, [sl]
 8006842:	e7f2      	b.n	800682a <_strtol_l.isra.0+0xca>
 8006844:	2430      	movs	r4, #48	; 0x30
 8006846:	2e00      	cmp	r6, #0
 8006848:	d1af      	bne.n	80067aa <_strtol_l.isra.0+0x4a>
 800684a:	2608      	movs	r6, #8
 800684c:	e7ad      	b.n	80067aa <_strtol_l.isra.0+0x4a>
 800684e:	2c30      	cmp	r4, #48	; 0x30
 8006850:	d0a3      	beq.n	800679a <_strtol_l.isra.0+0x3a>
 8006852:	260a      	movs	r6, #10
 8006854:	e7a9      	b.n	80067aa <_strtol_l.isra.0+0x4a>
	...

08006858 <_strtol_r>:
 8006858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800685a:	4c06      	ldr	r4, [pc, #24]	; (8006874 <_strtol_r+0x1c>)
 800685c:	4d06      	ldr	r5, [pc, #24]	; (8006878 <_strtol_r+0x20>)
 800685e:	6824      	ldr	r4, [r4, #0]
 8006860:	6a24      	ldr	r4, [r4, #32]
 8006862:	2c00      	cmp	r4, #0
 8006864:	bf08      	it	eq
 8006866:	462c      	moveq	r4, r5
 8006868:	9400      	str	r4, [sp, #0]
 800686a:	f7ff ff79 	bl	8006760 <_strtol_l.isra.0>
 800686e:	b003      	add	sp, #12
 8006870:	bd30      	pop	{r4, r5, pc}
 8006872:	bf00      	nop
 8006874:	20000010 	.word	0x20000010
 8006878:	20000074 	.word	0x20000074

0800687c <quorem>:
 800687c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	6903      	ldr	r3, [r0, #16]
 8006882:	690c      	ldr	r4, [r1, #16]
 8006884:	42a3      	cmp	r3, r4
 8006886:	4680      	mov	r8, r0
 8006888:	f2c0 8082 	blt.w	8006990 <quorem+0x114>
 800688c:	3c01      	subs	r4, #1
 800688e:	f101 0714 	add.w	r7, r1, #20
 8006892:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006896:	f100 0614 	add.w	r6, r0, #20
 800689a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800689e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80068a2:	eb06 030c 	add.w	r3, r6, ip
 80068a6:	3501      	adds	r5, #1
 80068a8:	eb07 090c 	add.w	r9, r7, ip
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80068b2:	b395      	cbz	r5, 800691a <quorem+0x9e>
 80068b4:	f04f 0a00 	mov.w	sl, #0
 80068b8:	4638      	mov	r0, r7
 80068ba:	46b6      	mov	lr, r6
 80068bc:	46d3      	mov	fp, sl
 80068be:	f850 2b04 	ldr.w	r2, [r0], #4
 80068c2:	b293      	uxth	r3, r2
 80068c4:	fb05 a303 	mla	r3, r5, r3, sl
 80068c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	ebab 0303 	sub.w	r3, fp, r3
 80068d2:	0c12      	lsrs	r2, r2, #16
 80068d4:	f8de b000 	ldr.w	fp, [lr]
 80068d8:	fb05 a202 	mla	r2, r5, r2, sl
 80068dc:	fa13 f38b 	uxtah	r3, r3, fp
 80068e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80068e4:	fa1f fb82 	uxth.w	fp, r2
 80068e8:	f8de 2000 	ldr.w	r2, [lr]
 80068ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80068f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80068fa:	4581      	cmp	r9, r0
 80068fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006900:	f84e 3b04 	str.w	r3, [lr], #4
 8006904:	d2db      	bcs.n	80068be <quorem+0x42>
 8006906:	f856 300c 	ldr.w	r3, [r6, ip]
 800690a:	b933      	cbnz	r3, 800691a <quorem+0x9e>
 800690c:	9b01      	ldr	r3, [sp, #4]
 800690e:	3b04      	subs	r3, #4
 8006910:	429e      	cmp	r6, r3
 8006912:	461a      	mov	r2, r3
 8006914:	d330      	bcc.n	8006978 <quorem+0xfc>
 8006916:	f8c8 4010 	str.w	r4, [r8, #16]
 800691a:	4640      	mov	r0, r8
 800691c:	f001 fb3a 	bl	8007f94 <__mcmp>
 8006920:	2800      	cmp	r0, #0
 8006922:	db25      	blt.n	8006970 <quorem+0xf4>
 8006924:	3501      	adds	r5, #1
 8006926:	4630      	mov	r0, r6
 8006928:	f04f 0c00 	mov.w	ip, #0
 800692c:	f857 2b04 	ldr.w	r2, [r7], #4
 8006930:	f8d0 e000 	ldr.w	lr, [r0]
 8006934:	b293      	uxth	r3, r2
 8006936:	ebac 0303 	sub.w	r3, ip, r3
 800693a:	0c12      	lsrs	r2, r2, #16
 800693c:	fa13 f38e 	uxtah	r3, r3, lr
 8006940:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006944:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800694e:	45b9      	cmp	r9, r7
 8006950:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006954:	f840 3b04 	str.w	r3, [r0], #4
 8006958:	d2e8      	bcs.n	800692c <quorem+0xb0>
 800695a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800695e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006962:	b92a      	cbnz	r2, 8006970 <quorem+0xf4>
 8006964:	3b04      	subs	r3, #4
 8006966:	429e      	cmp	r6, r3
 8006968:	461a      	mov	r2, r3
 800696a:	d30b      	bcc.n	8006984 <quorem+0x108>
 800696c:	f8c8 4010 	str.w	r4, [r8, #16]
 8006970:	4628      	mov	r0, r5
 8006972:	b003      	add	sp, #12
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	6812      	ldr	r2, [r2, #0]
 800697a:	3b04      	subs	r3, #4
 800697c:	2a00      	cmp	r2, #0
 800697e:	d1ca      	bne.n	8006916 <quorem+0x9a>
 8006980:	3c01      	subs	r4, #1
 8006982:	e7c5      	b.n	8006910 <quorem+0x94>
 8006984:	6812      	ldr	r2, [r2, #0]
 8006986:	3b04      	subs	r3, #4
 8006988:	2a00      	cmp	r2, #0
 800698a:	d1ef      	bne.n	800696c <quorem+0xf0>
 800698c:	3c01      	subs	r4, #1
 800698e:	e7ea      	b.n	8006966 <quorem+0xea>
 8006990:	2000      	movs	r0, #0
 8006992:	e7ee      	b.n	8006972 <quorem+0xf6>
 8006994:	0000      	movs	r0, r0
	...

08006998 <_dtoa_r>:
 8006998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800699c:	ec57 6b10 	vmov	r6, r7, d0
 80069a0:	b095      	sub	sp, #84	; 0x54
 80069a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80069a4:	9108      	str	r1, [sp, #32]
 80069a6:	4604      	mov	r4, r0
 80069a8:	920a      	str	r2, [sp, #40]	; 0x28
 80069aa:	9311      	str	r3, [sp, #68]	; 0x44
 80069ac:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80069b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80069b4:	b93d      	cbnz	r5, 80069c6 <_dtoa_r+0x2e>
 80069b6:	2010      	movs	r0, #16
 80069b8:	f001 f874 	bl	8007aa4 <malloc>
 80069bc:	6260      	str	r0, [r4, #36]	; 0x24
 80069be:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80069c2:	6005      	str	r5, [r0, #0]
 80069c4:	60c5      	str	r5, [r0, #12]
 80069c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069c8:	6819      	ldr	r1, [r3, #0]
 80069ca:	b151      	cbz	r1, 80069e2 <_dtoa_r+0x4a>
 80069cc:	685a      	ldr	r2, [r3, #4]
 80069ce:	604a      	str	r2, [r1, #4]
 80069d0:	2301      	movs	r3, #1
 80069d2:	4093      	lsls	r3, r2
 80069d4:	608b      	str	r3, [r1, #8]
 80069d6:	4620      	mov	r0, r4
 80069d8:	f001 f8bd 	bl	8007b56 <_Bfree>
 80069dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	1e3b      	subs	r3, r7, #0
 80069e4:	bfb9      	ittee	lt
 80069e6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80069ea:	9303      	strlt	r3, [sp, #12]
 80069ec:	2300      	movge	r3, #0
 80069ee:	f8c8 3000 	strge.w	r3, [r8]
 80069f2:	9d03      	ldr	r5, [sp, #12]
 80069f4:	4bac      	ldr	r3, [pc, #688]	; (8006ca8 <_dtoa_r+0x310>)
 80069f6:	bfbc      	itt	lt
 80069f8:	2201      	movlt	r2, #1
 80069fa:	f8c8 2000 	strlt.w	r2, [r8]
 80069fe:	43ab      	bics	r3, r5
 8006a00:	d11b      	bne.n	8006a3a <_dtoa_r+0xa2>
 8006a02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a04:	f242 730f 	movw	r3, #9999	; 0x270f
 8006a08:	6013      	str	r3, [r2, #0]
 8006a0a:	9b02      	ldr	r3, [sp, #8]
 8006a0c:	b923      	cbnz	r3, 8006a18 <_dtoa_r+0x80>
 8006a0e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8006a12:	2d00      	cmp	r5, #0
 8006a14:	f000 84dd 	beq.w	80073d2 <_dtoa_r+0xa3a>
 8006a18:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a1a:	b953      	cbnz	r3, 8006a32 <_dtoa_r+0x9a>
 8006a1c:	4ba3      	ldr	r3, [pc, #652]	; (8006cac <_dtoa_r+0x314>)
 8006a1e:	e020      	b.n	8006a62 <_dtoa_r+0xca>
 8006a20:	4ba3      	ldr	r3, [pc, #652]	; (8006cb0 <_dtoa_r+0x318>)
 8006a22:	9304      	str	r3, [sp, #16]
 8006a24:	3308      	adds	r3, #8
 8006a26:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006a28:	6013      	str	r3, [r2, #0]
 8006a2a:	9804      	ldr	r0, [sp, #16]
 8006a2c:	b015      	add	sp, #84	; 0x54
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	4b9e      	ldr	r3, [pc, #632]	; (8006cac <_dtoa_r+0x314>)
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	3303      	adds	r3, #3
 8006a38:	e7f5      	b.n	8006a26 <_dtoa_r+0x8e>
 8006a3a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a46:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006a4a:	d10c      	bne.n	8006a66 <_dtoa_r+0xce>
 8006a4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a4e:	2301      	movs	r3, #1
 8006a50:	6013      	str	r3, [r2, #0]
 8006a52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	f000 84b9 	beq.w	80073cc <_dtoa_r+0xa34>
 8006a5a:	4b96      	ldr	r3, [pc, #600]	; (8006cb4 <_dtoa_r+0x31c>)
 8006a5c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	3b01      	subs	r3, #1
 8006a62:	9304      	str	r3, [sp, #16]
 8006a64:	e7e1      	b.n	8006a2a <_dtoa_r+0x92>
 8006a66:	a913      	add	r1, sp, #76	; 0x4c
 8006a68:	aa12      	add	r2, sp, #72	; 0x48
 8006a6a:	ed9d 0b04 	vldr	d0, [sp, #16]
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f001 fb7e 	bl	8008170 <__d2b>
 8006a74:	f3c5 560a 	ubfx	r6, r5, #20, #11
 8006a78:	9001      	str	r0, [sp, #4]
 8006a7a:	9912      	ldr	r1, [sp, #72]	; 0x48
 8006a7c:	2e00      	cmp	r6, #0
 8006a7e:	d046      	beq.n	8006b0e <_dtoa_r+0x176>
 8006a80:	9805      	ldr	r0, [sp, #20]
 8006a82:	f3c0 0013 	ubfx	r0, r0, #0, #20
 8006a86:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8a:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8006a8e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006a92:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 8006a96:	2700      	movs	r7, #0
 8006a98:	ee07 aa90 	vmov	s15, sl
 8006a9c:	ec43 2b16 	vmov	d6, r2, r3
 8006aa0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8006aa4:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 8006c90 <_dtoa_r+0x2f8>
 8006aa8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8006aac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ab0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8006c98 <_dtoa_r+0x300>
 8006ab4:	eea7 6b04 	vfma.f64	d6, d7, d4
 8006ab8:	eeb0 7b46 	vmov.f64	d7, d6
 8006abc:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8006ca0 <_dtoa_r+0x308>
 8006ac0:	eea5 7b06 	vfma.f64	d7, d5, d6
 8006ac4:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006ac8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8006acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ad0:	ee16 ba90 	vmov	fp, s13
 8006ad4:	d508      	bpl.n	8006ae8 <_dtoa_r+0x150>
 8006ad6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8006ada:	eeb4 6b47 	vcmp.f64	d6, d7
 8006ade:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ae2:	bf18      	it	ne
 8006ae4:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8006ae8:	f1bb 0f16 	cmp.w	fp, #22
 8006aec:	d834      	bhi.n	8006b58 <_dtoa_r+0x1c0>
 8006aee:	4b72      	ldr	r3, [pc, #456]	; (8006cb8 <_dtoa_r+0x320>)
 8006af0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006af4:	ed93 7b00 	vldr	d7, [r3]
 8006af8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006afc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b04:	dd01      	ble.n	8006b0a <_dtoa_r+0x172>
 8006b06:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e025      	b.n	8006b5a <_dtoa_r+0x1c2>
 8006b0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006b10:	eb01 0a03 	add.w	sl, r1, r3
 8006b14:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	dd17      	ble.n	8006b4c <_dtoa_r+0x1b4>
 8006b1c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006b20:	9a02      	ldr	r2, [sp, #8]
 8006b22:	409d      	lsls	r5, r3
 8006b24:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8006b28:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2c:	432b      	orrs	r3, r5
 8006b2e:	ee07 3a90 	vmov	s15, r3
 8006b32:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006b36:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8006b3a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b3e:	9805      	ldr	r0, [sp, #20]
 8006b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b44:	2701      	movs	r7, #1
 8006b46:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8006b4a:	e7a5      	b.n	8006a98 <_dtoa_r+0x100>
 8006b4c:	9a02      	ldr	r2, [sp, #8]
 8006b4e:	f1c3 0320 	rsb	r3, r3, #32
 8006b52:	fa02 f303 	lsl.w	r3, r2, r3
 8006b56:	e7ea      	b.n	8006b2e <_dtoa_r+0x196>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	eba1 0a0a 	sub.w	sl, r1, sl
 8006b5e:	9310      	str	r3, [sp, #64]	; 0x40
 8006b60:	f1ba 0301 	subs.w	r3, sl, #1
 8006b64:	9307      	str	r3, [sp, #28]
 8006b66:	bf43      	ittte	mi
 8006b68:	2300      	movmi	r3, #0
 8006b6a:	f1ca 0a01 	rsbmi	sl, sl, #1
 8006b6e:	9307      	strmi	r3, [sp, #28]
 8006b70:	f04f 0a00 	movpl.w	sl, #0
 8006b74:	f1bb 0f00 	cmp.w	fp, #0
 8006b78:	db19      	blt.n	8006bae <_dtoa_r+0x216>
 8006b7a:	9b07      	ldr	r3, [sp, #28]
 8006b7c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006b80:	445b      	add	r3, fp
 8006b82:	9307      	str	r3, [sp, #28]
 8006b84:	f04f 0800 	mov.w	r8, #0
 8006b88:	9b08      	ldr	r3, [sp, #32]
 8006b8a:	2b09      	cmp	r3, #9
 8006b8c:	d866      	bhi.n	8006c5c <_dtoa_r+0x2c4>
 8006b8e:	2b05      	cmp	r3, #5
 8006b90:	bfc4      	itt	gt
 8006b92:	3b04      	subgt	r3, #4
 8006b94:	9308      	strgt	r3, [sp, #32]
 8006b96:	9b08      	ldr	r3, [sp, #32]
 8006b98:	f1a3 0302 	sub.w	r3, r3, #2
 8006b9c:	bfcc      	ite	gt
 8006b9e:	2500      	movgt	r5, #0
 8006ba0:	2501      	movle	r5, #1
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d866      	bhi.n	8006c74 <_dtoa_r+0x2dc>
 8006ba6:	e8df f003 	tbb	[pc, r3]
 8006baa:	5755      	.short	0x5755
 8006bac:	4909      	.short	0x4909
 8006bae:	2300      	movs	r3, #0
 8006bb0:	ebaa 0a0b 	sub.w	sl, sl, fp
 8006bb4:	f1cb 0800 	rsb	r8, fp, #0
 8006bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8006bba:	e7e5      	b.n	8006b88 <_dtoa_r+0x1f0>
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	dd59      	ble.n	8006c7a <_dtoa_r+0x2e2>
 8006bc6:	9306      	str	r3, [sp, #24]
 8006bc8:	4699      	mov	r9, r3
 8006bca:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006bcc:	2200      	movs	r2, #0
 8006bce:	6072      	str	r2, [r6, #4]
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	f102 0014 	add.w	r0, r2, #20
 8006bd6:	4298      	cmp	r0, r3
 8006bd8:	6871      	ldr	r1, [r6, #4]
 8006bda:	d953      	bls.n	8006c84 <_dtoa_r+0x2ec>
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 ff86 	bl	8007aee <_Balloc>
 8006be2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006be4:	6030      	str	r0, [r6, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	f1b9 0f0e 	cmp.w	r9, #14
 8006bee:	f200 80c2 	bhi.w	8006d76 <_dtoa_r+0x3de>
 8006bf2:	2d00      	cmp	r5, #0
 8006bf4:	f000 80bf 	beq.w	8006d76 <_dtoa_r+0x3de>
 8006bf8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006bfc:	f1bb 0f00 	cmp.w	fp, #0
 8006c00:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006c04:	f340 80e6 	ble.w	8006dd4 <_dtoa_r+0x43c>
 8006c08:	4a2b      	ldr	r2, [pc, #172]	; (8006cb8 <_dtoa_r+0x320>)
 8006c0a:	f00b 030f 	and.w	r3, fp, #15
 8006c0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006c12:	ed93 7b00 	vldr	d7, [r3]
 8006c16:	ea4f 132b 	mov.w	r3, fp, asr #4
 8006c1a:	06da      	lsls	r2, r3, #27
 8006c1c:	f140 80d8 	bpl.w	8006dd0 <_dtoa_r+0x438>
 8006c20:	4a26      	ldr	r2, [pc, #152]	; (8006cbc <_dtoa_r+0x324>)
 8006c22:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 8006c26:	ed92 6b08 	vldr	d6, [r2, #32]
 8006c2a:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8006c2e:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	2203      	movs	r2, #3
 8006c38:	4920      	ldr	r1, [pc, #128]	; (8006cbc <_dtoa_r+0x324>)
 8006c3a:	e04a      	b.n	8006cd2 <_dtoa_r+0x33a>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c42:	445b      	add	r3, fp
 8006c44:	f103 0901 	add.w	r9, r3, #1
 8006c48:	9306      	str	r3, [sp, #24]
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	bfb8      	it	lt
 8006c50:	2301      	movlt	r3, #1
 8006c52:	e7ba      	b.n	8006bca <_dtoa_r+0x232>
 8006c54:	2300      	movs	r3, #0
 8006c56:	e7b2      	b.n	8006bbe <_dtoa_r+0x226>
 8006c58:	2300      	movs	r3, #0
 8006c5a:	e7f0      	b.n	8006c3e <_dtoa_r+0x2a6>
 8006c5c:	2501      	movs	r5, #1
 8006c5e:	2300      	movs	r3, #0
 8006c60:	e9cd 3508 	strd	r3, r5, [sp, #32]
 8006c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c68:	9306      	str	r3, [sp, #24]
 8006c6a:	4699      	mov	r9, r3
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	2312      	movs	r3, #18
 8006c70:	920a      	str	r2, [sp, #40]	; 0x28
 8006c72:	e7aa      	b.n	8006bca <_dtoa_r+0x232>
 8006c74:	2301      	movs	r3, #1
 8006c76:	9309      	str	r3, [sp, #36]	; 0x24
 8006c78:	e7f4      	b.n	8006c64 <_dtoa_r+0x2cc>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	9306      	str	r3, [sp, #24]
 8006c7e:	4699      	mov	r9, r3
 8006c80:	461a      	mov	r2, r3
 8006c82:	e7f5      	b.n	8006c70 <_dtoa_r+0x2d8>
 8006c84:	3101      	adds	r1, #1
 8006c86:	6071      	str	r1, [r6, #4]
 8006c88:	0052      	lsls	r2, r2, #1
 8006c8a:	e7a2      	b.n	8006bd2 <_dtoa_r+0x23a>
 8006c8c:	f3af 8000 	nop.w
 8006c90:	636f4361 	.word	0x636f4361
 8006c94:	3fd287a7 	.word	0x3fd287a7
 8006c98:	8b60c8b3 	.word	0x8b60c8b3
 8006c9c:	3fc68a28 	.word	0x3fc68a28
 8006ca0:	509f79fb 	.word	0x509f79fb
 8006ca4:	3fd34413 	.word	0x3fd34413
 8006ca8:	7ff00000 	.word	0x7ff00000
 8006cac:	08008b01 	.word	0x08008b01
 8006cb0:	08008af8 	.word	0x08008af8
 8006cb4:	08008a7d 	.word	0x08008a7d
 8006cb8:	08008b38 	.word	0x08008b38
 8006cbc:	08008b10 	.word	0x08008b10
 8006cc0:	07de      	lsls	r6, r3, #31
 8006cc2:	d504      	bpl.n	8006cce <_dtoa_r+0x336>
 8006cc4:	ed91 6b00 	vldr	d6, [r1]
 8006cc8:	3201      	adds	r2, #1
 8006cca:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006cce:	105b      	asrs	r3, r3, #1
 8006cd0:	3108      	adds	r1, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1f4      	bne.n	8006cc0 <_dtoa_r+0x328>
 8006cd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006cda:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006cde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006ce2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	f000 80a7 	beq.w	8006e38 <_dtoa_r+0x4a0>
 8006cea:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8006cee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006cf2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cfa:	f140 809d 	bpl.w	8006e38 <_dtoa_r+0x4a0>
 8006cfe:	f1b9 0f00 	cmp.w	r9, #0
 8006d02:	f000 8099 	beq.w	8006e38 <_dtoa_r+0x4a0>
 8006d06:	9b06      	ldr	r3, [sp, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	dd30      	ble.n	8006d6e <_dtoa_r+0x3d6>
 8006d0c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006d10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d14:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006d18:	9d06      	ldr	r5, [sp, #24]
 8006d1a:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8006d1e:	3201      	adds	r2, #1
 8006d20:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006d24:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8006d28:	ee07 2a90 	vmov	s15, r2
 8006d2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d30:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006d34:	ed8d 5b02 	vstr	d5, [sp, #8]
 8006d38:	9a03      	ldr	r2, [sp, #12]
 8006d3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d3e:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 8006d42:	2d00      	cmp	r5, #0
 8006d44:	d17b      	bne.n	8006e3e <_dtoa_r+0x4a6>
 8006d46:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006d4a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006d4e:	ec41 0b17 	vmov	d7, r0, r1
 8006d52:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5a:	f300 8253 	bgt.w	8007204 <_dtoa_r+0x86c>
 8006d5e:	eeb1 7b47 	vneg.f64	d7, d7
 8006d62:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d6a:	f100 8249 	bmi.w	8007200 <_dtoa_r+0x868>
 8006d6e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006d72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d76:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f2c0 8119 	blt.w	8006fb0 <_dtoa_r+0x618>
 8006d7e:	f1bb 0f0e 	cmp.w	fp, #14
 8006d82:	f300 8115 	bgt.w	8006fb0 <_dtoa_r+0x618>
 8006d86:	4bc3      	ldr	r3, [pc, #780]	; (8007094 <_dtoa_r+0x6fc>)
 8006d88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d8c:	ed93 6b00 	vldr	d6, [r3]
 8006d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f280 80ba 	bge.w	8006f0c <_dtoa_r+0x574>
 8006d98:	f1b9 0f00 	cmp.w	r9, #0
 8006d9c:	f300 80b6 	bgt.w	8006f0c <_dtoa_r+0x574>
 8006da0:	f040 822d 	bne.w	80071fe <_dtoa_r+0x866>
 8006da4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006da8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006dac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006db0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db8:	464d      	mov	r5, r9
 8006dba:	464f      	mov	r7, r9
 8006dbc:	f280 8204 	bge.w	80071c8 <_dtoa_r+0x830>
 8006dc0:	9b04      	ldr	r3, [sp, #16]
 8006dc2:	9a04      	ldr	r2, [sp, #16]
 8006dc4:	1c5e      	adds	r6, r3, #1
 8006dc6:	2331      	movs	r3, #49	; 0x31
 8006dc8:	7013      	strb	r3, [r2, #0]
 8006dca:	f10b 0b01 	add.w	fp, fp, #1
 8006dce:	e1ff      	b.n	80071d0 <_dtoa_r+0x838>
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	e731      	b.n	8006c38 <_dtoa_r+0x2a0>
 8006dd4:	d02e      	beq.n	8006e34 <_dtoa_r+0x49c>
 8006dd6:	f1cb 0300 	rsb	r3, fp, #0
 8006dda:	4aae      	ldr	r2, [pc, #696]	; (8007094 <_dtoa_r+0x6fc>)
 8006ddc:	f003 010f 	and.w	r1, r3, #15
 8006de0:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006de4:	ed92 7b00 	vldr	d7, [r2]
 8006de8:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8006dec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006df0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006df4:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8006df8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006dfc:	49a6      	ldr	r1, [pc, #664]	; (8007098 <_dtoa_r+0x700>)
 8006dfe:	111b      	asrs	r3, r3, #4
 8006e00:	2000      	movs	r0, #0
 8006e02:	2202      	movs	r2, #2
 8006e04:	b93b      	cbnz	r3, 8006e16 <_dtoa_r+0x47e>
 8006e06:	2800      	cmp	r0, #0
 8006e08:	f43f af6b 	beq.w	8006ce2 <_dtoa_r+0x34a>
 8006e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e14:	e765      	b.n	8006ce2 <_dtoa_r+0x34a>
 8006e16:	07dd      	lsls	r5, r3, #31
 8006e18:	d509      	bpl.n	8006e2e <_dtoa_r+0x496>
 8006e1a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8006e1e:	ed91 7b00 	vldr	d7, [r1]
 8006e22:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006e26:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	105b      	asrs	r3, r3, #1
 8006e30:	3108      	adds	r1, #8
 8006e32:	e7e7      	b.n	8006e04 <_dtoa_r+0x46c>
 8006e34:	2202      	movs	r2, #2
 8006e36:	e754      	b.n	8006ce2 <_dtoa_r+0x34a>
 8006e38:	465b      	mov	r3, fp
 8006e3a:	464d      	mov	r5, r9
 8006e3c:	e770      	b.n	8006d20 <_dtoa_r+0x388>
 8006e3e:	4a95      	ldr	r2, [pc, #596]	; (8007094 <_dtoa_r+0x6fc>)
 8006e40:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8006e44:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006e48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e4a:	ec41 0b17 	vmov	d7, r0, r1
 8006e4e:	b35a      	cbz	r2, 8006ea8 <_dtoa_r+0x510>
 8006e50:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8006e54:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8006e58:	9e04      	ldr	r6, [sp, #16]
 8006e5a:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006e5e:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006e62:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006e66:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006e6a:	ee14 2a90 	vmov	r2, s9
 8006e6e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006e72:	3230      	adds	r2, #48	; 0x30
 8006e74:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006e78:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e80:	f806 2b01 	strb.w	r2, [r6], #1
 8006e84:	d43b      	bmi.n	8006efe <_dtoa_r+0x566>
 8006e86:	ee32 5b46 	vsub.f64	d5, d2, d6
 8006e8a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e92:	d472      	bmi.n	8006f7a <_dtoa_r+0x5e2>
 8006e94:	9a04      	ldr	r2, [sp, #16]
 8006e96:	1ab2      	subs	r2, r6, r2
 8006e98:	4295      	cmp	r5, r2
 8006e9a:	f77f af68 	ble.w	8006d6e <_dtoa_r+0x3d6>
 8006e9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006ea2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006ea6:	e7de      	b.n	8006e66 <_dtoa_r+0x4ce>
 8006ea8:	9a04      	ldr	r2, [sp, #16]
 8006eaa:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006eae:	1956      	adds	r6, r2, r5
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8006eb6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8006eba:	ee14 2a90 	vmov	r2, s9
 8006ebe:	3230      	adds	r2, #48	; 0x30
 8006ec0:	f801 2b01 	strb.w	r2, [r1], #1
 8006ec4:	42b1      	cmp	r1, r6
 8006ec6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006eca:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006ece:	d11a      	bne.n	8006f06 <_dtoa_r+0x56e>
 8006ed0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006ed4:	ee37 4b05 	vadd.f64	d4, d7, d5
 8006ed8:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ee0:	dc4b      	bgt.n	8006f7a <_dtoa_r+0x5e2>
 8006ee2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ee6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006eee:	f57f af3e 	bpl.w	8006d6e <_dtoa_r+0x3d6>
 8006ef2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006ef6:	2a30      	cmp	r2, #48	; 0x30
 8006ef8:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 8006efc:	d001      	beq.n	8006f02 <_dtoa_r+0x56a>
 8006efe:	469b      	mov	fp, r3
 8006f00:	e02a      	b.n	8006f58 <_dtoa_r+0x5c0>
 8006f02:	460e      	mov	r6, r1
 8006f04:	e7f5      	b.n	8006ef2 <_dtoa_r+0x55a>
 8006f06:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006f0a:	e7d4      	b.n	8006eb6 <_dtoa_r+0x51e>
 8006f0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f10:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8006f14:	9e04      	ldr	r6, [sp, #16]
 8006f16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006f1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006f1e:	ee15 3a10 	vmov	r3, s10
 8006f22:	3330      	adds	r3, #48	; 0x30
 8006f24:	f806 3b01 	strb.w	r3, [r6], #1
 8006f28:	9b04      	ldr	r3, [sp, #16]
 8006f2a:	1af3      	subs	r3, r6, r3
 8006f2c:	4599      	cmp	r9, r3
 8006f2e:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006f32:	eea3 7b46 	vfms.f64	d7, d3, d6
 8006f36:	d133      	bne.n	8006fa0 <_dtoa_r+0x608>
 8006f38:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006f3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f44:	dc18      	bgt.n	8006f78 <_dtoa_r+0x5e0>
 8006f46:	eeb4 7b46 	vcmp.f64	d7, d6
 8006f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f4e:	d103      	bne.n	8006f58 <_dtoa_r+0x5c0>
 8006f50:	ee15 3a10 	vmov	r3, s10
 8006f54:	07db      	lsls	r3, r3, #31
 8006f56:	d40f      	bmi.n	8006f78 <_dtoa_r+0x5e0>
 8006f58:	9901      	ldr	r1, [sp, #4]
 8006f5a:	4620      	mov	r0, r4
 8006f5c:	f000 fdfb 	bl	8007b56 <_Bfree>
 8006f60:	2300      	movs	r3, #0
 8006f62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006f64:	7033      	strb	r3, [r6, #0]
 8006f66:	f10b 0301 	add.w	r3, fp, #1
 8006f6a:	6013      	str	r3, [r2, #0]
 8006f6c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	f43f ad5b 	beq.w	8006a2a <_dtoa_r+0x92>
 8006f74:	601e      	str	r6, [r3, #0]
 8006f76:	e558      	b.n	8006a2a <_dtoa_r+0x92>
 8006f78:	465b      	mov	r3, fp
 8006f7a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f7e:	2939      	cmp	r1, #57	; 0x39
 8006f80:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 8006f84:	d106      	bne.n	8006f94 <_dtoa_r+0x5fc>
 8006f86:	9904      	ldr	r1, [sp, #16]
 8006f88:	4291      	cmp	r1, r2
 8006f8a:	d107      	bne.n	8006f9c <_dtoa_r+0x604>
 8006f8c:	2230      	movs	r2, #48	; 0x30
 8006f8e:	700a      	strb	r2, [r1, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	460a      	mov	r2, r1
 8006f94:	7811      	ldrb	r1, [r2, #0]
 8006f96:	3101      	adds	r1, #1
 8006f98:	7011      	strb	r1, [r2, #0]
 8006f9a:	e7b0      	b.n	8006efe <_dtoa_r+0x566>
 8006f9c:	4616      	mov	r6, r2
 8006f9e:	e7ec      	b.n	8006f7a <_dtoa_r+0x5e2>
 8006fa0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006fa4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fac:	d1b3      	bne.n	8006f16 <_dtoa_r+0x57e>
 8006fae:	e7d3      	b.n	8006f58 <_dtoa_r+0x5c0>
 8006fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fb2:	2a00      	cmp	r2, #0
 8006fb4:	f000 808d 	beq.w	80070d2 <_dtoa_r+0x73a>
 8006fb8:	9a08      	ldr	r2, [sp, #32]
 8006fba:	2a01      	cmp	r2, #1
 8006fbc:	dc72      	bgt.n	80070a4 <_dtoa_r+0x70c>
 8006fbe:	2f00      	cmp	r7, #0
 8006fc0:	d06c      	beq.n	800709c <_dtoa_r+0x704>
 8006fc2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006fc6:	4645      	mov	r5, r8
 8006fc8:	4656      	mov	r6, sl
 8006fca:	9a07      	ldr	r2, [sp, #28]
 8006fcc:	2101      	movs	r1, #1
 8006fce:	441a      	add	r2, r3
 8006fd0:	4620      	mov	r0, r4
 8006fd2:	449a      	add	sl, r3
 8006fd4:	9207      	str	r2, [sp, #28]
 8006fd6:	f000 fe9c 	bl	8007d12 <__i2b>
 8006fda:	4607      	mov	r7, r0
 8006fdc:	2e00      	cmp	r6, #0
 8006fde:	dd0b      	ble.n	8006ff8 <_dtoa_r+0x660>
 8006fe0:	9b07      	ldr	r3, [sp, #28]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd08      	ble.n	8006ff8 <_dtoa_r+0x660>
 8006fe6:	42b3      	cmp	r3, r6
 8006fe8:	9a07      	ldr	r2, [sp, #28]
 8006fea:	bfa8      	it	ge
 8006fec:	4633      	movge	r3, r6
 8006fee:	ebaa 0a03 	sub.w	sl, sl, r3
 8006ff2:	1af6      	subs	r6, r6, r3
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	9307      	str	r3, [sp, #28]
 8006ff8:	f1b8 0f00 	cmp.w	r8, #0
 8006ffc:	d01d      	beq.n	800703a <_dtoa_r+0x6a2>
 8006ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007000:	2b00      	cmp	r3, #0
 8007002:	d06a      	beq.n	80070da <_dtoa_r+0x742>
 8007004:	b18d      	cbz	r5, 800702a <_dtoa_r+0x692>
 8007006:	4639      	mov	r1, r7
 8007008:	462a      	mov	r2, r5
 800700a:	4620      	mov	r0, r4
 800700c:	f000 ff20 	bl	8007e50 <__pow5mult>
 8007010:	9a01      	ldr	r2, [sp, #4]
 8007012:	4601      	mov	r1, r0
 8007014:	4607      	mov	r7, r0
 8007016:	4620      	mov	r0, r4
 8007018:	f000 fe84 	bl	8007d24 <__multiply>
 800701c:	9901      	ldr	r1, [sp, #4]
 800701e:	900c      	str	r0, [sp, #48]	; 0x30
 8007020:	4620      	mov	r0, r4
 8007022:	f000 fd98 	bl	8007b56 <_Bfree>
 8007026:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	ebb8 0205 	subs.w	r2, r8, r5
 800702e:	d004      	beq.n	800703a <_dtoa_r+0x6a2>
 8007030:	9901      	ldr	r1, [sp, #4]
 8007032:	4620      	mov	r0, r4
 8007034:	f000 ff0c 	bl	8007e50 <__pow5mult>
 8007038:	9001      	str	r0, [sp, #4]
 800703a:	2101      	movs	r1, #1
 800703c:	4620      	mov	r0, r4
 800703e:	f000 fe68 	bl	8007d12 <__i2b>
 8007042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007044:	4605      	mov	r5, r0
 8007046:	2b00      	cmp	r3, #0
 8007048:	f000 81ca 	beq.w	80073e0 <_dtoa_r+0xa48>
 800704c:	461a      	mov	r2, r3
 800704e:	4601      	mov	r1, r0
 8007050:	4620      	mov	r0, r4
 8007052:	f000 fefd 	bl	8007e50 <__pow5mult>
 8007056:	9b08      	ldr	r3, [sp, #32]
 8007058:	2b01      	cmp	r3, #1
 800705a:	4605      	mov	r5, r0
 800705c:	dc44      	bgt.n	80070e8 <_dtoa_r+0x750>
 800705e:	9b02      	ldr	r3, [sp, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d13c      	bne.n	80070de <_dtoa_r+0x746>
 8007064:	9b03      	ldr	r3, [sp, #12]
 8007066:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800706a:	2b00      	cmp	r3, #0
 800706c:	d137      	bne.n	80070de <_dtoa_r+0x746>
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007074:	0d1b      	lsrs	r3, r3, #20
 8007076:	051b      	lsls	r3, r3, #20
 8007078:	2b00      	cmp	r3, #0
 800707a:	d033      	beq.n	80070e4 <_dtoa_r+0x74c>
 800707c:	9b07      	ldr	r3, [sp, #28]
 800707e:	3301      	adds	r3, #1
 8007080:	f10a 0a01 	add.w	sl, sl, #1
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	f04f 0801 	mov.w	r8, #1
 800708a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800708c:	bb73      	cbnz	r3, 80070ec <_dtoa_r+0x754>
 800708e:	2001      	movs	r0, #1
 8007090:	e034      	b.n	80070fc <_dtoa_r+0x764>
 8007092:	bf00      	nop
 8007094:	08008b38 	.word	0x08008b38
 8007098:	08008b10 	.word	0x08008b10
 800709c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800709e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80070a2:	e790      	b.n	8006fc6 <_dtoa_r+0x62e>
 80070a4:	f109 35ff 	add.w	r5, r9, #4294967295	; 0xffffffff
 80070a8:	45a8      	cmp	r8, r5
 80070aa:	bfbf      	itttt	lt
 80070ac:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80070ae:	eba5 0808 	sublt.w	r8, r5, r8
 80070b2:	4443      	addlt	r3, r8
 80070b4:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80070b6:	bfb6      	itet	lt
 80070b8:	46a8      	movlt	r8, r5
 80070ba:	eba8 0505 	subge.w	r5, r8, r5
 80070be:	2500      	movlt	r5, #0
 80070c0:	f1b9 0f00 	cmp.w	r9, #0
 80070c4:	bfb9      	ittee	lt
 80070c6:	ebaa 0609 	sublt.w	r6, sl, r9
 80070ca:	2300      	movlt	r3, #0
 80070cc:	4656      	movge	r6, sl
 80070ce:	464b      	movge	r3, r9
 80070d0:	e77b      	b.n	8006fca <_dtoa_r+0x632>
 80070d2:	4645      	mov	r5, r8
 80070d4:	4656      	mov	r6, sl
 80070d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80070d8:	e780      	b.n	8006fdc <_dtoa_r+0x644>
 80070da:	4642      	mov	r2, r8
 80070dc:	e7a8      	b.n	8007030 <_dtoa_r+0x698>
 80070de:	f04f 0800 	mov.w	r8, #0
 80070e2:	e7d2      	b.n	800708a <_dtoa_r+0x6f2>
 80070e4:	4698      	mov	r8, r3
 80070e6:	e7d0      	b.n	800708a <_dtoa_r+0x6f2>
 80070e8:	f04f 0800 	mov.w	r8, #0
 80070ec:	692b      	ldr	r3, [r5, #16]
 80070ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80070f2:	6918      	ldr	r0, [r3, #16]
 80070f4:	f000 fdbf 	bl	8007c76 <__hi0bits>
 80070f8:	f1c0 0020 	rsb	r0, r0, #32
 80070fc:	9b07      	ldr	r3, [sp, #28]
 80070fe:	4418      	add	r0, r3
 8007100:	f010 001f 	ands.w	r0, r0, #31
 8007104:	d047      	beq.n	8007196 <_dtoa_r+0x7fe>
 8007106:	f1c0 0320 	rsb	r3, r0, #32
 800710a:	2b04      	cmp	r3, #4
 800710c:	dd3b      	ble.n	8007186 <_dtoa_r+0x7ee>
 800710e:	9b07      	ldr	r3, [sp, #28]
 8007110:	f1c0 001c 	rsb	r0, r0, #28
 8007114:	4482      	add	sl, r0
 8007116:	4406      	add	r6, r0
 8007118:	4403      	add	r3, r0
 800711a:	9307      	str	r3, [sp, #28]
 800711c:	f1ba 0f00 	cmp.w	sl, #0
 8007120:	dd05      	ble.n	800712e <_dtoa_r+0x796>
 8007122:	4652      	mov	r2, sl
 8007124:	9901      	ldr	r1, [sp, #4]
 8007126:	4620      	mov	r0, r4
 8007128:	f000 fee0 	bl	8007eec <__lshift>
 800712c:	9001      	str	r0, [sp, #4]
 800712e:	9b07      	ldr	r3, [sp, #28]
 8007130:	2b00      	cmp	r3, #0
 8007132:	dd05      	ble.n	8007140 <_dtoa_r+0x7a8>
 8007134:	4629      	mov	r1, r5
 8007136:	461a      	mov	r2, r3
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fed7 	bl	8007eec <__lshift>
 800713e:	4605      	mov	r5, r0
 8007140:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007142:	b353      	cbz	r3, 800719a <_dtoa_r+0x802>
 8007144:	4629      	mov	r1, r5
 8007146:	9801      	ldr	r0, [sp, #4]
 8007148:	f000 ff24 	bl	8007f94 <__mcmp>
 800714c:	2800      	cmp	r0, #0
 800714e:	da24      	bge.n	800719a <_dtoa_r+0x802>
 8007150:	2300      	movs	r3, #0
 8007152:	220a      	movs	r2, #10
 8007154:	9901      	ldr	r1, [sp, #4]
 8007156:	4620      	mov	r0, r4
 8007158:	f000 fd14 	bl	8007b84 <__multadd>
 800715c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800715e:	9001      	str	r0, [sp, #4]
 8007160:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007164:	2b00      	cmp	r3, #0
 8007166:	f000 8142 	beq.w	80073ee <_dtoa_r+0xa56>
 800716a:	2300      	movs	r3, #0
 800716c:	4639      	mov	r1, r7
 800716e:	220a      	movs	r2, #10
 8007170:	4620      	mov	r0, r4
 8007172:	f000 fd07 	bl	8007b84 <__multadd>
 8007176:	9b06      	ldr	r3, [sp, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	4607      	mov	r7, r0
 800717c:	dc4b      	bgt.n	8007216 <_dtoa_r+0x87e>
 800717e:	9b08      	ldr	r3, [sp, #32]
 8007180:	2b02      	cmp	r3, #2
 8007182:	dd48      	ble.n	8007216 <_dtoa_r+0x87e>
 8007184:	e011      	b.n	80071aa <_dtoa_r+0x812>
 8007186:	d0c9      	beq.n	800711c <_dtoa_r+0x784>
 8007188:	9a07      	ldr	r2, [sp, #28]
 800718a:	331c      	adds	r3, #28
 800718c:	441a      	add	r2, r3
 800718e:	449a      	add	sl, r3
 8007190:	441e      	add	r6, r3
 8007192:	4613      	mov	r3, r2
 8007194:	e7c1      	b.n	800711a <_dtoa_r+0x782>
 8007196:	4603      	mov	r3, r0
 8007198:	e7f6      	b.n	8007188 <_dtoa_r+0x7f0>
 800719a:	f1b9 0f00 	cmp.w	r9, #0
 800719e:	dc34      	bgt.n	800720a <_dtoa_r+0x872>
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	dd31      	ble.n	800720a <_dtoa_r+0x872>
 80071a6:	f8cd 9018 	str.w	r9, [sp, #24]
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	b963      	cbnz	r3, 80071c8 <_dtoa_r+0x830>
 80071ae:	4629      	mov	r1, r5
 80071b0:	2205      	movs	r2, #5
 80071b2:	4620      	mov	r0, r4
 80071b4:	f000 fce6 	bl	8007b84 <__multadd>
 80071b8:	4601      	mov	r1, r0
 80071ba:	4605      	mov	r5, r0
 80071bc:	9801      	ldr	r0, [sp, #4]
 80071be:	f000 fee9 	bl	8007f94 <__mcmp>
 80071c2:	2800      	cmp	r0, #0
 80071c4:	f73f adfc 	bgt.w	8006dc0 <_dtoa_r+0x428>
 80071c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071ca:	9e04      	ldr	r6, [sp, #16]
 80071cc:	ea6f 0b03 	mvn.w	fp, r3
 80071d0:	f04f 0900 	mov.w	r9, #0
 80071d4:	4629      	mov	r1, r5
 80071d6:	4620      	mov	r0, r4
 80071d8:	f000 fcbd 	bl	8007b56 <_Bfree>
 80071dc:	2f00      	cmp	r7, #0
 80071de:	f43f aebb 	beq.w	8006f58 <_dtoa_r+0x5c0>
 80071e2:	f1b9 0f00 	cmp.w	r9, #0
 80071e6:	d005      	beq.n	80071f4 <_dtoa_r+0x85c>
 80071e8:	45b9      	cmp	r9, r7
 80071ea:	d003      	beq.n	80071f4 <_dtoa_r+0x85c>
 80071ec:	4649      	mov	r1, r9
 80071ee:	4620      	mov	r0, r4
 80071f0:	f000 fcb1 	bl	8007b56 <_Bfree>
 80071f4:	4639      	mov	r1, r7
 80071f6:	4620      	mov	r0, r4
 80071f8:	f000 fcad 	bl	8007b56 <_Bfree>
 80071fc:	e6ac      	b.n	8006f58 <_dtoa_r+0x5c0>
 80071fe:	2500      	movs	r5, #0
 8007200:	462f      	mov	r7, r5
 8007202:	e7e1      	b.n	80071c8 <_dtoa_r+0x830>
 8007204:	469b      	mov	fp, r3
 8007206:	462f      	mov	r7, r5
 8007208:	e5da      	b.n	8006dc0 <_dtoa_r+0x428>
 800720a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720c:	f8cd 9018 	str.w	r9, [sp, #24]
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 80f3 	beq.w	80073fc <_dtoa_r+0xa64>
 8007216:	2e00      	cmp	r6, #0
 8007218:	dd05      	ble.n	8007226 <_dtoa_r+0x88e>
 800721a:	4639      	mov	r1, r7
 800721c:	4632      	mov	r2, r6
 800721e:	4620      	mov	r0, r4
 8007220:	f000 fe64 	bl	8007eec <__lshift>
 8007224:	4607      	mov	r7, r0
 8007226:	f1b8 0f00 	cmp.w	r8, #0
 800722a:	d04c      	beq.n	80072c6 <_dtoa_r+0x92e>
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	4620      	mov	r0, r4
 8007230:	f000 fc5d 	bl	8007aee <_Balloc>
 8007234:	693a      	ldr	r2, [r7, #16]
 8007236:	3202      	adds	r2, #2
 8007238:	4606      	mov	r6, r0
 800723a:	0092      	lsls	r2, r2, #2
 800723c:	f107 010c 	add.w	r1, r7, #12
 8007240:	300c      	adds	r0, #12
 8007242:	f000 fc49 	bl	8007ad8 <memcpy>
 8007246:	2201      	movs	r2, #1
 8007248:	4631      	mov	r1, r6
 800724a:	4620      	mov	r0, r4
 800724c:	f000 fe4e 	bl	8007eec <__lshift>
 8007250:	9b02      	ldr	r3, [sp, #8]
 8007252:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	46b9      	mov	r9, r7
 800725c:	9307      	str	r3, [sp, #28]
 800725e:	4607      	mov	r7, r0
 8007260:	4629      	mov	r1, r5
 8007262:	9801      	ldr	r0, [sp, #4]
 8007264:	f7ff fb0a 	bl	800687c <quorem>
 8007268:	4649      	mov	r1, r9
 800726a:	4606      	mov	r6, r0
 800726c:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007270:	9801      	ldr	r0, [sp, #4]
 8007272:	f000 fe8f 	bl	8007f94 <__mcmp>
 8007276:	463a      	mov	r2, r7
 8007278:	9002      	str	r0, [sp, #8]
 800727a:	4629      	mov	r1, r5
 800727c:	4620      	mov	r0, r4
 800727e:	f000 fea3 	bl	8007fc8 <__mdiff>
 8007282:	68c3      	ldr	r3, [r0, #12]
 8007284:	4602      	mov	r2, r0
 8007286:	bb03      	cbnz	r3, 80072ca <_dtoa_r+0x932>
 8007288:	4601      	mov	r1, r0
 800728a:	9009      	str	r0, [sp, #36]	; 0x24
 800728c:	9801      	ldr	r0, [sp, #4]
 800728e:	f000 fe81 	bl	8007f94 <__mcmp>
 8007292:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007294:	4603      	mov	r3, r0
 8007296:	4611      	mov	r1, r2
 8007298:	4620      	mov	r0, r4
 800729a:	9309      	str	r3, [sp, #36]	; 0x24
 800729c:	f000 fc5b 	bl	8007b56 <_Bfree>
 80072a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072a2:	b9a3      	cbnz	r3, 80072ce <_dtoa_r+0x936>
 80072a4:	9a08      	ldr	r2, [sp, #32]
 80072a6:	b992      	cbnz	r2, 80072ce <_dtoa_r+0x936>
 80072a8:	9a07      	ldr	r2, [sp, #28]
 80072aa:	b982      	cbnz	r2, 80072ce <_dtoa_r+0x936>
 80072ac:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80072b0:	d029      	beq.n	8007306 <_dtoa_r+0x96e>
 80072b2:	9b02      	ldr	r3, [sp, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	dd01      	ble.n	80072bc <_dtoa_r+0x924>
 80072b8:	f106 0831 	add.w	r8, r6, #49	; 0x31
 80072bc:	f10a 0601 	add.w	r6, sl, #1
 80072c0:	f88a 8000 	strb.w	r8, [sl]
 80072c4:	e786      	b.n	80071d4 <_dtoa_r+0x83c>
 80072c6:	4638      	mov	r0, r7
 80072c8:	e7c2      	b.n	8007250 <_dtoa_r+0x8b8>
 80072ca:	2301      	movs	r3, #1
 80072cc:	e7e3      	b.n	8007296 <_dtoa_r+0x8fe>
 80072ce:	9a02      	ldr	r2, [sp, #8]
 80072d0:	2a00      	cmp	r2, #0
 80072d2:	db04      	blt.n	80072de <_dtoa_r+0x946>
 80072d4:	d124      	bne.n	8007320 <_dtoa_r+0x988>
 80072d6:	9a08      	ldr	r2, [sp, #32]
 80072d8:	bb12      	cbnz	r2, 8007320 <_dtoa_r+0x988>
 80072da:	9a07      	ldr	r2, [sp, #28]
 80072dc:	bb02      	cbnz	r2, 8007320 <_dtoa_r+0x988>
 80072de:	2b00      	cmp	r3, #0
 80072e0:	ddec      	ble.n	80072bc <_dtoa_r+0x924>
 80072e2:	2201      	movs	r2, #1
 80072e4:	9901      	ldr	r1, [sp, #4]
 80072e6:	4620      	mov	r0, r4
 80072e8:	f000 fe00 	bl	8007eec <__lshift>
 80072ec:	4629      	mov	r1, r5
 80072ee:	9001      	str	r0, [sp, #4]
 80072f0:	f000 fe50 	bl	8007f94 <__mcmp>
 80072f4:	2800      	cmp	r0, #0
 80072f6:	dc03      	bgt.n	8007300 <_dtoa_r+0x968>
 80072f8:	d1e0      	bne.n	80072bc <_dtoa_r+0x924>
 80072fa:	f018 0f01 	tst.w	r8, #1
 80072fe:	d0dd      	beq.n	80072bc <_dtoa_r+0x924>
 8007300:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007304:	d1d8      	bne.n	80072b8 <_dtoa_r+0x920>
 8007306:	2339      	movs	r3, #57	; 0x39
 8007308:	f10a 0601 	add.w	r6, sl, #1
 800730c:	f88a 3000 	strb.w	r3, [sl]
 8007310:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007314:	2b39      	cmp	r3, #57	; 0x39
 8007316:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 800731a:	d04c      	beq.n	80073b6 <_dtoa_r+0xa1e>
 800731c:	3301      	adds	r3, #1
 800731e:	e051      	b.n	80073c4 <_dtoa_r+0xa2c>
 8007320:	2b00      	cmp	r3, #0
 8007322:	f10a 0601 	add.w	r6, sl, #1
 8007326:	dd05      	ble.n	8007334 <_dtoa_r+0x99c>
 8007328:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800732c:	d0eb      	beq.n	8007306 <_dtoa_r+0x96e>
 800732e:	f108 0801 	add.w	r8, r8, #1
 8007332:	e7c5      	b.n	80072c0 <_dtoa_r+0x928>
 8007334:	9b04      	ldr	r3, [sp, #16]
 8007336:	9a06      	ldr	r2, [sp, #24]
 8007338:	f806 8c01 	strb.w	r8, [r6, #-1]
 800733c:	1af3      	subs	r3, r6, r3
 800733e:	4293      	cmp	r3, r2
 8007340:	d021      	beq.n	8007386 <_dtoa_r+0x9ee>
 8007342:	2300      	movs	r3, #0
 8007344:	220a      	movs	r2, #10
 8007346:	9901      	ldr	r1, [sp, #4]
 8007348:	4620      	mov	r0, r4
 800734a:	f000 fc1b 	bl	8007b84 <__multadd>
 800734e:	45b9      	cmp	r9, r7
 8007350:	9001      	str	r0, [sp, #4]
 8007352:	f04f 0300 	mov.w	r3, #0
 8007356:	f04f 020a 	mov.w	r2, #10
 800735a:	4649      	mov	r1, r9
 800735c:	4620      	mov	r0, r4
 800735e:	d105      	bne.n	800736c <_dtoa_r+0x9d4>
 8007360:	f000 fc10 	bl	8007b84 <__multadd>
 8007364:	4681      	mov	r9, r0
 8007366:	4607      	mov	r7, r0
 8007368:	46b2      	mov	sl, r6
 800736a:	e779      	b.n	8007260 <_dtoa_r+0x8c8>
 800736c:	f000 fc0a 	bl	8007b84 <__multadd>
 8007370:	4639      	mov	r1, r7
 8007372:	4681      	mov	r9, r0
 8007374:	2300      	movs	r3, #0
 8007376:	220a      	movs	r2, #10
 8007378:	4620      	mov	r0, r4
 800737a:	f000 fc03 	bl	8007b84 <__multadd>
 800737e:	4607      	mov	r7, r0
 8007380:	e7f2      	b.n	8007368 <_dtoa_r+0x9d0>
 8007382:	f04f 0900 	mov.w	r9, #0
 8007386:	2201      	movs	r2, #1
 8007388:	9901      	ldr	r1, [sp, #4]
 800738a:	4620      	mov	r0, r4
 800738c:	f000 fdae 	bl	8007eec <__lshift>
 8007390:	4629      	mov	r1, r5
 8007392:	9001      	str	r0, [sp, #4]
 8007394:	f000 fdfe 	bl	8007f94 <__mcmp>
 8007398:	2800      	cmp	r0, #0
 800739a:	dcb9      	bgt.n	8007310 <_dtoa_r+0x978>
 800739c:	d102      	bne.n	80073a4 <_dtoa_r+0xa0c>
 800739e:	f018 0f01 	tst.w	r8, #1
 80073a2:	d1b5      	bne.n	8007310 <_dtoa_r+0x978>
 80073a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80073a8:	2b30      	cmp	r3, #48	; 0x30
 80073aa:	f106 32ff 	add.w	r2, r6, #4294967295	; 0xffffffff
 80073ae:	f47f af11 	bne.w	80071d4 <_dtoa_r+0x83c>
 80073b2:	4616      	mov	r6, r2
 80073b4:	e7f6      	b.n	80073a4 <_dtoa_r+0xa0c>
 80073b6:	9b04      	ldr	r3, [sp, #16]
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d105      	bne.n	80073c8 <_dtoa_r+0xa30>
 80073bc:	9a04      	ldr	r2, [sp, #16]
 80073be:	f10b 0b01 	add.w	fp, fp, #1
 80073c2:	2331      	movs	r3, #49	; 0x31
 80073c4:	7013      	strb	r3, [r2, #0]
 80073c6:	e705      	b.n	80071d4 <_dtoa_r+0x83c>
 80073c8:	4616      	mov	r6, r2
 80073ca:	e7a1      	b.n	8007310 <_dtoa_r+0x978>
 80073cc:	4b16      	ldr	r3, [pc, #88]	; (8007428 <_dtoa_r+0xa90>)
 80073ce:	f7ff bb48 	b.w	8006a62 <_dtoa_r+0xca>
 80073d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	f47f ab23 	bne.w	8006a20 <_dtoa_r+0x88>
 80073da:	4b14      	ldr	r3, [pc, #80]	; (800742c <_dtoa_r+0xa94>)
 80073dc:	f7ff bb41 	b.w	8006a62 <_dtoa_r+0xca>
 80073e0:	9b08      	ldr	r3, [sp, #32]
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	f77f ae3b 	ble.w	800705e <_dtoa_r+0x6c6>
 80073e8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80073ec:	e64f      	b.n	800708e <_dtoa_r+0x6f6>
 80073ee:	9b06      	ldr	r3, [sp, #24]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	dc03      	bgt.n	80073fc <_dtoa_r+0xa64>
 80073f4:	9b08      	ldr	r3, [sp, #32]
 80073f6:	2b02      	cmp	r3, #2
 80073f8:	f73f aed7 	bgt.w	80071aa <_dtoa_r+0x812>
 80073fc:	9e04      	ldr	r6, [sp, #16]
 80073fe:	9801      	ldr	r0, [sp, #4]
 8007400:	4629      	mov	r1, r5
 8007402:	f7ff fa3b 	bl	800687c <quorem>
 8007406:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800740a:	f806 8b01 	strb.w	r8, [r6], #1
 800740e:	9b04      	ldr	r3, [sp, #16]
 8007410:	9a06      	ldr	r2, [sp, #24]
 8007412:	1af3      	subs	r3, r6, r3
 8007414:	429a      	cmp	r2, r3
 8007416:	ddb4      	ble.n	8007382 <_dtoa_r+0x9ea>
 8007418:	2300      	movs	r3, #0
 800741a:	220a      	movs	r2, #10
 800741c:	9901      	ldr	r1, [sp, #4]
 800741e:	4620      	mov	r0, r4
 8007420:	f000 fbb0 	bl	8007b84 <__multadd>
 8007424:	9001      	str	r0, [sp, #4]
 8007426:	e7ea      	b.n	80073fe <_dtoa_r+0xa66>
 8007428:	08008a7c 	.word	0x08008a7c
 800742c:	08008af8 	.word	0x08008af8

08007430 <rshift>:
 8007430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007432:	6906      	ldr	r6, [r0, #16]
 8007434:	114b      	asrs	r3, r1, #5
 8007436:	429e      	cmp	r6, r3
 8007438:	f100 0414 	add.w	r4, r0, #20
 800743c:	dd30      	ble.n	80074a0 <rshift+0x70>
 800743e:	f011 011f 	ands.w	r1, r1, #31
 8007442:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007446:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800744a:	d108      	bne.n	800745e <rshift+0x2e>
 800744c:	4621      	mov	r1, r4
 800744e:	42b2      	cmp	r2, r6
 8007450:	460b      	mov	r3, r1
 8007452:	d211      	bcs.n	8007478 <rshift+0x48>
 8007454:	f852 3b04 	ldr.w	r3, [r2], #4
 8007458:	f841 3b04 	str.w	r3, [r1], #4
 800745c:	e7f7      	b.n	800744e <rshift+0x1e>
 800745e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007462:	f1c1 0c20 	rsb	ip, r1, #32
 8007466:	40cd      	lsrs	r5, r1
 8007468:	3204      	adds	r2, #4
 800746a:	4623      	mov	r3, r4
 800746c:	42b2      	cmp	r2, r6
 800746e:	4617      	mov	r7, r2
 8007470:	d30c      	bcc.n	800748c <rshift+0x5c>
 8007472:	601d      	str	r5, [r3, #0]
 8007474:	b105      	cbz	r5, 8007478 <rshift+0x48>
 8007476:	3304      	adds	r3, #4
 8007478:	1b1a      	subs	r2, r3, r4
 800747a:	42a3      	cmp	r3, r4
 800747c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007480:	bf08      	it	eq
 8007482:	2300      	moveq	r3, #0
 8007484:	6102      	str	r2, [r0, #16]
 8007486:	bf08      	it	eq
 8007488:	6143      	streq	r3, [r0, #20]
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748c:	683f      	ldr	r7, [r7, #0]
 800748e:	fa07 f70c 	lsl.w	r7, r7, ip
 8007492:	433d      	orrs	r5, r7
 8007494:	f843 5b04 	str.w	r5, [r3], #4
 8007498:	f852 5b04 	ldr.w	r5, [r2], #4
 800749c:	40cd      	lsrs	r5, r1
 800749e:	e7e5      	b.n	800746c <rshift+0x3c>
 80074a0:	4623      	mov	r3, r4
 80074a2:	e7e9      	b.n	8007478 <rshift+0x48>

080074a4 <__hexdig_fun>:
 80074a4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80074a8:	2b09      	cmp	r3, #9
 80074aa:	d802      	bhi.n	80074b2 <__hexdig_fun+0xe>
 80074ac:	3820      	subs	r0, #32
 80074ae:	b2c0      	uxtb	r0, r0
 80074b0:	4770      	bx	lr
 80074b2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80074b6:	2b05      	cmp	r3, #5
 80074b8:	d801      	bhi.n	80074be <__hexdig_fun+0x1a>
 80074ba:	3847      	subs	r0, #71	; 0x47
 80074bc:	e7f7      	b.n	80074ae <__hexdig_fun+0xa>
 80074be:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80074c2:	2b05      	cmp	r3, #5
 80074c4:	d801      	bhi.n	80074ca <__hexdig_fun+0x26>
 80074c6:	3827      	subs	r0, #39	; 0x27
 80074c8:	e7f1      	b.n	80074ae <__hexdig_fun+0xa>
 80074ca:	2000      	movs	r0, #0
 80074cc:	4770      	bx	lr

080074ce <__gethex>:
 80074ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d2:	b08b      	sub	sp, #44	; 0x2c
 80074d4:	468a      	mov	sl, r1
 80074d6:	9002      	str	r0, [sp, #8]
 80074d8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80074da:	9306      	str	r3, [sp, #24]
 80074dc:	4690      	mov	r8, r2
 80074de:	f000 fad0 	bl	8007a82 <__localeconv_l>
 80074e2:	6803      	ldr	r3, [r0, #0]
 80074e4:	9303      	str	r3, [sp, #12]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7f8 feaa 	bl	8000240 <strlen>
 80074ec:	9b03      	ldr	r3, [sp, #12]
 80074ee:	9001      	str	r0, [sp, #4]
 80074f0:	4403      	add	r3, r0
 80074f2:	f04f 0b00 	mov.w	fp, #0
 80074f6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80074fa:	9307      	str	r3, [sp, #28]
 80074fc:	f8da 3000 	ldr.w	r3, [sl]
 8007500:	3302      	adds	r3, #2
 8007502:	461f      	mov	r7, r3
 8007504:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007508:	2830      	cmp	r0, #48	; 0x30
 800750a:	d06c      	beq.n	80075e6 <__gethex+0x118>
 800750c:	f7ff ffca 	bl	80074a4 <__hexdig_fun>
 8007510:	4604      	mov	r4, r0
 8007512:	2800      	cmp	r0, #0
 8007514:	d16a      	bne.n	80075ec <__gethex+0x11e>
 8007516:	9a01      	ldr	r2, [sp, #4]
 8007518:	9903      	ldr	r1, [sp, #12]
 800751a:	4638      	mov	r0, r7
 800751c:	f001 f8fe 	bl	800871c <strncmp>
 8007520:	2800      	cmp	r0, #0
 8007522:	d166      	bne.n	80075f2 <__gethex+0x124>
 8007524:	9b01      	ldr	r3, [sp, #4]
 8007526:	5cf8      	ldrb	r0, [r7, r3]
 8007528:	18fe      	adds	r6, r7, r3
 800752a:	f7ff ffbb 	bl	80074a4 <__hexdig_fun>
 800752e:	2800      	cmp	r0, #0
 8007530:	d062      	beq.n	80075f8 <__gethex+0x12a>
 8007532:	4633      	mov	r3, r6
 8007534:	7818      	ldrb	r0, [r3, #0]
 8007536:	2830      	cmp	r0, #48	; 0x30
 8007538:	461f      	mov	r7, r3
 800753a:	f103 0301 	add.w	r3, r3, #1
 800753e:	d0f9      	beq.n	8007534 <__gethex+0x66>
 8007540:	f7ff ffb0 	bl	80074a4 <__hexdig_fun>
 8007544:	fab0 f580 	clz	r5, r0
 8007548:	096d      	lsrs	r5, r5, #5
 800754a:	4634      	mov	r4, r6
 800754c:	f04f 0b01 	mov.w	fp, #1
 8007550:	463a      	mov	r2, r7
 8007552:	4616      	mov	r6, r2
 8007554:	3201      	adds	r2, #1
 8007556:	7830      	ldrb	r0, [r6, #0]
 8007558:	f7ff ffa4 	bl	80074a4 <__hexdig_fun>
 800755c:	2800      	cmp	r0, #0
 800755e:	d1f8      	bne.n	8007552 <__gethex+0x84>
 8007560:	9a01      	ldr	r2, [sp, #4]
 8007562:	9903      	ldr	r1, [sp, #12]
 8007564:	4630      	mov	r0, r6
 8007566:	f001 f8d9 	bl	800871c <strncmp>
 800756a:	b950      	cbnz	r0, 8007582 <__gethex+0xb4>
 800756c:	b954      	cbnz	r4, 8007584 <__gethex+0xb6>
 800756e:	9b01      	ldr	r3, [sp, #4]
 8007570:	18f4      	adds	r4, r6, r3
 8007572:	4622      	mov	r2, r4
 8007574:	4616      	mov	r6, r2
 8007576:	3201      	adds	r2, #1
 8007578:	7830      	ldrb	r0, [r6, #0]
 800757a:	f7ff ff93 	bl	80074a4 <__hexdig_fun>
 800757e:	2800      	cmp	r0, #0
 8007580:	d1f8      	bne.n	8007574 <__gethex+0xa6>
 8007582:	b10c      	cbz	r4, 8007588 <__gethex+0xba>
 8007584:	1ba4      	subs	r4, r4, r6
 8007586:	00a4      	lsls	r4, r4, #2
 8007588:	7833      	ldrb	r3, [r6, #0]
 800758a:	2b50      	cmp	r3, #80	; 0x50
 800758c:	d001      	beq.n	8007592 <__gethex+0xc4>
 800758e:	2b70      	cmp	r3, #112	; 0x70
 8007590:	d140      	bne.n	8007614 <__gethex+0x146>
 8007592:	7873      	ldrb	r3, [r6, #1]
 8007594:	2b2b      	cmp	r3, #43	; 0x2b
 8007596:	d031      	beq.n	80075fc <__gethex+0x12e>
 8007598:	2b2d      	cmp	r3, #45	; 0x2d
 800759a:	d033      	beq.n	8007604 <__gethex+0x136>
 800759c:	1c71      	adds	r1, r6, #1
 800759e:	f04f 0900 	mov.w	r9, #0
 80075a2:	7808      	ldrb	r0, [r1, #0]
 80075a4:	f7ff ff7e 	bl	80074a4 <__hexdig_fun>
 80075a8:	1e43      	subs	r3, r0, #1
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b18      	cmp	r3, #24
 80075ae:	d831      	bhi.n	8007614 <__gethex+0x146>
 80075b0:	f1a0 0210 	sub.w	r2, r0, #16
 80075b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80075b8:	f7ff ff74 	bl	80074a4 <__hexdig_fun>
 80075bc:	1e43      	subs	r3, r0, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	2b18      	cmp	r3, #24
 80075c2:	d922      	bls.n	800760a <__gethex+0x13c>
 80075c4:	f1b9 0f00 	cmp.w	r9, #0
 80075c8:	d000      	beq.n	80075cc <__gethex+0xfe>
 80075ca:	4252      	negs	r2, r2
 80075cc:	4414      	add	r4, r2
 80075ce:	f8ca 1000 	str.w	r1, [sl]
 80075d2:	b30d      	cbz	r5, 8007618 <__gethex+0x14a>
 80075d4:	f1bb 0f00 	cmp.w	fp, #0
 80075d8:	bf0c      	ite	eq
 80075da:	2706      	moveq	r7, #6
 80075dc:	2700      	movne	r7, #0
 80075de:	4638      	mov	r0, r7
 80075e0:	b00b      	add	sp, #44	; 0x2c
 80075e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e6:	f10b 0b01 	add.w	fp, fp, #1
 80075ea:	e78a      	b.n	8007502 <__gethex+0x34>
 80075ec:	2500      	movs	r5, #0
 80075ee:	462c      	mov	r4, r5
 80075f0:	e7ae      	b.n	8007550 <__gethex+0x82>
 80075f2:	463e      	mov	r6, r7
 80075f4:	2501      	movs	r5, #1
 80075f6:	e7c7      	b.n	8007588 <__gethex+0xba>
 80075f8:	4604      	mov	r4, r0
 80075fa:	e7fb      	b.n	80075f4 <__gethex+0x126>
 80075fc:	f04f 0900 	mov.w	r9, #0
 8007600:	1cb1      	adds	r1, r6, #2
 8007602:	e7ce      	b.n	80075a2 <__gethex+0xd4>
 8007604:	f04f 0901 	mov.w	r9, #1
 8007608:	e7fa      	b.n	8007600 <__gethex+0x132>
 800760a:	230a      	movs	r3, #10
 800760c:	fb03 0202 	mla	r2, r3, r2, r0
 8007610:	3a10      	subs	r2, #16
 8007612:	e7cf      	b.n	80075b4 <__gethex+0xe6>
 8007614:	4631      	mov	r1, r6
 8007616:	e7da      	b.n	80075ce <__gethex+0x100>
 8007618:	1bf3      	subs	r3, r6, r7
 800761a:	3b01      	subs	r3, #1
 800761c:	4629      	mov	r1, r5
 800761e:	2b07      	cmp	r3, #7
 8007620:	dc49      	bgt.n	80076b6 <__gethex+0x1e8>
 8007622:	9802      	ldr	r0, [sp, #8]
 8007624:	f000 fa63 	bl	8007aee <_Balloc>
 8007628:	9b01      	ldr	r3, [sp, #4]
 800762a:	f100 0914 	add.w	r9, r0, #20
 800762e:	f04f 0b00 	mov.w	fp, #0
 8007632:	f1c3 0301 	rsb	r3, r3, #1
 8007636:	4605      	mov	r5, r0
 8007638:	f8cd 9010 	str.w	r9, [sp, #16]
 800763c:	46da      	mov	sl, fp
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	42b7      	cmp	r7, r6
 8007642:	d33b      	bcc.n	80076bc <__gethex+0x1ee>
 8007644:	9804      	ldr	r0, [sp, #16]
 8007646:	f840 ab04 	str.w	sl, [r0], #4
 800764a:	eba0 0009 	sub.w	r0, r0, r9
 800764e:	1080      	asrs	r0, r0, #2
 8007650:	6128      	str	r0, [r5, #16]
 8007652:	0147      	lsls	r7, r0, #5
 8007654:	4650      	mov	r0, sl
 8007656:	f000 fb0e 	bl	8007c76 <__hi0bits>
 800765a:	f8d8 6000 	ldr.w	r6, [r8]
 800765e:	1a3f      	subs	r7, r7, r0
 8007660:	42b7      	cmp	r7, r6
 8007662:	dd64      	ble.n	800772e <__gethex+0x260>
 8007664:	1bbf      	subs	r7, r7, r6
 8007666:	4639      	mov	r1, r7
 8007668:	4628      	mov	r0, r5
 800766a:	f000 fe1e 	bl	80082aa <__any_on>
 800766e:	4682      	mov	sl, r0
 8007670:	b178      	cbz	r0, 8007692 <__gethex+0x1c4>
 8007672:	1e7b      	subs	r3, r7, #1
 8007674:	1159      	asrs	r1, r3, #5
 8007676:	f003 021f 	and.w	r2, r3, #31
 800767a:	f04f 0a01 	mov.w	sl, #1
 800767e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007682:	fa0a f202 	lsl.w	r2, sl, r2
 8007686:	420a      	tst	r2, r1
 8007688:	d003      	beq.n	8007692 <__gethex+0x1c4>
 800768a:	4553      	cmp	r3, sl
 800768c:	dc46      	bgt.n	800771c <__gethex+0x24e>
 800768e:	f04f 0a02 	mov.w	sl, #2
 8007692:	4639      	mov	r1, r7
 8007694:	4628      	mov	r0, r5
 8007696:	f7ff fecb 	bl	8007430 <rshift>
 800769a:	443c      	add	r4, r7
 800769c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80076a0:	42a3      	cmp	r3, r4
 80076a2:	da52      	bge.n	800774a <__gethex+0x27c>
 80076a4:	4629      	mov	r1, r5
 80076a6:	9802      	ldr	r0, [sp, #8]
 80076a8:	f000 fa55 	bl	8007b56 <_Bfree>
 80076ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80076ae:	2300      	movs	r3, #0
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	27a3      	movs	r7, #163	; 0xa3
 80076b4:	e793      	b.n	80075de <__gethex+0x110>
 80076b6:	3101      	adds	r1, #1
 80076b8:	105b      	asrs	r3, r3, #1
 80076ba:	e7b0      	b.n	800761e <__gethex+0x150>
 80076bc:	1e73      	subs	r3, r6, #1
 80076be:	9305      	str	r3, [sp, #20]
 80076c0:	9a07      	ldr	r2, [sp, #28]
 80076c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d018      	beq.n	80076fc <__gethex+0x22e>
 80076ca:	f1bb 0f20 	cmp.w	fp, #32
 80076ce:	d107      	bne.n	80076e0 <__gethex+0x212>
 80076d0:	9b04      	ldr	r3, [sp, #16]
 80076d2:	f8c3 a000 	str.w	sl, [r3]
 80076d6:	3304      	adds	r3, #4
 80076d8:	f04f 0a00 	mov.w	sl, #0
 80076dc:	9304      	str	r3, [sp, #16]
 80076de:	46d3      	mov	fp, sl
 80076e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80076e4:	f7ff fede 	bl	80074a4 <__hexdig_fun>
 80076e8:	f000 000f 	and.w	r0, r0, #15
 80076ec:	fa00 f00b 	lsl.w	r0, r0, fp
 80076f0:	ea4a 0a00 	orr.w	sl, sl, r0
 80076f4:	f10b 0b04 	add.w	fp, fp, #4
 80076f8:	9b05      	ldr	r3, [sp, #20]
 80076fa:	e00d      	b.n	8007718 <__gethex+0x24a>
 80076fc:	9b05      	ldr	r3, [sp, #20]
 80076fe:	9a08      	ldr	r2, [sp, #32]
 8007700:	4413      	add	r3, r2
 8007702:	42bb      	cmp	r3, r7
 8007704:	d3e1      	bcc.n	80076ca <__gethex+0x1fc>
 8007706:	4618      	mov	r0, r3
 8007708:	9a01      	ldr	r2, [sp, #4]
 800770a:	9903      	ldr	r1, [sp, #12]
 800770c:	9309      	str	r3, [sp, #36]	; 0x24
 800770e:	f001 f805 	bl	800871c <strncmp>
 8007712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007714:	2800      	cmp	r0, #0
 8007716:	d1d8      	bne.n	80076ca <__gethex+0x1fc>
 8007718:	461e      	mov	r6, r3
 800771a:	e791      	b.n	8007640 <__gethex+0x172>
 800771c:	1eb9      	subs	r1, r7, #2
 800771e:	4628      	mov	r0, r5
 8007720:	f000 fdc3 	bl	80082aa <__any_on>
 8007724:	2800      	cmp	r0, #0
 8007726:	d0b2      	beq.n	800768e <__gethex+0x1c0>
 8007728:	f04f 0a03 	mov.w	sl, #3
 800772c:	e7b1      	b.n	8007692 <__gethex+0x1c4>
 800772e:	da09      	bge.n	8007744 <__gethex+0x276>
 8007730:	1bf7      	subs	r7, r6, r7
 8007732:	4629      	mov	r1, r5
 8007734:	463a      	mov	r2, r7
 8007736:	9802      	ldr	r0, [sp, #8]
 8007738:	f000 fbd8 	bl	8007eec <__lshift>
 800773c:	1be4      	subs	r4, r4, r7
 800773e:	4605      	mov	r5, r0
 8007740:	f100 0914 	add.w	r9, r0, #20
 8007744:	f04f 0a00 	mov.w	sl, #0
 8007748:	e7a8      	b.n	800769c <__gethex+0x1ce>
 800774a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800774e:	42a0      	cmp	r0, r4
 8007750:	dd6a      	ble.n	8007828 <__gethex+0x35a>
 8007752:	1b04      	subs	r4, r0, r4
 8007754:	42a6      	cmp	r6, r4
 8007756:	dc2e      	bgt.n	80077b6 <__gethex+0x2e8>
 8007758:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d022      	beq.n	80077a6 <__gethex+0x2d8>
 8007760:	2b03      	cmp	r3, #3
 8007762:	d024      	beq.n	80077ae <__gethex+0x2e0>
 8007764:	2b01      	cmp	r3, #1
 8007766:	d115      	bne.n	8007794 <__gethex+0x2c6>
 8007768:	42a6      	cmp	r6, r4
 800776a:	d113      	bne.n	8007794 <__gethex+0x2c6>
 800776c:	2e01      	cmp	r6, #1
 800776e:	dc0b      	bgt.n	8007788 <__gethex+0x2ba>
 8007770:	9a06      	ldr	r2, [sp, #24]
 8007772:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007776:	6013      	str	r3, [r2, #0]
 8007778:	2301      	movs	r3, #1
 800777a:	612b      	str	r3, [r5, #16]
 800777c:	f8c9 3000 	str.w	r3, [r9]
 8007780:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007782:	2762      	movs	r7, #98	; 0x62
 8007784:	601d      	str	r5, [r3, #0]
 8007786:	e72a      	b.n	80075de <__gethex+0x110>
 8007788:	1e71      	subs	r1, r6, #1
 800778a:	4628      	mov	r0, r5
 800778c:	f000 fd8d 	bl	80082aa <__any_on>
 8007790:	2800      	cmp	r0, #0
 8007792:	d1ed      	bne.n	8007770 <__gethex+0x2a2>
 8007794:	4629      	mov	r1, r5
 8007796:	9802      	ldr	r0, [sp, #8]
 8007798:	f000 f9dd 	bl	8007b56 <_Bfree>
 800779c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800779e:	2300      	movs	r3, #0
 80077a0:	6013      	str	r3, [r2, #0]
 80077a2:	2750      	movs	r7, #80	; 0x50
 80077a4:	e71b      	b.n	80075de <__gethex+0x110>
 80077a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0e1      	beq.n	8007770 <__gethex+0x2a2>
 80077ac:	e7f2      	b.n	8007794 <__gethex+0x2c6>
 80077ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d1dd      	bne.n	8007770 <__gethex+0x2a2>
 80077b4:	e7ee      	b.n	8007794 <__gethex+0x2c6>
 80077b6:	1e67      	subs	r7, r4, #1
 80077b8:	f1ba 0f00 	cmp.w	sl, #0
 80077bc:	d131      	bne.n	8007822 <__gethex+0x354>
 80077be:	b127      	cbz	r7, 80077ca <__gethex+0x2fc>
 80077c0:	4639      	mov	r1, r7
 80077c2:	4628      	mov	r0, r5
 80077c4:	f000 fd71 	bl	80082aa <__any_on>
 80077c8:	4682      	mov	sl, r0
 80077ca:	117a      	asrs	r2, r7, #5
 80077cc:	2301      	movs	r3, #1
 80077ce:	f007 071f 	and.w	r7, r7, #31
 80077d2:	fa03 f707 	lsl.w	r7, r3, r7
 80077d6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80077da:	4621      	mov	r1, r4
 80077dc:	421f      	tst	r7, r3
 80077de:	4628      	mov	r0, r5
 80077e0:	bf18      	it	ne
 80077e2:	f04a 0a02 	orrne.w	sl, sl, #2
 80077e6:	1b36      	subs	r6, r6, r4
 80077e8:	f7ff fe22 	bl	8007430 <rshift>
 80077ec:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80077f0:	2702      	movs	r7, #2
 80077f2:	f1ba 0f00 	cmp.w	sl, #0
 80077f6:	d048      	beq.n	800788a <__gethex+0x3bc>
 80077f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077fc:	2b02      	cmp	r3, #2
 80077fe:	d015      	beq.n	800782c <__gethex+0x35e>
 8007800:	2b03      	cmp	r3, #3
 8007802:	d017      	beq.n	8007834 <__gethex+0x366>
 8007804:	2b01      	cmp	r3, #1
 8007806:	d109      	bne.n	800781c <__gethex+0x34e>
 8007808:	f01a 0f02 	tst.w	sl, #2
 800780c:	d006      	beq.n	800781c <__gethex+0x34e>
 800780e:	f8d9 3000 	ldr.w	r3, [r9]
 8007812:	ea4a 0a03 	orr.w	sl, sl, r3
 8007816:	f01a 0f01 	tst.w	sl, #1
 800781a:	d10e      	bne.n	800783a <__gethex+0x36c>
 800781c:	f047 0710 	orr.w	r7, r7, #16
 8007820:	e033      	b.n	800788a <__gethex+0x3bc>
 8007822:	f04f 0a01 	mov.w	sl, #1
 8007826:	e7d0      	b.n	80077ca <__gethex+0x2fc>
 8007828:	2701      	movs	r7, #1
 800782a:	e7e2      	b.n	80077f2 <__gethex+0x324>
 800782c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800782e:	f1c3 0301 	rsb	r3, r3, #1
 8007832:	9315      	str	r3, [sp, #84]	; 0x54
 8007834:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0f0      	beq.n	800781c <__gethex+0x34e>
 800783a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800783e:	f105 0314 	add.w	r3, r5, #20
 8007842:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8007846:	eb03 010a 	add.w	r1, r3, sl
 800784a:	f04f 0c00 	mov.w	ip, #0
 800784e:	4618      	mov	r0, r3
 8007850:	f853 2b04 	ldr.w	r2, [r3], #4
 8007854:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8007858:	d01c      	beq.n	8007894 <__gethex+0x3c6>
 800785a:	3201      	adds	r2, #1
 800785c:	6002      	str	r2, [r0, #0]
 800785e:	2f02      	cmp	r7, #2
 8007860:	f105 0314 	add.w	r3, r5, #20
 8007864:	d138      	bne.n	80078d8 <__gethex+0x40a>
 8007866:	f8d8 2000 	ldr.w	r2, [r8]
 800786a:	3a01      	subs	r2, #1
 800786c:	42b2      	cmp	r2, r6
 800786e:	d10a      	bne.n	8007886 <__gethex+0x3b8>
 8007870:	1171      	asrs	r1, r6, #5
 8007872:	2201      	movs	r2, #1
 8007874:	f006 061f 	and.w	r6, r6, #31
 8007878:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800787c:	fa02 f606 	lsl.w	r6, r2, r6
 8007880:	421e      	tst	r6, r3
 8007882:	bf18      	it	ne
 8007884:	4617      	movne	r7, r2
 8007886:	f047 0720 	orr.w	r7, r7, #32
 800788a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800788c:	601d      	str	r5, [r3, #0]
 800788e:	9b06      	ldr	r3, [sp, #24]
 8007890:	601c      	str	r4, [r3, #0]
 8007892:	e6a4      	b.n	80075de <__gethex+0x110>
 8007894:	4299      	cmp	r1, r3
 8007896:	f843 cc04 	str.w	ip, [r3, #-4]
 800789a:	d8d8      	bhi.n	800784e <__gethex+0x380>
 800789c:	68ab      	ldr	r3, [r5, #8]
 800789e:	4599      	cmp	r9, r3
 80078a0:	db12      	blt.n	80078c8 <__gethex+0x3fa>
 80078a2:	6869      	ldr	r1, [r5, #4]
 80078a4:	9802      	ldr	r0, [sp, #8]
 80078a6:	3101      	adds	r1, #1
 80078a8:	f000 f921 	bl	8007aee <_Balloc>
 80078ac:	692a      	ldr	r2, [r5, #16]
 80078ae:	3202      	adds	r2, #2
 80078b0:	f105 010c 	add.w	r1, r5, #12
 80078b4:	4683      	mov	fp, r0
 80078b6:	0092      	lsls	r2, r2, #2
 80078b8:	300c      	adds	r0, #12
 80078ba:	f000 f90d 	bl	8007ad8 <memcpy>
 80078be:	4629      	mov	r1, r5
 80078c0:	9802      	ldr	r0, [sp, #8]
 80078c2:	f000 f948 	bl	8007b56 <_Bfree>
 80078c6:	465d      	mov	r5, fp
 80078c8:	692b      	ldr	r3, [r5, #16]
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80078d0:	612a      	str	r2, [r5, #16]
 80078d2:	2201      	movs	r2, #1
 80078d4:	615a      	str	r2, [r3, #20]
 80078d6:	e7c2      	b.n	800785e <__gethex+0x390>
 80078d8:	692a      	ldr	r2, [r5, #16]
 80078da:	454a      	cmp	r2, r9
 80078dc:	dd0b      	ble.n	80078f6 <__gethex+0x428>
 80078de:	2101      	movs	r1, #1
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7ff fda5 	bl	8007430 <rshift>
 80078e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80078ea:	3401      	adds	r4, #1
 80078ec:	42a3      	cmp	r3, r4
 80078ee:	f6ff aed9 	blt.w	80076a4 <__gethex+0x1d6>
 80078f2:	2701      	movs	r7, #1
 80078f4:	e7c7      	b.n	8007886 <__gethex+0x3b8>
 80078f6:	f016 061f 	ands.w	r6, r6, #31
 80078fa:	d0fa      	beq.n	80078f2 <__gethex+0x424>
 80078fc:	449a      	add	sl, r3
 80078fe:	f1c6 0620 	rsb	r6, r6, #32
 8007902:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8007906:	f000 f9b6 	bl	8007c76 <__hi0bits>
 800790a:	42b0      	cmp	r0, r6
 800790c:	dbe7      	blt.n	80078de <__gethex+0x410>
 800790e:	e7f0      	b.n	80078f2 <__gethex+0x424>

08007910 <L_shift>:
 8007910:	f1c2 0208 	rsb	r2, r2, #8
 8007914:	0092      	lsls	r2, r2, #2
 8007916:	b570      	push	{r4, r5, r6, lr}
 8007918:	f1c2 0620 	rsb	r6, r2, #32
 800791c:	6843      	ldr	r3, [r0, #4]
 800791e:	6804      	ldr	r4, [r0, #0]
 8007920:	fa03 f506 	lsl.w	r5, r3, r6
 8007924:	432c      	orrs	r4, r5
 8007926:	40d3      	lsrs	r3, r2
 8007928:	6004      	str	r4, [r0, #0]
 800792a:	f840 3f04 	str.w	r3, [r0, #4]!
 800792e:	4288      	cmp	r0, r1
 8007930:	d3f4      	bcc.n	800791c <L_shift+0xc>
 8007932:	bd70      	pop	{r4, r5, r6, pc}

08007934 <__match>:
 8007934:	b530      	push	{r4, r5, lr}
 8007936:	6803      	ldr	r3, [r0, #0]
 8007938:	3301      	adds	r3, #1
 800793a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800793e:	b914      	cbnz	r4, 8007946 <__match+0x12>
 8007940:	6003      	str	r3, [r0, #0]
 8007942:	2001      	movs	r0, #1
 8007944:	bd30      	pop	{r4, r5, pc}
 8007946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800794a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800794e:	2d19      	cmp	r5, #25
 8007950:	bf98      	it	ls
 8007952:	3220      	addls	r2, #32
 8007954:	42a2      	cmp	r2, r4
 8007956:	d0f0      	beq.n	800793a <__match+0x6>
 8007958:	2000      	movs	r0, #0
 800795a:	e7f3      	b.n	8007944 <__match+0x10>

0800795c <__hexnan>:
 800795c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007960:	680b      	ldr	r3, [r1, #0]
 8007962:	6801      	ldr	r1, [r0, #0]
 8007964:	115f      	asrs	r7, r3, #5
 8007966:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800796a:	f013 031f 	ands.w	r3, r3, #31
 800796e:	b087      	sub	sp, #28
 8007970:	bf18      	it	ne
 8007972:	3704      	addne	r7, #4
 8007974:	2500      	movs	r5, #0
 8007976:	1f3e      	subs	r6, r7, #4
 8007978:	4682      	mov	sl, r0
 800797a:	4690      	mov	r8, r2
 800797c:	9301      	str	r3, [sp, #4]
 800797e:	f847 5c04 	str.w	r5, [r7, #-4]
 8007982:	46b1      	mov	r9, r6
 8007984:	4634      	mov	r4, r6
 8007986:	9502      	str	r5, [sp, #8]
 8007988:	46ab      	mov	fp, r5
 800798a:	784a      	ldrb	r2, [r1, #1]
 800798c:	1c4b      	adds	r3, r1, #1
 800798e:	9303      	str	r3, [sp, #12]
 8007990:	b342      	cbz	r2, 80079e4 <__hexnan+0x88>
 8007992:	4610      	mov	r0, r2
 8007994:	9105      	str	r1, [sp, #20]
 8007996:	9204      	str	r2, [sp, #16]
 8007998:	f7ff fd84 	bl	80074a4 <__hexdig_fun>
 800799c:	2800      	cmp	r0, #0
 800799e:	d143      	bne.n	8007a28 <__hexnan+0xcc>
 80079a0:	9a04      	ldr	r2, [sp, #16]
 80079a2:	9905      	ldr	r1, [sp, #20]
 80079a4:	2a20      	cmp	r2, #32
 80079a6:	d818      	bhi.n	80079da <__hexnan+0x7e>
 80079a8:	9b02      	ldr	r3, [sp, #8]
 80079aa:	459b      	cmp	fp, r3
 80079ac:	dd13      	ble.n	80079d6 <__hexnan+0x7a>
 80079ae:	454c      	cmp	r4, r9
 80079b0:	d206      	bcs.n	80079c0 <__hexnan+0x64>
 80079b2:	2d07      	cmp	r5, #7
 80079b4:	dc04      	bgt.n	80079c0 <__hexnan+0x64>
 80079b6:	462a      	mov	r2, r5
 80079b8:	4649      	mov	r1, r9
 80079ba:	4620      	mov	r0, r4
 80079bc:	f7ff ffa8 	bl	8007910 <L_shift>
 80079c0:	4544      	cmp	r4, r8
 80079c2:	d944      	bls.n	8007a4e <__hexnan+0xf2>
 80079c4:	2300      	movs	r3, #0
 80079c6:	f1a4 0904 	sub.w	r9, r4, #4
 80079ca:	f844 3c04 	str.w	r3, [r4, #-4]
 80079ce:	f8cd b008 	str.w	fp, [sp, #8]
 80079d2:	464c      	mov	r4, r9
 80079d4:	461d      	mov	r5, r3
 80079d6:	9903      	ldr	r1, [sp, #12]
 80079d8:	e7d7      	b.n	800798a <__hexnan+0x2e>
 80079da:	2a29      	cmp	r2, #41	; 0x29
 80079dc:	d14a      	bne.n	8007a74 <__hexnan+0x118>
 80079de:	3102      	adds	r1, #2
 80079e0:	f8ca 1000 	str.w	r1, [sl]
 80079e4:	f1bb 0f00 	cmp.w	fp, #0
 80079e8:	d044      	beq.n	8007a74 <__hexnan+0x118>
 80079ea:	454c      	cmp	r4, r9
 80079ec:	d206      	bcs.n	80079fc <__hexnan+0xa0>
 80079ee:	2d07      	cmp	r5, #7
 80079f0:	dc04      	bgt.n	80079fc <__hexnan+0xa0>
 80079f2:	462a      	mov	r2, r5
 80079f4:	4649      	mov	r1, r9
 80079f6:	4620      	mov	r0, r4
 80079f8:	f7ff ff8a 	bl	8007910 <L_shift>
 80079fc:	4544      	cmp	r4, r8
 80079fe:	d928      	bls.n	8007a52 <__hexnan+0xf6>
 8007a00:	4643      	mov	r3, r8
 8007a02:	f854 2b04 	ldr.w	r2, [r4], #4
 8007a06:	f843 2b04 	str.w	r2, [r3], #4
 8007a0a:	42a6      	cmp	r6, r4
 8007a0c:	d2f9      	bcs.n	8007a02 <__hexnan+0xa6>
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f843 2b04 	str.w	r2, [r3], #4
 8007a14:	429e      	cmp	r6, r3
 8007a16:	d2fb      	bcs.n	8007a10 <__hexnan+0xb4>
 8007a18:	6833      	ldr	r3, [r6, #0]
 8007a1a:	b91b      	cbnz	r3, 8007a24 <__hexnan+0xc8>
 8007a1c:	4546      	cmp	r6, r8
 8007a1e:	d127      	bne.n	8007a70 <__hexnan+0x114>
 8007a20:	2301      	movs	r3, #1
 8007a22:	6033      	str	r3, [r6, #0]
 8007a24:	2005      	movs	r0, #5
 8007a26:	e026      	b.n	8007a76 <__hexnan+0x11a>
 8007a28:	3501      	adds	r5, #1
 8007a2a:	2d08      	cmp	r5, #8
 8007a2c:	f10b 0b01 	add.w	fp, fp, #1
 8007a30:	dd06      	ble.n	8007a40 <__hexnan+0xe4>
 8007a32:	4544      	cmp	r4, r8
 8007a34:	d9cf      	bls.n	80079d6 <__hexnan+0x7a>
 8007a36:	2300      	movs	r3, #0
 8007a38:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a3c:	2501      	movs	r5, #1
 8007a3e:	3c04      	subs	r4, #4
 8007a40:	6822      	ldr	r2, [r4, #0]
 8007a42:	f000 000f 	and.w	r0, r0, #15
 8007a46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a4a:	6020      	str	r0, [r4, #0]
 8007a4c:	e7c3      	b.n	80079d6 <__hexnan+0x7a>
 8007a4e:	2508      	movs	r5, #8
 8007a50:	e7c1      	b.n	80079d6 <__hexnan+0x7a>
 8007a52:	9b01      	ldr	r3, [sp, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0df      	beq.n	8007a18 <__hexnan+0xbc>
 8007a58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a5c:	f1c3 0320 	rsb	r3, r3, #32
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
 8007a64:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8007a68:	401a      	ands	r2, r3
 8007a6a:	f847 2c04 	str.w	r2, [r7, #-4]
 8007a6e:	e7d3      	b.n	8007a18 <__hexnan+0xbc>
 8007a70:	3e04      	subs	r6, #4
 8007a72:	e7d1      	b.n	8007a18 <__hexnan+0xbc>
 8007a74:	2004      	movs	r0, #4
 8007a76:	b007      	add	sp, #28
 8007a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a7c <__locale_ctype_ptr_l>:
 8007a7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007a80:	4770      	bx	lr

08007a82 <__localeconv_l>:
 8007a82:	30f0      	adds	r0, #240	; 0xf0
 8007a84:	4770      	bx	lr
	...

08007a88 <_localeconv_r>:
 8007a88:	4b04      	ldr	r3, [pc, #16]	; (8007a9c <_localeconv_r+0x14>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6a18      	ldr	r0, [r3, #32]
 8007a8e:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <_localeconv_r+0x18>)
 8007a90:	2800      	cmp	r0, #0
 8007a92:	bf08      	it	eq
 8007a94:	4618      	moveq	r0, r3
 8007a96:	30f0      	adds	r0, #240	; 0xf0
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	20000010 	.word	0x20000010
 8007aa0:	20000074 	.word	0x20000074

08007aa4 <malloc>:
 8007aa4:	4b02      	ldr	r3, [pc, #8]	; (8007ab0 <malloc+0xc>)
 8007aa6:	4601      	mov	r1, r0
 8007aa8:	6818      	ldr	r0, [r3, #0]
 8007aaa:	f000 bc7b 	b.w	80083a4 <_malloc_r>
 8007aae:	bf00      	nop
 8007ab0:	20000010 	.word	0x20000010

08007ab4 <__ascii_mbtowc>:
 8007ab4:	b082      	sub	sp, #8
 8007ab6:	b901      	cbnz	r1, 8007aba <__ascii_mbtowc+0x6>
 8007ab8:	a901      	add	r1, sp, #4
 8007aba:	b142      	cbz	r2, 8007ace <__ascii_mbtowc+0x1a>
 8007abc:	b14b      	cbz	r3, 8007ad2 <__ascii_mbtowc+0x1e>
 8007abe:	7813      	ldrb	r3, [r2, #0]
 8007ac0:	600b      	str	r3, [r1, #0]
 8007ac2:	7812      	ldrb	r2, [r2, #0]
 8007ac4:	1c10      	adds	r0, r2, #0
 8007ac6:	bf18      	it	ne
 8007ac8:	2001      	movne	r0, #1
 8007aca:	b002      	add	sp, #8
 8007acc:	4770      	bx	lr
 8007ace:	4610      	mov	r0, r2
 8007ad0:	e7fb      	b.n	8007aca <__ascii_mbtowc+0x16>
 8007ad2:	f06f 0001 	mvn.w	r0, #1
 8007ad6:	e7f8      	b.n	8007aca <__ascii_mbtowc+0x16>

08007ad8 <memcpy>:
 8007ad8:	b510      	push	{r4, lr}
 8007ada:	1e43      	subs	r3, r0, #1
 8007adc:	440a      	add	r2, r1
 8007ade:	4291      	cmp	r1, r2
 8007ae0:	d100      	bne.n	8007ae4 <memcpy+0xc>
 8007ae2:	bd10      	pop	{r4, pc}
 8007ae4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ae8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007aec:	e7f7      	b.n	8007ade <memcpy+0x6>

08007aee <_Balloc>:
 8007aee:	b570      	push	{r4, r5, r6, lr}
 8007af0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007af2:	4604      	mov	r4, r0
 8007af4:	460e      	mov	r6, r1
 8007af6:	b93d      	cbnz	r5, 8007b08 <_Balloc+0x1a>
 8007af8:	2010      	movs	r0, #16
 8007afa:	f7ff ffd3 	bl	8007aa4 <malloc>
 8007afe:	6260      	str	r0, [r4, #36]	; 0x24
 8007b00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b04:	6005      	str	r5, [r0, #0]
 8007b06:	60c5      	str	r5, [r0, #12]
 8007b08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007b0a:	68eb      	ldr	r3, [r5, #12]
 8007b0c:	b183      	cbz	r3, 8007b30 <_Balloc+0x42>
 8007b0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b10:	68db      	ldr	r3, [r3, #12]
 8007b12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007b16:	b9b8      	cbnz	r0, 8007b48 <_Balloc+0x5a>
 8007b18:	2101      	movs	r1, #1
 8007b1a:	fa01 f506 	lsl.w	r5, r1, r6
 8007b1e:	1d6a      	adds	r2, r5, #5
 8007b20:	0092      	lsls	r2, r2, #2
 8007b22:	4620      	mov	r0, r4
 8007b24:	f000 fbe2 	bl	80082ec <_calloc_r>
 8007b28:	b160      	cbz	r0, 8007b44 <_Balloc+0x56>
 8007b2a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007b2e:	e00e      	b.n	8007b4e <_Balloc+0x60>
 8007b30:	2221      	movs	r2, #33	; 0x21
 8007b32:	2104      	movs	r1, #4
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fbd9 	bl	80082ec <_calloc_r>
 8007b3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b3c:	60e8      	str	r0, [r5, #12]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1e4      	bne.n	8007b0e <_Balloc+0x20>
 8007b44:	2000      	movs	r0, #0
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	6802      	ldr	r2, [r0, #0]
 8007b4a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b54:	e7f7      	b.n	8007b46 <_Balloc+0x58>

08007b56 <_Bfree>:
 8007b56:	b570      	push	{r4, r5, r6, lr}
 8007b58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	460d      	mov	r5, r1
 8007b5e:	b93c      	cbnz	r4, 8007b70 <_Bfree+0x1a>
 8007b60:	2010      	movs	r0, #16
 8007b62:	f7ff ff9f 	bl	8007aa4 <malloc>
 8007b66:	6270      	str	r0, [r6, #36]	; 0x24
 8007b68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b6c:	6004      	str	r4, [r0, #0]
 8007b6e:	60c4      	str	r4, [r0, #12]
 8007b70:	b13d      	cbz	r5, 8007b82 <_Bfree+0x2c>
 8007b72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007b74:	686a      	ldr	r2, [r5, #4]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b7c:	6029      	str	r1, [r5, #0]
 8007b7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007b82:	bd70      	pop	{r4, r5, r6, pc}

08007b84 <__multadd>:
 8007b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b88:	690d      	ldr	r5, [r1, #16]
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	4606      	mov	r6, r0
 8007b8e:	460c      	mov	r4, r1
 8007b90:	f101 0c14 	add.w	ip, r1, #20
 8007b94:	2300      	movs	r3, #0
 8007b96:	f8dc 0000 	ldr.w	r0, [ip]
 8007b9a:	b281      	uxth	r1, r0
 8007b9c:	fb02 7101 	mla	r1, r2, r1, r7
 8007ba0:	0c0f      	lsrs	r7, r1, #16
 8007ba2:	0c00      	lsrs	r0, r0, #16
 8007ba4:	fb02 7000 	mla	r0, r2, r0, r7
 8007ba8:	b289      	uxth	r1, r1
 8007baa:	3301      	adds	r3, #1
 8007bac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007bb0:	429d      	cmp	r5, r3
 8007bb2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007bb6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bba:	dcec      	bgt.n	8007b96 <__multadd+0x12>
 8007bbc:	b1d7      	cbz	r7, 8007bf4 <__multadd+0x70>
 8007bbe:	68a3      	ldr	r3, [r4, #8]
 8007bc0:	42ab      	cmp	r3, r5
 8007bc2:	dc12      	bgt.n	8007bea <__multadd+0x66>
 8007bc4:	6861      	ldr	r1, [r4, #4]
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	3101      	adds	r1, #1
 8007bca:	f7ff ff90 	bl	8007aee <_Balloc>
 8007bce:	6922      	ldr	r2, [r4, #16]
 8007bd0:	3202      	adds	r2, #2
 8007bd2:	f104 010c 	add.w	r1, r4, #12
 8007bd6:	4680      	mov	r8, r0
 8007bd8:	0092      	lsls	r2, r2, #2
 8007bda:	300c      	adds	r0, #12
 8007bdc:	f7ff ff7c 	bl	8007ad8 <memcpy>
 8007be0:	4621      	mov	r1, r4
 8007be2:	4630      	mov	r0, r6
 8007be4:	f7ff ffb7 	bl	8007b56 <_Bfree>
 8007be8:	4644      	mov	r4, r8
 8007bea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007bee:	3501      	adds	r5, #1
 8007bf0:	615f      	str	r7, [r3, #20]
 8007bf2:	6125      	str	r5, [r4, #16]
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007bfa <__s2b>:
 8007bfa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bfe:	460c      	mov	r4, r1
 8007c00:	4615      	mov	r5, r2
 8007c02:	461f      	mov	r7, r3
 8007c04:	2209      	movs	r2, #9
 8007c06:	3308      	adds	r3, #8
 8007c08:	4606      	mov	r6, r0
 8007c0a:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2201      	movs	r2, #1
 8007c12:	429a      	cmp	r2, r3
 8007c14:	db20      	blt.n	8007c58 <__s2b+0x5e>
 8007c16:	4630      	mov	r0, r6
 8007c18:	f7ff ff69 	bl	8007aee <_Balloc>
 8007c1c:	9b08      	ldr	r3, [sp, #32]
 8007c1e:	6143      	str	r3, [r0, #20]
 8007c20:	2d09      	cmp	r5, #9
 8007c22:	f04f 0301 	mov.w	r3, #1
 8007c26:	6103      	str	r3, [r0, #16]
 8007c28:	dd19      	ble.n	8007c5e <__s2b+0x64>
 8007c2a:	f104 0809 	add.w	r8, r4, #9
 8007c2e:	46c1      	mov	r9, r8
 8007c30:	442c      	add	r4, r5
 8007c32:	f819 3b01 	ldrb.w	r3, [r9], #1
 8007c36:	4601      	mov	r1, r0
 8007c38:	3b30      	subs	r3, #48	; 0x30
 8007c3a:	220a      	movs	r2, #10
 8007c3c:	4630      	mov	r0, r6
 8007c3e:	f7ff ffa1 	bl	8007b84 <__multadd>
 8007c42:	45a1      	cmp	r9, r4
 8007c44:	d1f5      	bne.n	8007c32 <__s2b+0x38>
 8007c46:	eb08 0405 	add.w	r4, r8, r5
 8007c4a:	3c08      	subs	r4, #8
 8007c4c:	1b2d      	subs	r5, r5, r4
 8007c4e:	1963      	adds	r3, r4, r5
 8007c50:	42bb      	cmp	r3, r7
 8007c52:	db07      	blt.n	8007c64 <__s2b+0x6a>
 8007c54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c58:	0052      	lsls	r2, r2, #1
 8007c5a:	3101      	adds	r1, #1
 8007c5c:	e7d9      	b.n	8007c12 <__s2b+0x18>
 8007c5e:	340a      	adds	r4, #10
 8007c60:	2509      	movs	r5, #9
 8007c62:	e7f3      	b.n	8007c4c <__s2b+0x52>
 8007c64:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c68:	4601      	mov	r1, r0
 8007c6a:	3b30      	subs	r3, #48	; 0x30
 8007c6c:	220a      	movs	r2, #10
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff ff88 	bl	8007b84 <__multadd>
 8007c74:	e7eb      	b.n	8007c4e <__s2b+0x54>

08007c76 <__hi0bits>:
 8007c76:	0c02      	lsrs	r2, r0, #16
 8007c78:	0412      	lsls	r2, r2, #16
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	b9b2      	cbnz	r2, 8007cac <__hi0bits+0x36>
 8007c7e:	0403      	lsls	r3, r0, #16
 8007c80:	2010      	movs	r0, #16
 8007c82:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007c86:	bf04      	itt	eq
 8007c88:	021b      	lsleq	r3, r3, #8
 8007c8a:	3008      	addeq	r0, #8
 8007c8c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007c90:	bf04      	itt	eq
 8007c92:	011b      	lsleq	r3, r3, #4
 8007c94:	3004      	addeq	r0, #4
 8007c96:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007c9a:	bf04      	itt	eq
 8007c9c:	009b      	lsleq	r3, r3, #2
 8007c9e:	3002      	addeq	r0, #2
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db06      	blt.n	8007cb2 <__hi0bits+0x3c>
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	d503      	bpl.n	8007cb0 <__hi0bits+0x3a>
 8007ca8:	3001      	adds	r0, #1
 8007caa:	4770      	bx	lr
 8007cac:	2000      	movs	r0, #0
 8007cae:	e7e8      	b.n	8007c82 <__hi0bits+0xc>
 8007cb0:	2020      	movs	r0, #32
 8007cb2:	4770      	bx	lr

08007cb4 <__lo0bits>:
 8007cb4:	6803      	ldr	r3, [r0, #0]
 8007cb6:	f013 0207 	ands.w	r2, r3, #7
 8007cba:	4601      	mov	r1, r0
 8007cbc:	d00b      	beq.n	8007cd6 <__lo0bits+0x22>
 8007cbe:	07da      	lsls	r2, r3, #31
 8007cc0:	d423      	bmi.n	8007d0a <__lo0bits+0x56>
 8007cc2:	0798      	lsls	r0, r3, #30
 8007cc4:	bf49      	itett	mi
 8007cc6:	085b      	lsrmi	r3, r3, #1
 8007cc8:	089b      	lsrpl	r3, r3, #2
 8007cca:	2001      	movmi	r0, #1
 8007ccc:	600b      	strmi	r3, [r1, #0]
 8007cce:	bf5c      	itt	pl
 8007cd0:	600b      	strpl	r3, [r1, #0]
 8007cd2:	2002      	movpl	r0, #2
 8007cd4:	4770      	bx	lr
 8007cd6:	b298      	uxth	r0, r3
 8007cd8:	b9a8      	cbnz	r0, 8007d06 <__lo0bits+0x52>
 8007cda:	0c1b      	lsrs	r3, r3, #16
 8007cdc:	2010      	movs	r0, #16
 8007cde:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ce2:	bf04      	itt	eq
 8007ce4:	0a1b      	lsreq	r3, r3, #8
 8007ce6:	3008      	addeq	r0, #8
 8007ce8:	071a      	lsls	r2, r3, #28
 8007cea:	bf04      	itt	eq
 8007cec:	091b      	lsreq	r3, r3, #4
 8007cee:	3004      	addeq	r0, #4
 8007cf0:	079a      	lsls	r2, r3, #30
 8007cf2:	bf04      	itt	eq
 8007cf4:	089b      	lsreq	r3, r3, #2
 8007cf6:	3002      	addeq	r0, #2
 8007cf8:	07da      	lsls	r2, r3, #31
 8007cfa:	d402      	bmi.n	8007d02 <__lo0bits+0x4e>
 8007cfc:	085b      	lsrs	r3, r3, #1
 8007cfe:	d006      	beq.n	8007d0e <__lo0bits+0x5a>
 8007d00:	3001      	adds	r0, #1
 8007d02:	600b      	str	r3, [r1, #0]
 8007d04:	4770      	bx	lr
 8007d06:	4610      	mov	r0, r2
 8007d08:	e7e9      	b.n	8007cde <__lo0bits+0x2a>
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	4770      	bx	lr
 8007d0e:	2020      	movs	r0, #32
 8007d10:	4770      	bx	lr

08007d12 <__i2b>:
 8007d12:	b510      	push	{r4, lr}
 8007d14:	460c      	mov	r4, r1
 8007d16:	2101      	movs	r1, #1
 8007d18:	f7ff fee9 	bl	8007aee <_Balloc>
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	6144      	str	r4, [r0, #20]
 8007d20:	6102      	str	r2, [r0, #16]
 8007d22:	bd10      	pop	{r4, pc}

08007d24 <__multiply>:
 8007d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d28:	4614      	mov	r4, r2
 8007d2a:	690a      	ldr	r2, [r1, #16]
 8007d2c:	6923      	ldr	r3, [r4, #16]
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	bfb8      	it	lt
 8007d32:	460b      	movlt	r3, r1
 8007d34:	4688      	mov	r8, r1
 8007d36:	bfbc      	itt	lt
 8007d38:	46a0      	movlt	r8, r4
 8007d3a:	461c      	movlt	r4, r3
 8007d3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007d40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007d44:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007d48:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007d4c:	eb07 0609 	add.w	r6, r7, r9
 8007d50:	42b3      	cmp	r3, r6
 8007d52:	bfb8      	it	lt
 8007d54:	3101      	addlt	r1, #1
 8007d56:	f7ff feca 	bl	8007aee <_Balloc>
 8007d5a:	f100 0514 	add.w	r5, r0, #20
 8007d5e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007d62:	462b      	mov	r3, r5
 8007d64:	2200      	movs	r2, #0
 8007d66:	4573      	cmp	r3, lr
 8007d68:	d316      	bcc.n	8007d98 <__multiply+0x74>
 8007d6a:	f104 0214 	add.w	r2, r4, #20
 8007d6e:	f108 0114 	add.w	r1, r8, #20
 8007d72:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007d76:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007d7a:	9300      	str	r3, [sp, #0]
 8007d7c:	9b00      	ldr	r3, [sp, #0]
 8007d7e:	9201      	str	r2, [sp, #4]
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d80c      	bhi.n	8007d9e <__multiply+0x7a>
 8007d84:	2e00      	cmp	r6, #0
 8007d86:	dd03      	ble.n	8007d90 <__multiply+0x6c>
 8007d88:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d05d      	beq.n	8007e4c <__multiply+0x128>
 8007d90:	6106      	str	r6, [r0, #16]
 8007d92:	b003      	add	sp, #12
 8007d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d98:	f843 2b04 	str.w	r2, [r3], #4
 8007d9c:	e7e3      	b.n	8007d66 <__multiply+0x42>
 8007d9e:	f8b2 b000 	ldrh.w	fp, [r2]
 8007da2:	f1bb 0f00 	cmp.w	fp, #0
 8007da6:	d023      	beq.n	8007df0 <__multiply+0xcc>
 8007da8:	4689      	mov	r9, r1
 8007daa:	46ac      	mov	ip, r5
 8007dac:	f04f 0800 	mov.w	r8, #0
 8007db0:	f859 4b04 	ldr.w	r4, [r9], #4
 8007db4:	f8dc a000 	ldr.w	sl, [ip]
 8007db8:	b2a3      	uxth	r3, r4
 8007dba:	fa1f fa8a 	uxth.w	sl, sl
 8007dbe:	fb0b a303 	mla	r3, fp, r3, sl
 8007dc2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007dc6:	f8dc 4000 	ldr.w	r4, [ip]
 8007dca:	4443      	add	r3, r8
 8007dcc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007dd0:	fb0b 840a 	mla	r4, fp, sl, r8
 8007dd4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007dd8:	46e2      	mov	sl, ip
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007de0:	454f      	cmp	r7, r9
 8007de2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007de6:	f84a 3b04 	str.w	r3, [sl], #4
 8007dea:	d82b      	bhi.n	8007e44 <__multiply+0x120>
 8007dec:	f8cc 8004 	str.w	r8, [ip, #4]
 8007df0:	9b01      	ldr	r3, [sp, #4]
 8007df2:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007df6:	3204      	adds	r2, #4
 8007df8:	f1ba 0f00 	cmp.w	sl, #0
 8007dfc:	d020      	beq.n	8007e40 <__multiply+0x11c>
 8007dfe:	682b      	ldr	r3, [r5, #0]
 8007e00:	4689      	mov	r9, r1
 8007e02:	46a8      	mov	r8, r5
 8007e04:	f04f 0b00 	mov.w	fp, #0
 8007e08:	f8b9 c000 	ldrh.w	ip, [r9]
 8007e0c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007e10:	fb0a 440c 	mla	r4, sl, ip, r4
 8007e14:	445c      	add	r4, fp
 8007e16:	46c4      	mov	ip, r8
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007e1e:	f84c 3b04 	str.w	r3, [ip], #4
 8007e22:	f859 3b04 	ldr.w	r3, [r9], #4
 8007e26:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007e2a:	0c1b      	lsrs	r3, r3, #16
 8007e2c:	fb0a b303 	mla	r3, sl, r3, fp
 8007e30:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007e34:	454f      	cmp	r7, r9
 8007e36:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007e3a:	d805      	bhi.n	8007e48 <__multiply+0x124>
 8007e3c:	f8c8 3004 	str.w	r3, [r8, #4]
 8007e40:	3504      	adds	r5, #4
 8007e42:	e79b      	b.n	8007d7c <__multiply+0x58>
 8007e44:	46d4      	mov	ip, sl
 8007e46:	e7b3      	b.n	8007db0 <__multiply+0x8c>
 8007e48:	46e0      	mov	r8, ip
 8007e4a:	e7dd      	b.n	8007e08 <__multiply+0xe4>
 8007e4c:	3e01      	subs	r6, #1
 8007e4e:	e799      	b.n	8007d84 <__multiply+0x60>

08007e50 <__pow5mult>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	4615      	mov	r5, r2
 8007e56:	f012 0203 	ands.w	r2, r2, #3
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	d007      	beq.n	8007e70 <__pow5mult+0x20>
 8007e60:	3a01      	subs	r2, #1
 8007e62:	4c21      	ldr	r4, [pc, #132]	; (8007ee8 <__pow5mult+0x98>)
 8007e64:	2300      	movs	r3, #0
 8007e66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e6a:	f7ff fe8b 	bl	8007b84 <__multadd>
 8007e6e:	4607      	mov	r7, r0
 8007e70:	10ad      	asrs	r5, r5, #2
 8007e72:	d035      	beq.n	8007ee0 <__pow5mult+0x90>
 8007e74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007e76:	b93c      	cbnz	r4, 8007e88 <__pow5mult+0x38>
 8007e78:	2010      	movs	r0, #16
 8007e7a:	f7ff fe13 	bl	8007aa4 <malloc>
 8007e7e:	6270      	str	r0, [r6, #36]	; 0x24
 8007e80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e84:	6004      	str	r4, [r0, #0]
 8007e86:	60c4      	str	r4, [r0, #12]
 8007e88:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e90:	b94c      	cbnz	r4, 8007ea6 <__pow5mult+0x56>
 8007e92:	f240 2171 	movw	r1, #625	; 0x271
 8007e96:	4630      	mov	r0, r6
 8007e98:	f7ff ff3b 	bl	8007d12 <__i2b>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007ea2:	4604      	mov	r4, r0
 8007ea4:	6003      	str	r3, [r0, #0]
 8007ea6:	f04f 0800 	mov.w	r8, #0
 8007eaa:	07eb      	lsls	r3, r5, #31
 8007eac:	d50a      	bpl.n	8007ec4 <__pow5mult+0x74>
 8007eae:	4639      	mov	r1, r7
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4630      	mov	r0, r6
 8007eb4:	f7ff ff36 	bl	8007d24 <__multiply>
 8007eb8:	4639      	mov	r1, r7
 8007eba:	4681      	mov	r9, r0
 8007ebc:	4630      	mov	r0, r6
 8007ebe:	f7ff fe4a 	bl	8007b56 <_Bfree>
 8007ec2:	464f      	mov	r7, r9
 8007ec4:	106d      	asrs	r5, r5, #1
 8007ec6:	d00b      	beq.n	8007ee0 <__pow5mult+0x90>
 8007ec8:	6820      	ldr	r0, [r4, #0]
 8007eca:	b938      	cbnz	r0, 8007edc <__pow5mult+0x8c>
 8007ecc:	4622      	mov	r2, r4
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4630      	mov	r0, r6
 8007ed2:	f7ff ff27 	bl	8007d24 <__multiply>
 8007ed6:	6020      	str	r0, [r4, #0]
 8007ed8:	f8c0 8000 	str.w	r8, [r0]
 8007edc:	4604      	mov	r4, r0
 8007ede:	e7e4      	b.n	8007eaa <__pow5mult+0x5a>
 8007ee0:	4638      	mov	r0, r7
 8007ee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ee6:	bf00      	nop
 8007ee8:	08008c00 	.word	0x08008c00

08007eec <__lshift>:
 8007eec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007ef6:	6923      	ldr	r3, [r4, #16]
 8007ef8:	6849      	ldr	r1, [r1, #4]
 8007efa:	eb0a 0903 	add.w	r9, sl, r3
 8007efe:	68a3      	ldr	r3, [r4, #8]
 8007f00:	4607      	mov	r7, r0
 8007f02:	4616      	mov	r6, r2
 8007f04:	f109 0501 	add.w	r5, r9, #1
 8007f08:	42ab      	cmp	r3, r5
 8007f0a:	db32      	blt.n	8007f72 <__lshift+0x86>
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff fdee 	bl	8007aee <_Balloc>
 8007f12:	2300      	movs	r3, #0
 8007f14:	4680      	mov	r8, r0
 8007f16:	f100 0114 	add.w	r1, r0, #20
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	4553      	cmp	r3, sl
 8007f1e:	db2b      	blt.n	8007f78 <__lshift+0x8c>
 8007f20:	6920      	ldr	r0, [r4, #16]
 8007f22:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f26:	f104 0314 	add.w	r3, r4, #20
 8007f2a:	f016 021f 	ands.w	r2, r6, #31
 8007f2e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f32:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f36:	d025      	beq.n	8007f84 <__lshift+0x98>
 8007f38:	f1c2 0e20 	rsb	lr, r2, #32
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	681e      	ldr	r6, [r3, #0]
 8007f40:	468a      	mov	sl, r1
 8007f42:	4096      	lsls	r6, r2
 8007f44:	4330      	orrs	r0, r6
 8007f46:	f84a 0b04 	str.w	r0, [sl], #4
 8007f4a:	f853 0b04 	ldr.w	r0, [r3], #4
 8007f4e:	459c      	cmp	ip, r3
 8007f50:	fa20 f00e 	lsr.w	r0, r0, lr
 8007f54:	d814      	bhi.n	8007f80 <__lshift+0x94>
 8007f56:	6048      	str	r0, [r1, #4]
 8007f58:	b108      	cbz	r0, 8007f5e <__lshift+0x72>
 8007f5a:	f109 0502 	add.w	r5, r9, #2
 8007f5e:	3d01      	subs	r5, #1
 8007f60:	4638      	mov	r0, r7
 8007f62:	f8c8 5010 	str.w	r5, [r8, #16]
 8007f66:	4621      	mov	r1, r4
 8007f68:	f7ff fdf5 	bl	8007b56 <_Bfree>
 8007f6c:	4640      	mov	r0, r8
 8007f6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f72:	3101      	adds	r1, #1
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	e7c7      	b.n	8007f08 <__lshift+0x1c>
 8007f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	e7cd      	b.n	8007f1c <__lshift+0x30>
 8007f80:	4651      	mov	r1, sl
 8007f82:	e7dc      	b.n	8007f3e <__lshift+0x52>
 8007f84:	3904      	subs	r1, #4
 8007f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f8e:	459c      	cmp	ip, r3
 8007f90:	d8f9      	bhi.n	8007f86 <__lshift+0x9a>
 8007f92:	e7e4      	b.n	8007f5e <__lshift+0x72>

08007f94 <__mcmp>:
 8007f94:	6903      	ldr	r3, [r0, #16]
 8007f96:	690a      	ldr	r2, [r1, #16]
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	b530      	push	{r4, r5, lr}
 8007f9c:	d10c      	bne.n	8007fb8 <__mcmp+0x24>
 8007f9e:	0092      	lsls	r2, r2, #2
 8007fa0:	3014      	adds	r0, #20
 8007fa2:	3114      	adds	r1, #20
 8007fa4:	1884      	adds	r4, r0, r2
 8007fa6:	4411      	add	r1, r2
 8007fa8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007fac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007fb0:	4295      	cmp	r5, r2
 8007fb2:	d003      	beq.n	8007fbc <__mcmp+0x28>
 8007fb4:	d305      	bcc.n	8007fc2 <__mcmp+0x2e>
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd30      	pop	{r4, r5, pc}
 8007fbc:	42a0      	cmp	r0, r4
 8007fbe:	d3f3      	bcc.n	8007fa8 <__mcmp+0x14>
 8007fc0:	e7fa      	b.n	8007fb8 <__mcmp+0x24>
 8007fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007fc6:	e7f7      	b.n	8007fb8 <__mcmp+0x24>

08007fc8 <__mdiff>:
 8007fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fcc:	460d      	mov	r5, r1
 8007fce:	4607      	mov	r7, r0
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	4614      	mov	r4, r2
 8007fd6:	f7ff ffdd 	bl	8007f94 <__mcmp>
 8007fda:	1e06      	subs	r6, r0, #0
 8007fdc:	d108      	bne.n	8007ff0 <__mdiff+0x28>
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f7ff fd84 	bl	8007aee <_Balloc>
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ff0:	bfa4      	itt	ge
 8007ff2:	4623      	movge	r3, r4
 8007ff4:	462c      	movge	r4, r5
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	6861      	ldr	r1, [r4, #4]
 8007ffa:	bfa6      	itte	ge
 8007ffc:	461d      	movge	r5, r3
 8007ffe:	2600      	movge	r6, #0
 8008000:	2601      	movlt	r6, #1
 8008002:	f7ff fd74 	bl	8007aee <_Balloc>
 8008006:	692b      	ldr	r3, [r5, #16]
 8008008:	60c6      	str	r6, [r0, #12]
 800800a:	6926      	ldr	r6, [r4, #16]
 800800c:	f105 0914 	add.w	r9, r5, #20
 8008010:	f104 0214 	add.w	r2, r4, #20
 8008014:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008018:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800801c:	f100 0514 	add.w	r5, r0, #20
 8008020:	f04f 0e00 	mov.w	lr, #0
 8008024:	f852 ab04 	ldr.w	sl, [r2], #4
 8008028:	f859 4b04 	ldr.w	r4, [r9], #4
 800802c:	fa1e f18a 	uxtah	r1, lr, sl
 8008030:	b2a3      	uxth	r3, r4
 8008032:	1ac9      	subs	r1, r1, r3
 8008034:	0c23      	lsrs	r3, r4, #16
 8008036:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800803a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800803e:	b289      	uxth	r1, r1
 8008040:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008044:	45c8      	cmp	r8, r9
 8008046:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800804a:	4694      	mov	ip, r2
 800804c:	f845 3b04 	str.w	r3, [r5], #4
 8008050:	d8e8      	bhi.n	8008024 <__mdiff+0x5c>
 8008052:	45bc      	cmp	ip, r7
 8008054:	d304      	bcc.n	8008060 <__mdiff+0x98>
 8008056:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800805a:	b183      	cbz	r3, 800807e <__mdiff+0xb6>
 800805c:	6106      	str	r6, [r0, #16]
 800805e:	e7c5      	b.n	8007fec <__mdiff+0x24>
 8008060:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008064:	fa1e f381 	uxtah	r3, lr, r1
 8008068:	141a      	asrs	r2, r3, #16
 800806a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800806e:	b29b      	uxth	r3, r3
 8008070:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008074:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008078:	f845 3b04 	str.w	r3, [r5], #4
 800807c:	e7e9      	b.n	8008052 <__mdiff+0x8a>
 800807e:	3e01      	subs	r6, #1
 8008080:	e7e9      	b.n	8008056 <__mdiff+0x8e>
	...

08008084 <__ulp>:
 8008084:	4b12      	ldr	r3, [pc, #72]	; (80080d0 <__ulp+0x4c>)
 8008086:	ee10 2a90 	vmov	r2, s1
 800808a:	401a      	ands	r2, r3
 800808c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008090:	2b00      	cmp	r3, #0
 8008092:	dd04      	ble.n	800809e <__ulp+0x1a>
 8008094:	2000      	movs	r0, #0
 8008096:	4619      	mov	r1, r3
 8008098:	ec41 0b10 	vmov	d0, r0, r1
 800809c:	4770      	bx	lr
 800809e:	425b      	negs	r3, r3
 80080a0:	151b      	asrs	r3, r3, #20
 80080a2:	2b13      	cmp	r3, #19
 80080a4:	f04f 0000 	mov.w	r0, #0
 80080a8:	f04f 0100 	mov.w	r1, #0
 80080ac:	dc04      	bgt.n	80080b8 <__ulp+0x34>
 80080ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80080b2:	fa42 f103 	asr.w	r1, r2, r3
 80080b6:	e7ef      	b.n	8008098 <__ulp+0x14>
 80080b8:	3b14      	subs	r3, #20
 80080ba:	2b1e      	cmp	r3, #30
 80080bc:	f04f 0201 	mov.w	r2, #1
 80080c0:	bfda      	itte	le
 80080c2:	f1c3 031f 	rsble	r3, r3, #31
 80080c6:	fa02 f303 	lslle.w	r3, r2, r3
 80080ca:	4613      	movgt	r3, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	e7e3      	b.n	8008098 <__ulp+0x14>
 80080d0:	7ff00000 	.word	0x7ff00000

080080d4 <__b2d>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	6905      	ldr	r5, [r0, #16]
 80080d8:	f100 0714 	add.w	r7, r0, #20
 80080dc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80080e0:	1f2e      	subs	r6, r5, #4
 80080e2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80080e6:	4620      	mov	r0, r4
 80080e8:	f7ff fdc5 	bl	8007c76 <__hi0bits>
 80080ec:	f1c0 0320 	rsb	r3, r0, #32
 80080f0:	280a      	cmp	r0, #10
 80080f2:	600b      	str	r3, [r1, #0]
 80080f4:	f8df c074 	ldr.w	ip, [pc, #116]	; 800816c <__b2d+0x98>
 80080f8:	dc14      	bgt.n	8008124 <__b2d+0x50>
 80080fa:	f1c0 0e0b 	rsb	lr, r0, #11
 80080fe:	fa24 f10e 	lsr.w	r1, r4, lr
 8008102:	42b7      	cmp	r7, r6
 8008104:	ea41 030c 	orr.w	r3, r1, ip
 8008108:	bf34      	ite	cc
 800810a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800810e:	2100      	movcs	r1, #0
 8008110:	3015      	adds	r0, #21
 8008112:	fa04 f000 	lsl.w	r0, r4, r0
 8008116:	fa21 f10e 	lsr.w	r1, r1, lr
 800811a:	ea40 0201 	orr.w	r2, r0, r1
 800811e:	ec43 2b10 	vmov	d0, r2, r3
 8008122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008124:	42b7      	cmp	r7, r6
 8008126:	bf3a      	itte	cc
 8008128:	f1a5 0608 	subcc.w	r6, r5, #8
 800812c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008130:	2100      	movcs	r1, #0
 8008132:	380b      	subs	r0, #11
 8008134:	d015      	beq.n	8008162 <__b2d+0x8e>
 8008136:	4084      	lsls	r4, r0
 8008138:	f1c0 0520 	rsb	r5, r0, #32
 800813c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008140:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008144:	42be      	cmp	r6, r7
 8008146:	fa21 fc05 	lsr.w	ip, r1, r5
 800814a:	ea44 030c 	orr.w	r3, r4, ip
 800814e:	bf8c      	ite	hi
 8008150:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008154:	2400      	movls	r4, #0
 8008156:	fa01 f000 	lsl.w	r0, r1, r0
 800815a:	40ec      	lsrs	r4, r5
 800815c:	ea40 0204 	orr.w	r2, r0, r4
 8008160:	e7dd      	b.n	800811e <__b2d+0x4a>
 8008162:	ea44 030c 	orr.w	r3, r4, ip
 8008166:	460a      	mov	r2, r1
 8008168:	e7d9      	b.n	800811e <__b2d+0x4a>
 800816a:	bf00      	nop
 800816c:	3ff00000 	.word	0x3ff00000

08008170 <__d2b>:
 8008170:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008174:	460e      	mov	r6, r1
 8008176:	2101      	movs	r1, #1
 8008178:	ec59 8b10 	vmov	r8, r9, d0
 800817c:	4615      	mov	r5, r2
 800817e:	f7ff fcb6 	bl	8007aee <_Balloc>
 8008182:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008186:	4607      	mov	r7, r0
 8008188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800818c:	bb34      	cbnz	r4, 80081dc <__d2b+0x6c>
 800818e:	9301      	str	r3, [sp, #4]
 8008190:	f1b8 0300 	subs.w	r3, r8, #0
 8008194:	d027      	beq.n	80081e6 <__d2b+0x76>
 8008196:	a802      	add	r0, sp, #8
 8008198:	f840 3d08 	str.w	r3, [r0, #-8]!
 800819c:	f7ff fd8a 	bl	8007cb4 <__lo0bits>
 80081a0:	9900      	ldr	r1, [sp, #0]
 80081a2:	b1f0      	cbz	r0, 80081e2 <__d2b+0x72>
 80081a4:	9a01      	ldr	r2, [sp, #4]
 80081a6:	f1c0 0320 	rsb	r3, r0, #32
 80081aa:	fa02 f303 	lsl.w	r3, r2, r3
 80081ae:	430b      	orrs	r3, r1
 80081b0:	40c2      	lsrs	r2, r0
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	9201      	str	r2, [sp, #4]
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	61bb      	str	r3, [r7, #24]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	bf14      	ite	ne
 80081be:	2102      	movne	r1, #2
 80081c0:	2101      	moveq	r1, #1
 80081c2:	6139      	str	r1, [r7, #16]
 80081c4:	b1c4      	cbz	r4, 80081f8 <__d2b+0x88>
 80081c6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80081ca:	4404      	add	r4, r0
 80081cc:	6034      	str	r4, [r6, #0]
 80081ce:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80081d2:	6028      	str	r0, [r5, #0]
 80081d4:	4638      	mov	r0, r7
 80081d6:	b003      	add	sp, #12
 80081d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081e0:	e7d5      	b.n	800818e <__d2b+0x1e>
 80081e2:	6179      	str	r1, [r7, #20]
 80081e4:	e7e7      	b.n	80081b6 <__d2b+0x46>
 80081e6:	a801      	add	r0, sp, #4
 80081e8:	f7ff fd64 	bl	8007cb4 <__lo0bits>
 80081ec:	9b01      	ldr	r3, [sp, #4]
 80081ee:	617b      	str	r3, [r7, #20]
 80081f0:	2101      	movs	r1, #1
 80081f2:	6139      	str	r1, [r7, #16]
 80081f4:	3020      	adds	r0, #32
 80081f6:	e7e5      	b.n	80081c4 <__d2b+0x54>
 80081f8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80081fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008200:	6030      	str	r0, [r6, #0]
 8008202:	6918      	ldr	r0, [r3, #16]
 8008204:	f7ff fd37 	bl	8007c76 <__hi0bits>
 8008208:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800820c:	e7e1      	b.n	80081d2 <__d2b+0x62>

0800820e <__ratio>:
 800820e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008212:	4688      	mov	r8, r1
 8008214:	4669      	mov	r1, sp
 8008216:	4681      	mov	r9, r0
 8008218:	f7ff ff5c 	bl	80080d4 <__b2d>
 800821c:	a901      	add	r1, sp, #4
 800821e:	4640      	mov	r0, r8
 8008220:	ec57 6b10 	vmov	r6, r7, d0
 8008224:	ee10 4a10 	vmov	r4, s0
 8008228:	f7ff ff54 	bl	80080d4 <__b2d>
 800822c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008230:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008234:	eba3 0c02 	sub.w	ip, r3, r2
 8008238:	e9dd 3200 	ldrd	r3, r2, [sp]
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008242:	ec51 0b10 	vmov	r0, r1, d0
 8008246:	2b00      	cmp	r3, #0
 8008248:	ee10 aa10 	vmov	sl, s0
 800824c:	bfce      	itee	gt
 800824e:	463a      	movgt	r2, r7
 8008250:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008254:	460a      	movle	r2, r1
 8008256:	463d      	mov	r5, r7
 8008258:	468b      	mov	fp, r1
 800825a:	bfcc      	ite	gt
 800825c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008260:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008264:	ec45 4b17 	vmov	d7, r4, r5
 8008268:	ec4b ab16 	vmov	d6, sl, fp
 800826c:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8008270:	b003      	add	sp, #12
 8008272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008276 <__copybits>:
 8008276:	3901      	subs	r1, #1
 8008278:	b510      	push	{r4, lr}
 800827a:	1149      	asrs	r1, r1, #5
 800827c:	6914      	ldr	r4, [r2, #16]
 800827e:	3101      	adds	r1, #1
 8008280:	f102 0314 	add.w	r3, r2, #20
 8008284:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008288:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800828c:	42a3      	cmp	r3, r4
 800828e:	4602      	mov	r2, r0
 8008290:	d303      	bcc.n	800829a <__copybits+0x24>
 8008292:	2300      	movs	r3, #0
 8008294:	428a      	cmp	r2, r1
 8008296:	d305      	bcc.n	80082a4 <__copybits+0x2e>
 8008298:	bd10      	pop	{r4, pc}
 800829a:	f853 2b04 	ldr.w	r2, [r3], #4
 800829e:	f840 2b04 	str.w	r2, [r0], #4
 80082a2:	e7f3      	b.n	800828c <__copybits+0x16>
 80082a4:	f842 3b04 	str.w	r3, [r2], #4
 80082a8:	e7f4      	b.n	8008294 <__copybits+0x1e>

080082aa <__any_on>:
 80082aa:	f100 0214 	add.w	r2, r0, #20
 80082ae:	6900      	ldr	r0, [r0, #16]
 80082b0:	114b      	asrs	r3, r1, #5
 80082b2:	4298      	cmp	r0, r3
 80082b4:	b510      	push	{r4, lr}
 80082b6:	db11      	blt.n	80082dc <__any_on+0x32>
 80082b8:	dd0a      	ble.n	80082d0 <__any_on+0x26>
 80082ba:	f011 011f 	ands.w	r1, r1, #31
 80082be:	d007      	beq.n	80082d0 <__any_on+0x26>
 80082c0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80082c4:	fa24 f001 	lsr.w	r0, r4, r1
 80082c8:	fa00 f101 	lsl.w	r1, r0, r1
 80082cc:	428c      	cmp	r4, r1
 80082ce:	d10b      	bne.n	80082e8 <__any_on+0x3e>
 80082d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d803      	bhi.n	80082e0 <__any_on+0x36>
 80082d8:	2000      	movs	r0, #0
 80082da:	bd10      	pop	{r4, pc}
 80082dc:	4603      	mov	r3, r0
 80082de:	e7f7      	b.n	80082d0 <__any_on+0x26>
 80082e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80082e4:	2900      	cmp	r1, #0
 80082e6:	d0f5      	beq.n	80082d4 <__any_on+0x2a>
 80082e8:	2001      	movs	r0, #1
 80082ea:	e7f6      	b.n	80082da <__any_on+0x30>

080082ec <_calloc_r>:
 80082ec:	b538      	push	{r3, r4, r5, lr}
 80082ee:	fb02 f401 	mul.w	r4, r2, r1
 80082f2:	4621      	mov	r1, r4
 80082f4:	f000 f856 	bl	80083a4 <_malloc_r>
 80082f8:	4605      	mov	r5, r0
 80082fa:	b118      	cbz	r0, 8008304 <_calloc_r+0x18>
 80082fc:	4622      	mov	r2, r4
 80082fe:	2100      	movs	r1, #0
 8008300:	f7fc fdfa 	bl	8004ef8 <memset>
 8008304:	4628      	mov	r0, r5
 8008306:	bd38      	pop	{r3, r4, r5, pc}

08008308 <_free_r>:
 8008308:	b538      	push	{r3, r4, r5, lr}
 800830a:	4605      	mov	r5, r0
 800830c:	2900      	cmp	r1, #0
 800830e:	d045      	beq.n	800839c <_free_r+0x94>
 8008310:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008314:	1f0c      	subs	r4, r1, #4
 8008316:	2b00      	cmp	r3, #0
 8008318:	bfb8      	it	lt
 800831a:	18e4      	addlt	r4, r4, r3
 800831c:	f000 fa36 	bl	800878c <__malloc_lock>
 8008320:	4a1f      	ldr	r2, [pc, #124]	; (80083a0 <_free_r+0x98>)
 8008322:	6813      	ldr	r3, [r2, #0]
 8008324:	4610      	mov	r0, r2
 8008326:	b933      	cbnz	r3, 8008336 <_free_r+0x2e>
 8008328:	6063      	str	r3, [r4, #4]
 800832a:	6014      	str	r4, [r2, #0]
 800832c:	4628      	mov	r0, r5
 800832e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008332:	f000 ba2c 	b.w	800878e <__malloc_unlock>
 8008336:	42a3      	cmp	r3, r4
 8008338:	d90c      	bls.n	8008354 <_free_r+0x4c>
 800833a:	6821      	ldr	r1, [r4, #0]
 800833c:	1862      	adds	r2, r4, r1
 800833e:	4293      	cmp	r3, r2
 8008340:	bf04      	itt	eq
 8008342:	681a      	ldreq	r2, [r3, #0]
 8008344:	685b      	ldreq	r3, [r3, #4]
 8008346:	6063      	str	r3, [r4, #4]
 8008348:	bf04      	itt	eq
 800834a:	1852      	addeq	r2, r2, r1
 800834c:	6022      	streq	r2, [r4, #0]
 800834e:	6004      	str	r4, [r0, #0]
 8008350:	e7ec      	b.n	800832c <_free_r+0x24>
 8008352:	4613      	mov	r3, r2
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	b10a      	cbz	r2, 800835c <_free_r+0x54>
 8008358:	42a2      	cmp	r2, r4
 800835a:	d9fa      	bls.n	8008352 <_free_r+0x4a>
 800835c:	6819      	ldr	r1, [r3, #0]
 800835e:	1858      	adds	r0, r3, r1
 8008360:	42a0      	cmp	r0, r4
 8008362:	d10b      	bne.n	800837c <_free_r+0x74>
 8008364:	6820      	ldr	r0, [r4, #0]
 8008366:	4401      	add	r1, r0
 8008368:	1858      	adds	r0, r3, r1
 800836a:	4282      	cmp	r2, r0
 800836c:	6019      	str	r1, [r3, #0]
 800836e:	d1dd      	bne.n	800832c <_free_r+0x24>
 8008370:	6810      	ldr	r0, [r2, #0]
 8008372:	6852      	ldr	r2, [r2, #4]
 8008374:	605a      	str	r2, [r3, #4]
 8008376:	4401      	add	r1, r0
 8008378:	6019      	str	r1, [r3, #0]
 800837a:	e7d7      	b.n	800832c <_free_r+0x24>
 800837c:	d902      	bls.n	8008384 <_free_r+0x7c>
 800837e:	230c      	movs	r3, #12
 8008380:	602b      	str	r3, [r5, #0]
 8008382:	e7d3      	b.n	800832c <_free_r+0x24>
 8008384:	6820      	ldr	r0, [r4, #0]
 8008386:	1821      	adds	r1, r4, r0
 8008388:	428a      	cmp	r2, r1
 800838a:	bf04      	itt	eq
 800838c:	6811      	ldreq	r1, [r2, #0]
 800838e:	6852      	ldreq	r2, [r2, #4]
 8008390:	6062      	str	r2, [r4, #4]
 8008392:	bf04      	itt	eq
 8008394:	1809      	addeq	r1, r1, r0
 8008396:	6021      	streq	r1, [r4, #0]
 8008398:	605c      	str	r4, [r3, #4]
 800839a:	e7c7      	b.n	800832c <_free_r+0x24>
 800839c:	bd38      	pop	{r3, r4, r5, pc}
 800839e:	bf00      	nop
 80083a0:	20000200 	.word	0x20000200

080083a4 <_malloc_r>:
 80083a4:	b570      	push	{r4, r5, r6, lr}
 80083a6:	1ccd      	adds	r5, r1, #3
 80083a8:	f025 0503 	bic.w	r5, r5, #3
 80083ac:	3508      	adds	r5, #8
 80083ae:	2d0c      	cmp	r5, #12
 80083b0:	bf38      	it	cc
 80083b2:	250c      	movcc	r5, #12
 80083b4:	2d00      	cmp	r5, #0
 80083b6:	4606      	mov	r6, r0
 80083b8:	db01      	blt.n	80083be <_malloc_r+0x1a>
 80083ba:	42a9      	cmp	r1, r5
 80083bc:	d903      	bls.n	80083c6 <_malloc_r+0x22>
 80083be:	230c      	movs	r3, #12
 80083c0:	6033      	str	r3, [r6, #0]
 80083c2:	2000      	movs	r0, #0
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	f000 f9e1 	bl	800878c <__malloc_lock>
 80083ca:	4a21      	ldr	r2, [pc, #132]	; (8008450 <_malloc_r+0xac>)
 80083cc:	6814      	ldr	r4, [r2, #0]
 80083ce:	4621      	mov	r1, r4
 80083d0:	b991      	cbnz	r1, 80083f8 <_malloc_r+0x54>
 80083d2:	4c20      	ldr	r4, [pc, #128]	; (8008454 <_malloc_r+0xb0>)
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	b91b      	cbnz	r3, 80083e0 <_malloc_r+0x3c>
 80083d8:	4630      	mov	r0, r6
 80083da:	f000 f98f 	bl	80086fc <_sbrk_r>
 80083de:	6020      	str	r0, [r4, #0]
 80083e0:	4629      	mov	r1, r5
 80083e2:	4630      	mov	r0, r6
 80083e4:	f000 f98a 	bl	80086fc <_sbrk_r>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d124      	bne.n	8008436 <_malloc_r+0x92>
 80083ec:	230c      	movs	r3, #12
 80083ee:	6033      	str	r3, [r6, #0]
 80083f0:	4630      	mov	r0, r6
 80083f2:	f000 f9cc 	bl	800878e <__malloc_unlock>
 80083f6:	e7e4      	b.n	80083c2 <_malloc_r+0x1e>
 80083f8:	680b      	ldr	r3, [r1, #0]
 80083fa:	1b5b      	subs	r3, r3, r5
 80083fc:	d418      	bmi.n	8008430 <_malloc_r+0x8c>
 80083fe:	2b0b      	cmp	r3, #11
 8008400:	d90f      	bls.n	8008422 <_malloc_r+0x7e>
 8008402:	600b      	str	r3, [r1, #0]
 8008404:	50cd      	str	r5, [r1, r3]
 8008406:	18cc      	adds	r4, r1, r3
 8008408:	4630      	mov	r0, r6
 800840a:	f000 f9c0 	bl	800878e <__malloc_unlock>
 800840e:	f104 000b 	add.w	r0, r4, #11
 8008412:	1d23      	adds	r3, r4, #4
 8008414:	f020 0007 	bic.w	r0, r0, #7
 8008418:	1ac3      	subs	r3, r0, r3
 800841a:	d0d3      	beq.n	80083c4 <_malloc_r+0x20>
 800841c:	425a      	negs	r2, r3
 800841e:	50e2      	str	r2, [r4, r3]
 8008420:	e7d0      	b.n	80083c4 <_malloc_r+0x20>
 8008422:	428c      	cmp	r4, r1
 8008424:	684b      	ldr	r3, [r1, #4]
 8008426:	bf16      	itet	ne
 8008428:	6063      	strne	r3, [r4, #4]
 800842a:	6013      	streq	r3, [r2, #0]
 800842c:	460c      	movne	r4, r1
 800842e:	e7eb      	b.n	8008408 <_malloc_r+0x64>
 8008430:	460c      	mov	r4, r1
 8008432:	6849      	ldr	r1, [r1, #4]
 8008434:	e7cc      	b.n	80083d0 <_malloc_r+0x2c>
 8008436:	1cc4      	adds	r4, r0, #3
 8008438:	f024 0403 	bic.w	r4, r4, #3
 800843c:	42a0      	cmp	r0, r4
 800843e:	d005      	beq.n	800844c <_malloc_r+0xa8>
 8008440:	1a21      	subs	r1, r4, r0
 8008442:	4630      	mov	r0, r6
 8008444:	f000 f95a 	bl	80086fc <_sbrk_r>
 8008448:	3001      	adds	r0, #1
 800844a:	d0cf      	beq.n	80083ec <_malloc_r+0x48>
 800844c:	6025      	str	r5, [r4, #0]
 800844e:	e7db      	b.n	8008408 <_malloc_r+0x64>
 8008450:	20000200 	.word	0x20000200
 8008454:	20000204 	.word	0x20000204

08008458 <__ssputs_r>:
 8008458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800845c:	688e      	ldr	r6, [r1, #8]
 800845e:	429e      	cmp	r6, r3
 8008460:	4682      	mov	sl, r0
 8008462:	460c      	mov	r4, r1
 8008464:	4690      	mov	r8, r2
 8008466:	4699      	mov	r9, r3
 8008468:	d837      	bhi.n	80084da <__ssputs_r+0x82>
 800846a:	898a      	ldrh	r2, [r1, #12]
 800846c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008470:	d031      	beq.n	80084d6 <__ssputs_r+0x7e>
 8008472:	6825      	ldr	r5, [r4, #0]
 8008474:	6909      	ldr	r1, [r1, #16]
 8008476:	1a6f      	subs	r7, r5, r1
 8008478:	6965      	ldr	r5, [r4, #20]
 800847a:	2302      	movs	r3, #2
 800847c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008480:	fb95 f5f3 	sdiv	r5, r5, r3
 8008484:	f109 0301 	add.w	r3, r9, #1
 8008488:	443b      	add	r3, r7
 800848a:	429d      	cmp	r5, r3
 800848c:	bf38      	it	cc
 800848e:	461d      	movcc	r5, r3
 8008490:	0553      	lsls	r3, r2, #21
 8008492:	d530      	bpl.n	80084f6 <__ssputs_r+0x9e>
 8008494:	4629      	mov	r1, r5
 8008496:	f7ff ff85 	bl	80083a4 <_malloc_r>
 800849a:	4606      	mov	r6, r0
 800849c:	b950      	cbnz	r0, 80084b4 <__ssputs_r+0x5c>
 800849e:	230c      	movs	r3, #12
 80084a0:	f8ca 3000 	str.w	r3, [sl]
 80084a4:	89a3      	ldrh	r3, [r4, #12]
 80084a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084aa:	81a3      	strh	r3, [r4, #12]
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084b4:	463a      	mov	r2, r7
 80084b6:	6921      	ldr	r1, [r4, #16]
 80084b8:	f7ff fb0e 	bl	8007ad8 <memcpy>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	6126      	str	r6, [r4, #16]
 80084ca:	6165      	str	r5, [r4, #20]
 80084cc:	443e      	add	r6, r7
 80084ce:	1bed      	subs	r5, r5, r7
 80084d0:	6026      	str	r6, [r4, #0]
 80084d2:	60a5      	str	r5, [r4, #8]
 80084d4:	464e      	mov	r6, r9
 80084d6:	454e      	cmp	r6, r9
 80084d8:	d900      	bls.n	80084dc <__ssputs_r+0x84>
 80084da:	464e      	mov	r6, r9
 80084dc:	4632      	mov	r2, r6
 80084de:	4641      	mov	r1, r8
 80084e0:	6820      	ldr	r0, [r4, #0]
 80084e2:	f000 f93a 	bl	800875a <memmove>
 80084e6:	68a3      	ldr	r3, [r4, #8]
 80084e8:	1b9b      	subs	r3, r3, r6
 80084ea:	60a3      	str	r3, [r4, #8]
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	441e      	add	r6, r3
 80084f0:	6026      	str	r6, [r4, #0]
 80084f2:	2000      	movs	r0, #0
 80084f4:	e7dc      	b.n	80084b0 <__ssputs_r+0x58>
 80084f6:	462a      	mov	r2, r5
 80084f8:	f000 f94a 	bl	8008790 <_realloc_r>
 80084fc:	4606      	mov	r6, r0
 80084fe:	2800      	cmp	r0, #0
 8008500:	d1e2      	bne.n	80084c8 <__ssputs_r+0x70>
 8008502:	6921      	ldr	r1, [r4, #16]
 8008504:	4650      	mov	r0, sl
 8008506:	f7ff feff 	bl	8008308 <_free_r>
 800850a:	e7c8      	b.n	800849e <__ssputs_r+0x46>

0800850c <_svfiprintf_r>:
 800850c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008510:	461d      	mov	r5, r3
 8008512:	898b      	ldrh	r3, [r1, #12]
 8008514:	061f      	lsls	r7, r3, #24
 8008516:	b09d      	sub	sp, #116	; 0x74
 8008518:	4680      	mov	r8, r0
 800851a:	460c      	mov	r4, r1
 800851c:	4616      	mov	r6, r2
 800851e:	d50f      	bpl.n	8008540 <_svfiprintf_r+0x34>
 8008520:	690b      	ldr	r3, [r1, #16]
 8008522:	b96b      	cbnz	r3, 8008540 <_svfiprintf_r+0x34>
 8008524:	2140      	movs	r1, #64	; 0x40
 8008526:	f7ff ff3d 	bl	80083a4 <_malloc_r>
 800852a:	6020      	str	r0, [r4, #0]
 800852c:	6120      	str	r0, [r4, #16]
 800852e:	b928      	cbnz	r0, 800853c <_svfiprintf_r+0x30>
 8008530:	230c      	movs	r3, #12
 8008532:	f8c8 3000 	str.w	r3, [r8]
 8008536:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800853a:	e0c8      	b.n	80086ce <_svfiprintf_r+0x1c2>
 800853c:	2340      	movs	r3, #64	; 0x40
 800853e:	6163      	str	r3, [r4, #20]
 8008540:	2300      	movs	r3, #0
 8008542:	9309      	str	r3, [sp, #36]	; 0x24
 8008544:	2320      	movs	r3, #32
 8008546:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008550:	9503      	str	r5, [sp, #12]
 8008552:	f04f 0b01 	mov.w	fp, #1
 8008556:	4637      	mov	r7, r6
 8008558:	463d      	mov	r5, r7
 800855a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800855e:	b10b      	cbz	r3, 8008564 <_svfiprintf_r+0x58>
 8008560:	2b25      	cmp	r3, #37	; 0x25
 8008562:	d13e      	bne.n	80085e2 <_svfiprintf_r+0xd6>
 8008564:	ebb7 0a06 	subs.w	sl, r7, r6
 8008568:	d00b      	beq.n	8008582 <_svfiprintf_r+0x76>
 800856a:	4653      	mov	r3, sl
 800856c:	4632      	mov	r2, r6
 800856e:	4621      	mov	r1, r4
 8008570:	4640      	mov	r0, r8
 8008572:	f7ff ff71 	bl	8008458 <__ssputs_r>
 8008576:	3001      	adds	r0, #1
 8008578:	f000 80a4 	beq.w	80086c4 <_svfiprintf_r+0x1b8>
 800857c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800857e:	4453      	add	r3, sl
 8008580:	9309      	str	r3, [sp, #36]	; 0x24
 8008582:	783b      	ldrb	r3, [r7, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	f000 809d 	beq.w	80086c4 <_svfiprintf_r+0x1b8>
 800858a:	2300      	movs	r3, #0
 800858c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	9307      	str	r3, [sp, #28]
 8008598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859c:	931a      	str	r3, [sp, #104]	; 0x68
 800859e:	462f      	mov	r7, r5
 80085a0:	2205      	movs	r2, #5
 80085a2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80085a6:	4850      	ldr	r0, [pc, #320]	; (80086e8 <_svfiprintf_r+0x1dc>)
 80085a8:	f7f7 fe52 	bl	8000250 <memchr>
 80085ac:	9b04      	ldr	r3, [sp, #16]
 80085ae:	b9d0      	cbnz	r0, 80085e6 <_svfiprintf_r+0xda>
 80085b0:	06d9      	lsls	r1, r3, #27
 80085b2:	bf44      	itt	mi
 80085b4:	2220      	movmi	r2, #32
 80085b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085ba:	071a      	lsls	r2, r3, #28
 80085bc:	bf44      	itt	mi
 80085be:	222b      	movmi	r2, #43	; 0x2b
 80085c0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80085c4:	782a      	ldrb	r2, [r5, #0]
 80085c6:	2a2a      	cmp	r2, #42	; 0x2a
 80085c8:	d015      	beq.n	80085f6 <_svfiprintf_r+0xea>
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	462f      	mov	r7, r5
 80085ce:	2000      	movs	r0, #0
 80085d0:	250a      	movs	r5, #10
 80085d2:	4639      	mov	r1, r7
 80085d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085d8:	3b30      	subs	r3, #48	; 0x30
 80085da:	2b09      	cmp	r3, #9
 80085dc:	d94d      	bls.n	800867a <_svfiprintf_r+0x16e>
 80085de:	b1b8      	cbz	r0, 8008610 <_svfiprintf_r+0x104>
 80085e0:	e00f      	b.n	8008602 <_svfiprintf_r+0xf6>
 80085e2:	462f      	mov	r7, r5
 80085e4:	e7b8      	b.n	8008558 <_svfiprintf_r+0x4c>
 80085e6:	4a40      	ldr	r2, [pc, #256]	; (80086e8 <_svfiprintf_r+0x1dc>)
 80085e8:	1a80      	subs	r0, r0, r2
 80085ea:	fa0b f000 	lsl.w	r0, fp, r0
 80085ee:	4318      	orrs	r0, r3
 80085f0:	9004      	str	r0, [sp, #16]
 80085f2:	463d      	mov	r5, r7
 80085f4:	e7d3      	b.n	800859e <_svfiprintf_r+0x92>
 80085f6:	9a03      	ldr	r2, [sp, #12]
 80085f8:	1d11      	adds	r1, r2, #4
 80085fa:	6812      	ldr	r2, [r2, #0]
 80085fc:	9103      	str	r1, [sp, #12]
 80085fe:	2a00      	cmp	r2, #0
 8008600:	db01      	blt.n	8008606 <_svfiprintf_r+0xfa>
 8008602:	9207      	str	r2, [sp, #28]
 8008604:	e004      	b.n	8008610 <_svfiprintf_r+0x104>
 8008606:	4252      	negs	r2, r2
 8008608:	f043 0302 	orr.w	r3, r3, #2
 800860c:	9207      	str	r2, [sp, #28]
 800860e:	9304      	str	r3, [sp, #16]
 8008610:	783b      	ldrb	r3, [r7, #0]
 8008612:	2b2e      	cmp	r3, #46	; 0x2e
 8008614:	d10c      	bne.n	8008630 <_svfiprintf_r+0x124>
 8008616:	787b      	ldrb	r3, [r7, #1]
 8008618:	2b2a      	cmp	r3, #42	; 0x2a
 800861a:	d133      	bne.n	8008684 <_svfiprintf_r+0x178>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfb8      	it	lt
 8008628:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800862c:	3702      	adds	r7, #2
 800862e:	9305      	str	r3, [sp, #20]
 8008630:	4d2e      	ldr	r5, [pc, #184]	; (80086ec <_svfiprintf_r+0x1e0>)
 8008632:	7839      	ldrb	r1, [r7, #0]
 8008634:	2203      	movs	r2, #3
 8008636:	4628      	mov	r0, r5
 8008638:	f7f7 fe0a 	bl	8000250 <memchr>
 800863c:	b138      	cbz	r0, 800864e <_svfiprintf_r+0x142>
 800863e:	2340      	movs	r3, #64	; 0x40
 8008640:	1b40      	subs	r0, r0, r5
 8008642:	fa03 f000 	lsl.w	r0, r3, r0
 8008646:	9b04      	ldr	r3, [sp, #16]
 8008648:	4303      	orrs	r3, r0
 800864a:	3701      	adds	r7, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	7839      	ldrb	r1, [r7, #0]
 8008650:	4827      	ldr	r0, [pc, #156]	; (80086f0 <_svfiprintf_r+0x1e4>)
 8008652:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008656:	2206      	movs	r2, #6
 8008658:	1c7e      	adds	r6, r7, #1
 800865a:	f7f7 fdf9 	bl	8000250 <memchr>
 800865e:	2800      	cmp	r0, #0
 8008660:	d038      	beq.n	80086d4 <_svfiprintf_r+0x1c8>
 8008662:	4b24      	ldr	r3, [pc, #144]	; (80086f4 <_svfiprintf_r+0x1e8>)
 8008664:	bb13      	cbnz	r3, 80086ac <_svfiprintf_r+0x1a0>
 8008666:	9b03      	ldr	r3, [sp, #12]
 8008668:	3307      	adds	r3, #7
 800866a:	f023 0307 	bic.w	r3, r3, #7
 800866e:	3308      	adds	r3, #8
 8008670:	9303      	str	r3, [sp, #12]
 8008672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008674:	444b      	add	r3, r9
 8008676:	9309      	str	r3, [sp, #36]	; 0x24
 8008678:	e76d      	b.n	8008556 <_svfiprintf_r+0x4a>
 800867a:	fb05 3202 	mla	r2, r5, r2, r3
 800867e:	2001      	movs	r0, #1
 8008680:	460f      	mov	r7, r1
 8008682:	e7a6      	b.n	80085d2 <_svfiprintf_r+0xc6>
 8008684:	2300      	movs	r3, #0
 8008686:	3701      	adds	r7, #1
 8008688:	9305      	str	r3, [sp, #20]
 800868a:	4619      	mov	r1, r3
 800868c:	250a      	movs	r5, #10
 800868e:	4638      	mov	r0, r7
 8008690:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008694:	3a30      	subs	r2, #48	; 0x30
 8008696:	2a09      	cmp	r2, #9
 8008698:	d903      	bls.n	80086a2 <_svfiprintf_r+0x196>
 800869a:	2b00      	cmp	r3, #0
 800869c:	d0c8      	beq.n	8008630 <_svfiprintf_r+0x124>
 800869e:	9105      	str	r1, [sp, #20]
 80086a0:	e7c6      	b.n	8008630 <_svfiprintf_r+0x124>
 80086a2:	fb05 2101 	mla	r1, r5, r1, r2
 80086a6:	2301      	movs	r3, #1
 80086a8:	4607      	mov	r7, r0
 80086aa:	e7f0      	b.n	800868e <_svfiprintf_r+0x182>
 80086ac:	ab03      	add	r3, sp, #12
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	4622      	mov	r2, r4
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <_svfiprintf_r+0x1ec>)
 80086b4:	a904      	add	r1, sp, #16
 80086b6:	4640      	mov	r0, r8
 80086b8:	f7fc fcae 	bl	8005018 <_printf_float>
 80086bc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80086c0:	4681      	mov	r9, r0
 80086c2:	d1d6      	bne.n	8008672 <_svfiprintf_r+0x166>
 80086c4:	89a3      	ldrh	r3, [r4, #12]
 80086c6:	065b      	lsls	r3, r3, #25
 80086c8:	f53f af35 	bmi.w	8008536 <_svfiprintf_r+0x2a>
 80086cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ce:	b01d      	add	sp, #116	; 0x74
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	ab03      	add	r3, sp, #12
 80086d6:	9300      	str	r3, [sp, #0]
 80086d8:	4622      	mov	r2, r4
 80086da:	4b07      	ldr	r3, [pc, #28]	; (80086f8 <_svfiprintf_r+0x1ec>)
 80086dc:	a904      	add	r1, sp, #16
 80086de:	4640      	mov	r0, r8
 80086e0:	f7fc ff3c 	bl	800555c <_printf_i>
 80086e4:	e7ea      	b.n	80086bc <_svfiprintf_r+0x1b0>
 80086e6:	bf00      	nop
 80086e8:	08008c0c 	.word	0x08008c0c
 80086ec:	08008c12 	.word	0x08008c12
 80086f0:	08008c16 	.word	0x08008c16
 80086f4:	08005019 	.word	0x08005019
 80086f8:	08008459 	.word	0x08008459

080086fc <_sbrk_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4c06      	ldr	r4, [pc, #24]	; (8008718 <_sbrk_r+0x1c>)
 8008700:	2300      	movs	r3, #0
 8008702:	4605      	mov	r5, r0
 8008704:	4608      	mov	r0, r1
 8008706:	6023      	str	r3, [r4, #0]
 8008708:	f7f8 fc9a 	bl	8001040 <_sbrk>
 800870c:	1c43      	adds	r3, r0, #1
 800870e:	d102      	bne.n	8008716 <_sbrk_r+0x1a>
 8008710:	6823      	ldr	r3, [r4, #0]
 8008712:	b103      	cbz	r3, 8008716 <_sbrk_r+0x1a>
 8008714:	602b      	str	r3, [r5, #0]
 8008716:	bd38      	pop	{r3, r4, r5, pc}
 8008718:	2000034c 	.word	0x2000034c

0800871c <strncmp>:
 800871c:	b510      	push	{r4, lr}
 800871e:	b16a      	cbz	r2, 800873c <strncmp+0x20>
 8008720:	3901      	subs	r1, #1
 8008722:	1884      	adds	r4, r0, r2
 8008724:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008728:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800872c:	4293      	cmp	r3, r2
 800872e:	d103      	bne.n	8008738 <strncmp+0x1c>
 8008730:	42a0      	cmp	r0, r4
 8008732:	d001      	beq.n	8008738 <strncmp+0x1c>
 8008734:	2b00      	cmp	r3, #0
 8008736:	d1f5      	bne.n	8008724 <strncmp+0x8>
 8008738:	1a98      	subs	r0, r3, r2
 800873a:	bd10      	pop	{r4, pc}
 800873c:	4610      	mov	r0, r2
 800873e:	e7fc      	b.n	800873a <strncmp+0x1e>

08008740 <__ascii_wctomb>:
 8008740:	b149      	cbz	r1, 8008756 <__ascii_wctomb+0x16>
 8008742:	2aff      	cmp	r2, #255	; 0xff
 8008744:	bf85      	ittet	hi
 8008746:	238a      	movhi	r3, #138	; 0x8a
 8008748:	6003      	strhi	r3, [r0, #0]
 800874a:	700a      	strbls	r2, [r1, #0]
 800874c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008750:	bf98      	it	ls
 8008752:	2001      	movls	r0, #1
 8008754:	4770      	bx	lr
 8008756:	4608      	mov	r0, r1
 8008758:	4770      	bx	lr

0800875a <memmove>:
 800875a:	4288      	cmp	r0, r1
 800875c:	b510      	push	{r4, lr}
 800875e:	eb01 0302 	add.w	r3, r1, r2
 8008762:	d807      	bhi.n	8008774 <memmove+0x1a>
 8008764:	1e42      	subs	r2, r0, #1
 8008766:	4299      	cmp	r1, r3
 8008768:	d00a      	beq.n	8008780 <memmove+0x26>
 800876a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800876e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008772:	e7f8      	b.n	8008766 <memmove+0xc>
 8008774:	4283      	cmp	r3, r0
 8008776:	d9f5      	bls.n	8008764 <memmove+0xa>
 8008778:	1881      	adds	r1, r0, r2
 800877a:	1ad2      	subs	r2, r2, r3
 800877c:	42d3      	cmn	r3, r2
 800877e:	d100      	bne.n	8008782 <memmove+0x28>
 8008780:	bd10      	pop	{r4, pc}
 8008782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008786:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800878a:	e7f7      	b.n	800877c <memmove+0x22>

0800878c <__malloc_lock>:
 800878c:	4770      	bx	lr

0800878e <__malloc_unlock>:
 800878e:	4770      	bx	lr

08008790 <_realloc_r>:
 8008790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008792:	4607      	mov	r7, r0
 8008794:	4614      	mov	r4, r2
 8008796:	460e      	mov	r6, r1
 8008798:	b921      	cbnz	r1, 80087a4 <_realloc_r+0x14>
 800879a:	4611      	mov	r1, r2
 800879c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087a0:	f7ff be00 	b.w	80083a4 <_malloc_r>
 80087a4:	b922      	cbnz	r2, 80087b0 <_realloc_r+0x20>
 80087a6:	f7ff fdaf 	bl	8008308 <_free_r>
 80087aa:	4625      	mov	r5, r4
 80087ac:	4628      	mov	r0, r5
 80087ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b0:	f000 f814 	bl	80087dc <_malloc_usable_size_r>
 80087b4:	42a0      	cmp	r0, r4
 80087b6:	d20f      	bcs.n	80087d8 <_realloc_r+0x48>
 80087b8:	4621      	mov	r1, r4
 80087ba:	4638      	mov	r0, r7
 80087bc:	f7ff fdf2 	bl	80083a4 <_malloc_r>
 80087c0:	4605      	mov	r5, r0
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d0f2      	beq.n	80087ac <_realloc_r+0x1c>
 80087c6:	4631      	mov	r1, r6
 80087c8:	4622      	mov	r2, r4
 80087ca:	f7ff f985 	bl	8007ad8 <memcpy>
 80087ce:	4631      	mov	r1, r6
 80087d0:	4638      	mov	r0, r7
 80087d2:	f7ff fd99 	bl	8008308 <_free_r>
 80087d6:	e7e9      	b.n	80087ac <_realloc_r+0x1c>
 80087d8:	4635      	mov	r5, r6
 80087da:	e7e7      	b.n	80087ac <_realloc_r+0x1c>

080087dc <_malloc_usable_size_r>:
 80087dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087e0:	1f18      	subs	r0, r3, #4
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	bfbc      	itt	lt
 80087e6:	580b      	ldrlt	r3, [r1, r0]
 80087e8:	18c0      	addlt	r0, r0, r3
 80087ea:	4770      	bx	lr

080087ec <_init>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	bf00      	nop
 80087f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f2:	bc08      	pop	{r3}
 80087f4:	469e      	mov	lr, r3
 80087f6:	4770      	bx	lr

080087f8 <_fini>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr
